
MaximTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800200  00002be6  00002c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000616  00800260  00800260  00002cda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000720  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fb9f  00000000  00000000  0000346c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c41  00000000  00000000  0001300b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003dac  00000000  00000000  00015c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001990  00000000  00000000  000199f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030b2  00000000  00000000  0001b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009094  00000000  00000000  0001e43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  000274ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__dtors_end>
       2:	00 00       	nop
       4:	47 c1       	rjmp	.+654    	; 0x294 <__bad_interrupt>
       6:	00 00       	nop
       8:	45 c1       	rjmp	.+650    	; 0x294 <__bad_interrupt>
       a:	00 00       	nop
       c:	43 c1       	rjmp	.+646    	; 0x294 <__bad_interrupt>
       e:	00 00       	nop
      10:	41 c1       	rjmp	.+642    	; 0x294 <__bad_interrupt>
      12:	00 00       	nop
      14:	40 c1       	rjmp	.+640    	; 0x296 <__vector_5>
      16:	00 00       	nop
      18:	a8 c1       	rjmp	.+848    	; 0x36a <__vector_6>
      1a:	00 00       	nop
      1c:	3b c1       	rjmp	.+630    	; 0x294 <__bad_interrupt>
      1e:	00 00       	nop
      20:	39 c1       	rjmp	.+626    	; 0x294 <__bad_interrupt>
      22:	00 00       	nop
      24:	37 c1       	rjmp	.+622    	; 0x294 <__bad_interrupt>
      26:	00 00       	nop
      28:	35 c1       	rjmp	.+618    	; 0x294 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	33 c1       	rjmp	.+614    	; 0x294 <__bad_interrupt>
      2e:	00 00       	nop
      30:	31 c1       	rjmp	.+610    	; 0x294 <__bad_interrupt>
      32:	00 00       	nop
      34:	2f c1       	rjmp	.+606    	; 0x294 <__bad_interrupt>
      36:	00 00       	nop
      38:	2d c1       	rjmp	.+602    	; 0x294 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2b c1       	rjmp	.+598    	; 0x294 <__bad_interrupt>
      3e:	00 00       	nop
      40:	29 c1       	rjmp	.+594    	; 0x294 <__bad_interrupt>
      42:	00 00       	nop
      44:	27 c1       	rjmp	.+590    	; 0x294 <__bad_interrupt>
      46:	00 00       	nop
      48:	25 c1       	rjmp	.+586    	; 0x294 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	23 c1       	rjmp	.+582    	; 0x294 <__bad_interrupt>
      4e:	00 00       	nop
      50:	21 c1       	rjmp	.+578    	; 0x294 <__bad_interrupt>
      52:	00 00       	nop
      54:	1f c1       	rjmp	.+574    	; 0x294 <__bad_interrupt>
      56:	00 00       	nop
      58:	1d c1       	rjmp	.+570    	; 0x294 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	44 c7       	rjmp	.+3720   	; 0xee6 <__vector_23>
      5e:	00 00       	nop
      60:	19 c1       	rjmp	.+562    	; 0x294 <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c5       	rjmp	.+2840   	; 0xb7e <__vector_25>
      66:	00 00       	nop
      68:	c0 c5       	rjmp	.+2944   	; 0xbea <__vector_26>
      6a:	00 00       	nop
      6c:	13 c1       	rjmp	.+550    	; 0x294 <__bad_interrupt>
      6e:	00 00       	nop
      70:	11 c1       	rjmp	.+546    	; 0x294 <__bad_interrupt>
      72:	00 00       	nop
      74:	0f c1       	rjmp	.+542    	; 0x294 <__bad_interrupt>
      76:	00 00       	nop
      78:	0d c1       	rjmp	.+538    	; 0x294 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0b c1       	rjmp	.+534    	; 0x294 <__bad_interrupt>
      7e:	00 00       	nop
      80:	09 c1       	rjmp	.+530    	; 0x294 <__bad_interrupt>
      82:	00 00       	nop
      84:	07 c1       	rjmp	.+526    	; 0x294 <__bad_interrupt>
      86:	00 00       	nop
      88:	05 c1       	rjmp	.+522    	; 0x294 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	03 c1       	rjmp	.+518    	; 0x294 <__bad_interrupt>
      8e:	00 00       	nop
      90:	01 c1       	rjmp	.+514    	; 0x294 <__bad_interrupt>
      92:	00 00       	nop
      94:	ff c0       	rjmp	.+510    	; 0x294 <__bad_interrupt>
      96:	00 00       	nop
      98:	fd c0       	rjmp	.+506    	; 0x294 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fb c0       	rjmp	.+502    	; 0x294 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f9 c0       	rjmp	.+498    	; 0x294 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f7 c0       	rjmp	.+494    	; 0x294 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f5 c0       	rjmp	.+490    	; 0x294 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f3 c0       	rjmp	.+486    	; 0x294 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f1 c0       	rjmp	.+482    	; 0x294 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ef c0       	rjmp	.+478    	; 0x294 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ed c0       	rjmp	.+474    	; 0x294 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	eb c0       	rjmp	.+470    	; 0x294 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e9 c0       	rjmp	.+466    	; 0x294 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e7 c0       	rjmp	.+462    	; 0x294 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e5 c0       	rjmp	.+458    	; 0x294 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e3 c0       	rjmp	.+454    	; 0x294 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e1 c0       	rjmp	.+450    	; 0x294 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	df c0       	rjmp	.+446    	; 0x294 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	dd c0       	rjmp	.+442    	; 0x294 <__bad_interrupt>
      da:	00 00       	nop
      dc:	db c0       	rjmp	.+438    	; 0x294 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d9 c0       	rjmp	.+434    	; 0x294 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 08       	sbc	r11, r0
      e6:	b3 08       	sbc	r11, r3
      e8:	a2 08       	sbc	r10, r2
      ea:	a6 08       	sbc	r10, r6
      ec:	ac 08       	sbc	r10, r12
      ee:	ea 08       	sbc	r14, r10
      f0:	b7 08       	sbc	r11, r7
      f2:	bb 08       	sbc	r11, r11
      f4:	c1 08       	sbc	r12, r1
      f6:	c5 08       	sbc	r12, r5
      f8:	c9 08       	sbc	r12, r9
      fa:	cf 08       	sbc	r12, r15
      fc:	d3 08       	sbc	r13, r3
      fe:	d7 08       	sbc	r13, r7
     100:	ea 08       	sbc	r14, r10
     102:	dd 08       	sbc	r13, r13
     104:	e1 08       	sbc	r14, r1
     106:	e5 08       	sbc	r14, r5
     108:	45 0a       	sbc	r4, r21
     10a:	4c 0a       	sbc	r4, r28
     10c:	53 0a       	sbc	r5, r19
     10e:	5a 0a       	sbc	r5, r26
     110:	61 0a       	sbc	r6, r17
     112:	79 0a       	sbc	r7, r25
     114:	68 0a       	sbc	r6, r24
     116:	79 0a       	sbc	r7, r25
     118:	6f 0a       	sbc	r6, r31
     11a:	eb 0a       	sbc	r14, r27
     11c:	ef 0a       	sbc	r14, r31
     11e:	f3 0a       	sbc	r15, r19
     120:	f7 0a       	sbc	r15, r23
     122:	fb 0a       	sbc	r15, r27
     124:	ff 0a       	sbc	r15, r31
     126:	03 0b       	sbc	r16, r19

00000128 <__trampolines_end>:
     128:	00 00       	nop
     12a:	0a 0b       	sbc	r16, r26
     12c:	02 09       	sbc	r16, r2
     12e:	0c 0d       	add	r16, r12
     130:	0e 08       	sbc	r0, r14
     132:	07 03       	mulsu	r16, r23
     134:	04 01       	movw	r0, r8
	...
     152:	00 00       	nop
     154:	12 11       	cpse	r17, r2
     156:	10 00       	.word	0x0010	; ????
	...

0000016e <digital_pin_to_bit_mask_PGM>:
     16e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     18e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     19e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1ae:	04 08 10 20 40 80                                   ... @.

000001b4 <digital_pin_to_port_PGM>:
     1b4:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1c4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1d4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1e4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1f4:	0b 0b 0b 0b 0b 0b                                   ......

000001fa <port_to_output_PGM>:
     1fa:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     20a:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000214 <port_to_mode_PGM>:
     214:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     224:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000022e <__ctors_start>:
     22e:	8c 03       	fmulsu	r16, r20
     230:	27 06       	cpc	r2, r23

00000232 <__ctors_end>:
     232:	b1 03       	fmuls	r19, r17

00000234 <__dtors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d1 e2       	ldi	r29, 0x21	; 33
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	0c bf       	out	0x3c, r16	; 60

00000244 <__do_copy_data>:
     244:	12 e0       	ldi	r17, 0x02	; 2
     246:	a0 e0       	ldi	r26, 0x00	; 0
     248:	b2 e0       	ldi	r27, 0x02	; 2
     24a:	e6 ee       	ldi	r30, 0xE6	; 230
     24c:	fb e2       	ldi	r31, 0x2B	; 43
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0b bf       	out	0x3b, r16	; 59
     252:	02 c0       	rjmp	.+4      	; 0x258 <__do_copy_data+0x14>
     254:	07 90       	elpm	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	a0 36       	cpi	r26, 0x60	; 96
     25a:	b1 07       	cpc	r27, r17
     25c:	d9 f7       	brne	.-10     	; 0x254 <__do_copy_data+0x10>

0000025e <__do_clear_bss>:
     25e:	28 e0       	ldi	r18, 0x08	; 8
     260:	a0 e6       	ldi	r26, 0x60	; 96
     262:	b2 e0       	ldi	r27, 0x02	; 2
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a6 37       	cpi	r26, 0x76	; 118
     26a:	b2 07       	cpc	r27, r18
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>

0000026e <__do_global_ctors>:
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	c9 e1       	ldi	r28, 0x19	; 25
     272:	d1 e0       	ldi	r29, 0x01	; 1
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	06 c0       	rjmp	.+12     	; 0x284 <__do_global_ctors+0x16>
     278:	21 97       	sbiw	r28, 0x01	; 1
     27a:	01 09       	sbc	r16, r1
     27c:	80 2f       	mov	r24, r16
     27e:	fe 01       	movw	r30, r28
     280:	0e 94 8e 13 	call	0x271c	; 0x271c <__tablejump2__>
     284:	c7 31       	cpi	r28, 0x17	; 23
     286:	d1 07       	cpc	r29, r17
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	08 07       	cpc	r16, r24
     28c:	a9 f7       	brne	.-22     	; 0x278 <__do_global_ctors+0xa>
     28e:	24 d5       	rcall	.+2632   	; 0xcd8 <main>
     290:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__do_global_dtors>

00000294 <__bad_interrupt>:
     294:	b5 ce       	rjmp	.-662    	; 0x0 <__vectors>

00000296 <__vector_5>:
String inString = "";
MultiStepper steppers;
int n=0;
bool nRead=false;
ISR(INT4_vect)
{
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	0b b6       	in	r0, 0x3b	; 59
     2a2:	0f 92       	push	r0
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
	static unsigned long last_interrupt_time = 0;
	unsigned long interrupt_time = millis();
     2c4:	5a d6       	rcall	.+3252   	; 0xf7a <millis>
     2c6:	6b 01       	movw	r12, r22
     2c8:	7c 01       	movw	r14, r24
	
	if (interrupt_time - last_interrupt_time > 200)
     2ca:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <_ZZ10__vector_5E19last_interrupt_time>
     2ce:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <_ZZ10__vector_5E19last_interrupt_time+0x1>
     2d2:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <_ZZ10__vector_5E19last_interrupt_time+0x2>
     2d6:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <_ZZ10__vector_5E19last_interrupt_time+0x3>
     2da:	a7 01       	movw	r20, r14
     2dc:	96 01       	movw	r18, r12
     2de:	28 1b       	sub	r18, r24
     2e0:	39 0b       	sbc	r19, r25
     2e2:	4a 0b       	sbc	r20, r26
     2e4:	5b 0b       	sbc	r21, r27
     2e6:	29 3c       	cpi	r18, 0xC9	; 201
     2e8:	31 05       	cpc	r19, r1
     2ea:	41 05       	cpc	r20, r1
     2ec:	51 05       	cpc	r21, r1
     2ee:	f0 f0       	brcs	.+60     	; 0x32c <__vector_5+0x96>
	{
		if(r<n)
     2f0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <r>
     2f4:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <r+0x1>
     2f8:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <n>
     2fc:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <n+0x1>
     300:	82 17       	cp	r24, r18
     302:	93 07       	cpc	r25, r19
     304:	34 f4       	brge	.+12     	; 0x312 <__vector_5+0x7c>
		r++;
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <r+0x1>
     30c:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <r>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__vector_5+0x84>
		else r=0;
     312:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <r+0x1>
     316:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <r>
		Serial.print(r);
     31a:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <r>
     31e:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <r+0x1>
     322:	4a e0       	ldi	r20, 0x0A	; 10
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	8c ec       	ldi	r24, 0xCC	; 204
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	c7 d5       	rcall	.+2958   	; 0xeba <_ZN5Print5printEii>
	}
	last_interrupt_time = interrupt_time;
     32c:	c0 92 64 02 	sts	0x0264, r12	; 0x800264 <_ZZ10__vector_5E19last_interrupt_time>
     330:	d0 92 65 02 	sts	0x0265, r13	; 0x800265 <_ZZ10__vector_5E19last_interrupt_time+0x1>
     334:	e0 92 66 02 	sts	0x0266, r14	; 0x800266 <_ZZ10__vector_5E19last_interrupt_time+0x2>
     338:	f0 92 67 02 	sts	0x0267, r15	; 0x800267 <_ZZ10__vector_5E19last_interrupt_time+0x3>
}
     33c:	ff 91       	pop	r31
     33e:	ef 91       	pop	r30
     340:	bf 91       	pop	r27
     342:	af 91       	pop	r26
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	7f 91       	pop	r23
     34a:	6f 91       	pop	r22
     34c:	5f 91       	pop	r21
     34e:	4f 91       	pop	r20
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	0f 90       	pop	r0
     35e:	0b be       	out	0x3b, r0	; 59
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <__vector_6>:
ISR(INT5_vect)
{
     36a:	1f 92       	push	r1
     36c:	0f 92       	push	r0
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	0b b6       	in	r0, 0x3b	; 59
     376:	0f 92       	push	r0
     378:	cf 92       	push	r12
     37a:	df 92       	push	r13
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	2f 93       	push	r18
     382:	3f 93       	push	r19
     384:	4f 93       	push	r20
     386:	5f 93       	push	r21
     388:	6f 93       	push	r22
     38a:	7f 93       	push	r23
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
     390:	af 93       	push	r26
     392:	bf 93       	push	r27
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
	static unsigned long last_interrupt_time = 0;
	unsigned long interrupt_time = millis();
     398:	f0 d5       	rcall	.+3040   	; 0xf7a <millis>
     39a:	6b 01       	movw	r12, r22
     39c:	7c 01       	movw	r14, r24
	
	if (interrupt_time - last_interrupt_time > 200)
     39e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     3a2:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__data_end+0x1>
     3a6:	a0 91 62 02 	lds	r26, 0x0262	; 0x800262 <__data_end+0x2>
     3aa:	b0 91 63 02 	lds	r27, 0x0263	; 0x800263 <__data_end+0x3>
     3ae:	a7 01       	movw	r20, r14
     3b0:	96 01       	movw	r18, r12
     3b2:	28 1b       	sub	r18, r24
     3b4:	39 0b       	sbc	r19, r25
     3b6:	4a 0b       	sbc	r20, r26
     3b8:	5b 0b       	sbc	r21, r27
     3ba:	29 3c       	cpi	r18, 0xC9	; 201
     3bc:	31 05       	cpc	r19, r1
     3be:	41 05       	cpc	r20, r1
     3c0:	51 05       	cpc	r21, r1
     3c2:	d0 f0       	brcs	.+52     	; 0x3f8 <__vector_6+0x8e>
	{
		if(r>0)
     3c4:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <r>
     3c8:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <r+0x1>
     3cc:	18 16       	cp	r1, r24
     3ce:	19 06       	cpc	r1, r25
     3d0:	14 f4       	brge	.+4      	; 0x3d6 <__vector_6+0x6c>
		r--;
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <__vector_6+0x74>
		else r=n;
     3d6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <n>
     3da:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <n+0x1>
     3de:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <r+0x1>
     3e2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <r>
		Serial.print(r);
     3e6:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <r>
     3ea:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <r+0x1>
     3ee:	4a e0       	ldi	r20, 0x0A	; 10
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	8c ec       	ldi	r24, 0xCC	; 204
     3f4:	97 e0       	ldi	r25, 0x07	; 7
     3f6:	61 d5       	rcall	.+2754   	; 0xeba <_ZN5Print5printEii>
	}
	last_interrupt_time = interrupt_time;
     3f8:	c0 92 60 02 	sts	0x0260, r12	; 0x800260 <__data_end>
     3fc:	d0 92 61 02 	sts	0x0261, r13	; 0x800261 <__data_end+0x1>
     400:	e0 92 62 02 	sts	0x0262, r14	; 0x800262 <__data_end+0x2>
     404:	f0 92 63 02 	sts	0x0263, r15	; 0x800263 <__data_end+0x3>
}
     408:	ff 91       	pop	r31
     40a:	ef 91       	pop	r30
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	0f 90       	pop	r0
     42a:	0b be       	out	0x3b, r0	; 59
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <_Z9calibratev>:

void calibrate()
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	60 97       	sbiw	r28, 0x10	; 16
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
	//Make motors move to blocks
	myStepperY.setMaxSpeed(100);
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	68 ec       	ldi	r22, 0xC8	; 200
     450:	72 e4       	ldi	r23, 0x42	; 66
     452:	84 e4       	ldi	r24, 0x44	; 68
     454:	97 e0       	ldi	r25, 0x07	; 7
     456:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN12AccelStepper11setMaxSpeedEf>
	myStepperX.setMaxSpeed(100);
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	68 ec       	ldi	r22, 0xC8	; 200
     460:	72 e4       	ldi	r23, 0x42	; 66
     462:	88 e8       	ldi	r24, 0x88	; 136
     464:	97 e0       	ldi	r25, 0x07	; 7
     466:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_ZN12AccelStepper11setMaxSpeedEf>
	steppers.addStepper(myStepperY);
     46a:	64 e4       	ldi	r22, 0x44	; 68
     46c:	77 e0       	ldi	r23, 0x07	; 7
     46e:	8b e6       	ldi	r24, 0x6B	; 107
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN12MultiStepper10addStepperER12AccelStepper>
	steppers.addStepper(myStepperX);
     476:	68 e8       	ldi	r22, 0x88	; 136
     478:	77 e0       	ldi	r23, 0x07	; 7
     47a:	8b e6       	ldi	r24, 0x6B	; 107
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN12MultiStepper10addStepperER12AccelStepper>
	long positions[2];
	long positions1[2];
	positions[0] = -360;
     482:	88 e9       	ldi	r24, 0x98	; 152
     484:	9e ef       	ldi	r25, 0xFE	; 254
     486:	af ef       	ldi	r26, 0xFF	; 255
     488:	bf ef       	ldi	r27, 0xFF	; 255
     48a:	89 87       	std	Y+9, r24	; 0x09
     48c:	9a 87       	std	Y+10, r25	; 0x0a
     48e:	ab 87       	std	Y+11, r26	; 0x0b
     490:	bc 87       	std	Y+12, r27	; 0x0c
	positions[1] = 360;
     492:	88 e6       	ldi	r24, 0x68	; 104
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	8d 87       	std	Y+13, r24	; 0x0d
     49c:	9e 87       	std	Y+14, r25	; 0x0e
     49e:	af 87       	std	Y+15, r26	; 0x0f
     4a0:	b8 8b       	std	Y+16, r27	; 0x10
	steppers.moveTo(positions);
     4a2:	be 01       	movw	r22, r28
     4a4:	67 5f       	subi	r22, 0xF7	; 247
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	8b e6       	ldi	r24, 0x6B	; 107
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_ZN12MultiStepper6moveToEPl>
	steppers.runSpeedToPosition();
     4b0:	8b e6       	ldi	r24, 0x6B	; 107
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN12MultiStepper18runSpeedToPositionEv>
	
	delay(100);
     4b8:	64 e6       	ldi	r22, 0x64	; 100
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	8d d5       	rcall	.+2842   	; 0xfdc <delay>
	myStepperY.setCurrentPosition(0);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	ba 01       	movw	r22, r20
     4c8:	84 e4       	ldi	r24, 0x44	; 68
     4ca:	97 e0       	ldi	r25, 0x07	; 7
     4cc:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12AccelStepper18setCurrentPositionEl>
	myStepperX.setCurrentPosition(0);
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	ba 01       	movw	r22, r20
     4d6:	88 e8       	ldi	r24, 0x88	; 136
     4d8:	97 e0       	ldi	r25, 0x07	; 7
     4da:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12AccelStepper18setCurrentPositionEl>
    //turn motors until laser point is visible
	positions1[0] = 45;
     4de:	8d e2       	ldi	r24, 0x2D	; 45
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a0 e0       	ldi	r26, 0x00	; 0
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	9a 83       	std	Y+2, r25	; 0x02
     4ea:	ab 83       	std	Y+3, r26	; 0x03
     4ec:	bc 83       	std	Y+4, r27	; 0x04
	positions1[1] = -45;
     4ee:	83 ed       	ldi	r24, 0xD3	; 211
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	af ef       	ldi	r26, 0xFF	; 255
     4f4:	bf ef       	ldi	r27, 0xFF	; 255
     4f6:	8d 83       	std	Y+5, r24	; 0x05
     4f8:	9e 83       	std	Y+6, r25	; 0x06
     4fa:	af 83       	std	Y+7, r26	; 0x07
     4fc:	b8 87       	std	Y+8, r27	; 0x08
	steppers.moveTo(positions1);
     4fe:	be 01       	movw	r22, r28
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	8b e6       	ldi	r24, 0x6B	; 107
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_ZN12MultiStepper6moveToEPl>
	steppers.runSpeedToPosition();
     50c:	8b e6       	ldi	r24, 0x6B	; 107
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN12MultiStepper18runSpeedToPositionEv>
	delay(100);
     514:	64 e6       	ldi	r22, 0x64	; 100
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	5f d5       	rcall	.+2750   	; 0xfdc <delay>
	
	myStepperY.setCurrentPosition(0);
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	ba 01       	movw	r22, r20
     524:	84 e4       	ldi	r24, 0x44	; 68
     526:	97 e0       	ldi	r25, 0x07	; 7
     528:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12AccelStepper18setCurrentPositionEl>
	myStepperX.setCurrentPosition(0);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	ba 01       	movw	r22, r20
     532:	88 e8       	ldi	r24, 0x88	; 136
     534:	97 e0       	ldi	r25, 0x07	; 7
     536:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN12AccelStepper18setCurrentPositionEl>

	Serial.println("DONE!");
     53a:	66 e0       	ldi	r22, 0x06	; 6
     53c:	72 e0       	ldi	r23, 0x02	; 2
     53e:	8c ec       	ldi	r24, 0xCC	; 204
     540:	97 e0       	ldi	r25, 0x07	; 7
     542:	1e d4       	rcall	.+2108   	; 0xd80 <_ZN5Print7printlnEPKc>
	//turn motors at high speed
	myStepperX.setSpeed(9999);
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	5c e3       	ldi	r21, 0x3C	; 60
     548:	6c e1       	ldi	r22, 0x1C	; 28
     54a:	76 e4       	ldi	r23, 0x46	; 70
     54c:	88 e8       	ldi	r24, 0x88	; 136
     54e:	97 e0       	ldi	r25, 0x07	; 7
     550:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN12AccelStepper8setSpeedEf>
	myStepperY.setSpeed(9999);
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	5c e3       	ldi	r21, 0x3C	; 60
     558:	6c e1       	ldi	r22, 0x1C	; 28
     55a:	76 e4       	ldi	r23, 0x46	; 70
     55c:	84 e4       	ldi	r24, 0x44	; 68
     55e:	97 e0       	ldi	r25, 0x07	; 7
     560:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN12AccelStepper8setSpeedEf>
	
	state=1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <state+0x1>
     56c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <state>
}
     570:	60 96       	adiw	r28, 0x10	; 16
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <_Z7afisarev>:
			
		}	
	}
}
void afisare()
{
     582:	cf 93       	push	r28
	Serial.println("Matrix Full");
     584:	6c e0       	ldi	r22, 0x0C	; 12
     586:	72 e0       	ldi	r23, 0x02	; 2
     588:	8c ec       	ldi	r24, 0xCC	; 204
     58a:	97 e0       	ldi	r25, 0x07	; 7
     58c:	f9 d3       	rcall	.+2034   	; 0xd80 <_ZN5Print7printlnEPKc>
	for(row=0;row<n;row++){
     58e:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <row+0x1>
     592:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <row>
		for(col=0;col<6;col++){
			Serial.print(TabelCoordonate[row][col]);
     596:	c6 e0       	ldi	r28, 0x06	; 6
	}
}
void afisare()
{
	Serial.println("Matrix Full");
	for(row=0;row<n;row++){
     598:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <row>
     59c:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <row+0x1>
     5a0:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <n>
     5a4:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <n+0x1>
     5a8:	28 17       	cp	r18, r24
     5aa:	39 07       	cpc	r19, r25
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <_Z7afisarev+0x2e>
     5ae:	3d c0       	rjmp	.+122    	; 0x62a <_Z7afisarev+0xa8>
		for(col=0;col<6;col++){
     5b0:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <col+0x1>
     5b4:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <col>
     5b8:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <col>
     5bc:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <col+0x1>
     5c0:	86 30       	cpi	r24, 0x06	; 6
     5c2:	91 05       	cpc	r25, r1
     5c4:	2c f5       	brge	.+74     	; 0x610 <_Z7afisarev+0x8e>
			Serial.print(TabelCoordonate[row][col]);
     5c6:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <row>
     5ca:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <row+0x1>
     5ce:	c2 9f       	mul	r28, r18
     5d0:	f0 01       	movw	r30, r0
     5d2:	c3 9f       	mul	r28, r19
     5d4:	f0 0d       	add	r31, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	ec 56       	subi	r30, 0x6C	; 108
     5e2:	fd 4f       	sbci	r31, 0xFD	; 253
     5e4:	60 81       	ld	r22, Z
     5e6:	71 81       	ldd	r23, Z+1	; 0x01
     5e8:	4a e0       	ldi	r20, 0x0A	; 10
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	8c ec       	ldi	r24, 0xCC	; 204
     5ee:	97 e0       	ldi	r25, 0x07	; 7
     5f0:	64 d4       	rcall	.+2248   	; 0xeba <_ZN5Print5printEii>
			Serial.print(" ");
     5f2:	68 e1       	ldi	r22, 0x18	; 24
     5f4:	72 e0       	ldi	r23, 0x02	; 2
     5f6:	8c ec       	ldi	r24, 0xCC	; 204
     5f8:	97 e0       	ldi	r25, 0x07	; 7
     5fa:	b7 d3       	rcall	.+1902   	; 0xd6a <_ZN5Print5printEPKc>
}
void afisare()
{
	Serial.println("Matrix Full");
	for(row=0;row<n;row++){
		for(col=0;col<6;col++){
     5fc:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <col>
     600:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <col+0x1>
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <col+0x1>
     60a:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <col>
			Serial.print(TabelCoordonate[row][col]);
			Serial.print(" ");
		}
		Serial.println();
     60e:	d4 cf       	rjmp	.-88     	; 0x5b8 <_Z7afisarev+0x36>
     610:	8c ec       	ldi	r24, 0xCC	; 204
     612:	97 e0       	ldi	r25, 0x07	; 7
     614:	b2 d3       	rcall	.+1892   	; 0xd7a <_ZN5Print7printlnEv>
	}
}
void afisare()
{
	Serial.println("Matrix Full");
	for(row=0;row<n;row++){
     616:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <row>
     61a:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <row+0x1>
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <row+0x1>
     624:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <row>
     628:	b7 cf       	rjmp	.-146    	; 0x598 <_Z7afisarev+0x16>
			Serial.print(TabelCoordonate[row][col]);
			Serial.print(" ");
		}
		Serial.println();
	}
	state=3;
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <state+0x1>
     632:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <state>
}
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <_Z4workv>:
void work()
{
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	28 97       	sbiw	r28, 0x08	; 8
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
	long pos[2];
	for(int k=0;k<=n;k=k+2)
     654:	00 e0       	ldi	r16, 0x00	; 0
     656:	10 e0       	ldi	r17, 0x00	; 0
	{
		pos[0] = TabelCoordonate[r][k];
     658:	26 e0       	ldi	r18, 0x06	; 6
     65a:	f2 2e       	mov	r15, r18
	state=3;
}
void work()
{
	long pos[2];
	for(int k=0;k<=n;k=k+2)
     65c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <n>
     660:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <n+0x1>
     664:	80 17       	cp	r24, r16
     666:	91 07       	cpc	r25, r17
     668:	0c f4       	brge	.+2      	; 0x66c <_Z4workv+0x32>
     66a:	4a c0       	rjmp	.+148    	; 0x700 <_Z4workv+0xc6>
	{
		pos[0] = TabelCoordonate[r][k];
     66c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <r>
     670:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <r+0x1>
     674:	f8 9e       	mul	r15, r24
     676:	f0 01       	movw	r30, r0
     678:	f9 9e       	mul	r15, r25
     67a:	f0 0d       	add	r31, r0
     67c:	11 24       	eor	r1, r1
     67e:	df 01       	movw	r26, r30
     680:	a0 0f       	add	r26, r16
     682:	b1 1f       	adc	r27, r17
     684:	aa 0f       	add	r26, r26
     686:	bb 1f       	adc	r27, r27
     688:	ac 56       	subi	r26, 0x6C	; 108
     68a:	bd 4f       	sbci	r27, 0xFD	; 253
     68c:	8d 91       	ld	r24, X+
     68e:	9c 91       	ld	r25, X
     690:	09 2e       	mov	r0, r25
     692:	00 0c       	add	r0, r0
     694:	aa 0b       	sbc	r26, r26
     696:	bb 0b       	sbc	r27, r27
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	9a 83       	std	Y+2, r25	; 0x02
     69c:	ab 83       	std	Y+3, r26	; 0x03
     69e:	bc 83       	std	Y+4, r27	; 0x04
		pos[1] = TabelCoordonate[r][k+1];
     6a0:	c8 01       	movw	r24, r16
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	e8 0f       	add	r30, r24
     6a6:	f9 1f       	adc	r31, r25
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ec 56       	subi	r30, 0x6C	; 108
     6ae:	fd 4f       	sbci	r31, 0xFD	; 253
     6b0:	80 81       	ld	r24, Z
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	09 2e       	mov	r0, r25
     6b6:	00 0c       	add	r0, r0
     6b8:	aa 0b       	sbc	r26, r26
     6ba:	bb 0b       	sbc	r27, r27
     6bc:	8d 83       	std	Y+5, r24	; 0x05
     6be:	9e 83       	std	Y+6, r25	; 0x06
     6c0:	af 83       	std	Y+7, r26	; 0x07
     6c2:	b8 87       	std	Y+8, r27	; 0x08
		steppers.moveTo(pos);
     6c4:	be 01       	movw	r22, r28
     6c6:	6f 5f       	subi	r22, 0xFF	; 255
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	8b e6       	ldi	r24, 0x6B	; 107
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_ZN12MultiStepper6moveToEPl>
		steppers.runSpeedToPosition(); // Blocks until all are in position
     6d2:	8b e6       	ldi	r24, 0x6B	; 107
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN12MultiStepper18runSpeedToPositionEv>
		digitalWrite(LED_BUILTIN, HIGH);
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	8d e0       	ldi	r24, 0x0D	; 13
     6de:	b7 d5       	rcall	.+2926   	; 0x124e <digitalWrite>
		delay(50);
     6e0:	62 e3       	ldi	r22, 0x32	; 50
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	79 d4       	rcall	.+2290   	; 0xfdc <delay>
		digitalWrite(LED_BUILTIN, LOW);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	8d e0       	ldi	r24, 0x0D	; 13
     6ee:	af d5       	rcall	.+2910   	; 0x124e <digitalWrite>
		delay(50);
     6f0:	62 e3       	ldi	r22, 0x32	; 50
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	71 d4       	rcall	.+2274   	; 0xfdc <delay>
	state=3;
}
void work()
{
	long pos[2];
	for(int k=0;k<=n;k=k+2)
     6fa:	0e 5f       	subi	r16, 0xFE	; 254
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	ae cf       	rjmp	.-164    	; 0x65c <_Z4workv+0x22>
		digitalWrite(LED_BUILTIN, HIGH);
		delay(50);
		digitalWrite(LED_BUILTIN, LOW);
		delay(50);
	}
}
     700:	28 96       	adiw	r28, 0x08	; 8
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	08 95       	ret

00000718 <_GLOBAL__sub_I_myStepperX>:
		case 0: calibrate(); break;
		case 1: citire(); break;
		case 2: afisare(); break;
		case 3: work(); break;
	}
}
     718:	cf 92       	push	r12
     71a:	ef 92       	push	r14
     71c:	0f 93       	push	r16

#include <AccelStepper.h>
#include <MultiStepper.h>
#include <SoftwareSerial.h>

AccelStepper myStepperX(AccelStepper::FULL4WIRE, 8,9,10,11);
     71e:	cc 24       	eor	r12, r12
     720:	c3 94       	inc	r12
     722:	8b e0       	ldi	r24, 0x0B	; 11
     724:	e8 2e       	mov	r14, r24
     726:	0a e0       	ldi	r16, 0x0A	; 10
     728:	29 e0       	ldi	r18, 0x09	; 9
     72a:	48 e0       	ldi	r20, 0x08	; 8
     72c:	64 e0       	ldi	r22, 0x04	; 4
     72e:	88 e8       	ldi	r24, 0x88	; 136
     730:	97 e0       	ldi	r25, 0x07	; 7
     732:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN12AccelStepperC1Ehhhhhb>
AccelStepper myStepperY(AccelStepper::FULL4WIRE,   4,5,6,7);
     736:	97 e0       	ldi	r25, 0x07	; 7
     738:	e9 2e       	mov	r14, r25
     73a:	06 e0       	ldi	r16, 0x06	; 6
     73c:	25 e0       	ldi	r18, 0x05	; 5
     73e:	44 e0       	ldi	r20, 0x04	; 4
     740:	64 e0       	ldi	r22, 0x04	; 4
     742:	84 e4       	ldi	r24, 0x44	; 68
     744:	97 e0       	ldi	r25, 0x07	; 7
     746:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN12AccelStepperC1Ehhhhhb>
const int buttonPin = 2;
int buttonState = 0;
int r=0;
int integerValue=0;  // Max value is 65535
char incomingByte;
String inString = "";
     74a:	68 e3       	ldi	r22, 0x38	; 56
     74c:	72 e0       	ldi	r23, 0x02	; 2
     74e:	80 e8       	ldi	r24, 0x80	; 128
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	16 d6       	rcall	.+3116   	; 0x1380 <_ZN6StringC1EPKc>
MultiStepper steppers;
     754:	8b e6       	ldi	r24, 0x6B	; 107
     756:	92 e0       	ldi	r25, 0x02	; 2
		case 0: calibrate(); break;
		case 1: citire(); break;
		case 2: afisare(); break;
		case 3: work(); break;
	}
}
     758:	0f 91       	pop	r16
     75a:	ef 90       	pop	r14
     75c:	cf 90       	pop	r12
int buttonState = 0;
int r=0;
int integerValue=0;  // Max value is 65535
char incomingByte;
String inString = "";
MultiStepper steppers;
     75e:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <_ZN12MultiStepperC1Ev>

00000762 <_GLOBAL__sub_D_myStepperX>:
const int buttonPin = 2;
int buttonState = 0;
int r=0;
int integerValue=0;  // Max value is 65535
char incomingByte;
String inString = "";
     762:	80 e8       	ldi	r24, 0x80	; 128
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	a1 c5       	rjmp	.+2882   	; 0x12aa <_ZN6StringD1Ev>

00000768 <_Z6citirev>:
	myStepperY.setSpeed(9999);
	
	state=1;
}
void citire()
{
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
				 nRead=true;
				 Serial.print("n=");
				 Serial.print(n);
			}
			else{
			TabelCoordonate[i][j]=integerValue;
     774:	16 e0       	ldi	r17, 0x06	; 6
			{
				j=0;
				i++;
			}
			if(i==n)
			state=2;
     776:	c2 e0       	ldi	r28, 0x02	; 2
     778:	d0 e0       	ldi	r29, 0x00	; 0
			Serial.println(integerValue);
			inString = "";
			if(!nRead)
			{
				 n=integerValue;
				 nRead=true;
     77a:	01 e0       	ldi	r16, 0x01	; 1
	
	state=1;
}
void citire()
{
	while (Serial.available() > 0) {
     77c:	8c ec       	ldi	r24, 0xCC	; 204
     77e:	97 e0       	ldi	r25, 0x07	; 7
     780:	98 d0       	rcall	.+304    	; 0x8b2 <_ZN14HardwareSerial9availableEv>
     782:	18 16       	cp	r1, r24
     784:	19 06       	cpc	r1, r25
     786:	0c f0       	brlt	.+2      	; 0x78a <_Z6citirev+0x22>
     788:	78 c0       	rjmp	.+240    	; 0x87a <_Z6citirev+0x112>
		int inChar = Serial.read();
     78a:	8c ec       	ldi	r24, 0xCC	; 204
     78c:	97 e0       	ldi	r25, 0x07	; 7
     78e:	ab d0       	rcall	.+342    	; 0x8e6 <_ZN14HardwareSerial4readEv>
     790:	7c 01       	movw	r14, r24

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     792:	68 2f       	mov	r22, r24
     794:	80 e8       	ldi	r24, 0x80	; 128
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	49 d6       	rcall	.+3218   	; 0x142c <_ZN6String6concatEc>
		inString += (char)inChar;
		if (inChar == '\n') {
     79a:	8a e0       	ldi	r24, 0x0A	; 10
     79c:	e8 16       	cp	r14, r24
     79e:	f1 04       	cpc	r15, r1
     7a0:	69 f7       	brne	.-38     	; 0x77c <_Z6citirev+0x14>
			Serial.print("Value:");
     7a2:	6a e1       	ldi	r22, 0x1A	; 26
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	8c ec       	ldi	r24, 0xCC	; 204
     7a8:	97 e0       	ldi	r25, 0x07	; 7
			integerValue = inString.toInt();
     7aa:	df d2       	rcall	.+1470   	; 0xd6a <_ZN5Print5printEPKc>
     7ac:	80 e8       	ldi	r24, 0x80	; 128
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	50 d6       	rcall	.+3232   	; 0x1452 <_ZNK6String5toIntEv>
     7b2:	70 93 87 02 	sts	0x0287, r23	; 0x800287 <integerValue+0x1>
     7b6:	60 93 86 02 	sts	0x0286, r22	; 0x800286 <integerValue>
			Serial.println(integerValue);
     7ba:	4a e0       	ldi	r20, 0x0A	; 10
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	8c ec       	ldi	r24, 0xCC	; 204
     7c0:	97 e0       	ldi	r25, 0x07	; 7
			inString = "";
     7c2:	81 d3       	rcall	.+1794   	; 0xec6 <_ZN5Print7printlnEii>
     7c4:	68 e3       	ldi	r22, 0x38	; 56
     7c6:	72 e0       	ldi	r23, 0x02	; 2
     7c8:	80 e8       	ldi	r24, 0x80	; 128
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	ed d5       	rcall	.+3034   	; 0x13a8 <_ZN6StringaSEPKc>
			if(!nRead)
     7ce:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <nRead>
     7d2:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <integerValue>
     7d6:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <integerValue+0x1>
     7da:	81 11       	cpse	r24, r1
     7dc:	15 c0       	rjmp	.+42     	; 0x808 <_Z6citirev+0xa0>
			{
				 n=integerValue;
     7de:	50 93 6a 02 	sts	0x026A, r21	; 0x80026a <n+0x1>
     7e2:	40 93 69 02 	sts	0x0269, r20	; 0x800269 <n>
				 nRead=true;
     7e6:	00 93 68 02 	sts	0x0268, r16	; 0x800268 <nRead>
				 Serial.print("n=");
     7ea:	61 e2       	ldi	r22, 0x21	; 33
     7ec:	72 e0       	ldi	r23, 0x02	; 2
     7ee:	8c ec       	ldi	r24, 0xCC	; 204
     7f0:	97 e0       	ldi	r25, 0x07	; 7
     7f2:	bb d2       	rcall	.+1398   	; 0xd6a <_ZN5Print5printEPKc>
				 Serial.print(n);
     7f4:	60 91 69 02 	lds	r22, 0x0269	; 0x800269 <n>
     7f8:	70 91 6a 02 	lds	r23, 0x026A	; 0x80026a <n+0x1>
     7fc:	4a e0       	ldi	r20, 0x0A	; 10
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	8c ec       	ldi	r24, 0xCC	; 204
     802:	97 e0       	ldi	r25, 0x07	; 7
     804:	5a d3       	rcall	.+1716   	; 0xeba <_ZN5Print5printEii>
     806:	ba cf       	rjmp	.-140    	; 0x77c <_Z6citirev+0x14>
			}
			else{
			TabelCoordonate[i][j]=integerValue;
     808:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <i>
     80c:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <i+0x1>
     810:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <j>
     814:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <j+0x1>
     818:	12 9f       	mul	r17, r18
     81a:	f0 01       	movw	r30, r0
     81c:	13 9f       	mul	r17, r19
     81e:	f0 0d       	add	r31, r0
     820:	11 24       	eor	r1, r1
     822:	e8 0f       	add	r30, r24
     824:	f9 1f       	adc	r31, r25
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	ec 56       	subi	r30, 0x6C	; 108
     82c:	fd 4f       	sbci	r31, 0xFD	; 253
     82e:	51 83       	std	Z+1, r21	; 0x01
     830:	40 83       	st	Z, r20
			j++;
     832:	01 96       	adiw	r24, 0x01	; 1
			if(j==6)
     834:	86 30       	cpi	r24, 0x06	; 6
     836:	91 05       	cpc	r25, r1
     838:	29 f0       	breq	.+10     	; 0x844 <_Z6citirev+0xdc>
				 Serial.print("n=");
				 Serial.print(n);
			}
			else{
			TabelCoordonate[i][j]=integerValue;
			j++;
     83a:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <j+0x1>
     83e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <j>
     842:	0a c0       	rjmp	.+20     	; 0x858 <_Z6citirev+0xf0>
			if(j==6)
			{
				j=0;
     844:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <j+0x1>
     848:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <j>
				i++;
     84c:	2f 5f       	subi	r18, 0xFF	; 255
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	30 93 8f 02 	sts	0x028F, r19	; 0x80028f <i+0x1>
     854:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <i>
			}
			if(i==n)
     858:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <i>
     85c:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <i+0x1>
     860:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <n>
     864:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <n+0x1>
     868:	28 17       	cp	r18, r24
     86a:	39 07       	cpc	r19, r25
     86c:	09 f0       	breq	.+2      	; 0x870 <_Z6citirev+0x108>
     86e:	86 cf       	rjmp	.-244    	; 0x77c <_Z6citirev+0x14>
			state=2;
     870:	d0 93 8b 02 	sts	0x028B, r29	; 0x80028b <state+0x1>
     874:	c0 93 8a 02 	sts	0x028A, r28	; 0x80028a <state>
     878:	81 cf       	rjmp	.-254    	; 0x77c <_Z6citirev+0x14>
			}
			
		}	
	}
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	08 95       	ret

00000888 <loop>:
	}
}

void loop()
{
	switch(state)
     888:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <state>
     88c:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <state+0x1>
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	91 05       	cpc	r25, r1
     894:	59 f0       	breq	.+22     	; 0x8ac <loop+0x24>
     896:	1c f4       	brge	.+6      	; 0x89e <loop+0x16>
     898:	89 2b       	or	r24, r25
     89a:	39 f0       	breq	.+14     	; 0x8aa <loop+0x22>
     89c:	08 95       	ret
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	91 05       	cpc	r25, r1
     8a2:	29 f0       	breq	.+10     	; 0x8ae <loop+0x26>
     8a4:	03 97       	sbiw	r24, 0x03	; 3
     8a6:	21 f0       	breq	.+8      	; 0x8b0 <loop+0x28>
     8a8:	08 95       	ret
	{
		case 0: calibrate(); break;
     8aa:	c5 cd       	rjmp	.-1142   	; 0x436 <_Z9calibratev>
		case 1: citire(); break;
     8ac:	5d cf       	rjmp	.-326    	; 0x768 <_Z6citirev>
		case 2: afisare(); break;
     8ae:	69 ce       	rjmp	.-814    	; 0x582 <_Z7afisarev>
     8b0:	c4 ce       	rjmp	.-632    	; 0x63a <_Z4workv>

000008b2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8b2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8b4:	91 8d       	ldd	r25, Z+25	; 0x19
     8b6:	22 8d       	ldd	r18, Z+26	; 0x1a
     8b8:	89 2f       	mov	r24, r25
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	80 5c       	subi	r24, 0xC0	; 192
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	82 1b       	sub	r24, r18
     8c2:	91 09       	sbc	r25, r1
}
     8c4:	8f 73       	andi	r24, 0x3F	; 63
     8c6:	99 27       	eor	r25, r25
     8c8:	08 95       	ret

000008ca <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8ca:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8cc:	91 8d       	ldd	r25, Z+25	; 0x19
     8ce:	82 8d       	ldd	r24, Z+26	; 0x1a
     8d0:	98 17       	cp	r25, r24
     8d2:	31 f0       	breq	.+12     	; 0x8e0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8d4:	82 8d       	ldd	r24, Z+26	; 0x1a
     8d6:	e8 0f       	add	r30, r24
     8d8:	f1 1d       	adc	r31, r1
     8da:	85 8d       	ldd	r24, Z+29	; 0x1d
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     8e4:	08 95       	ret

000008e6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     8e6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     8e8:	91 8d       	ldd	r25, Z+25	; 0x19
     8ea:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ec:	98 17       	cp	r25, r24
     8ee:	61 f0       	breq	.+24     	; 0x908 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     8f0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8f2:	df 01       	movw	r26, r30
     8f4:	a8 0f       	add	r26, r24
     8f6:	b1 1d       	adc	r27, r1
     8f8:	5d 96       	adiw	r26, 0x1d	; 29
     8fa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     8fc:	92 8d       	ldd	r25, Z+26	; 0x1a
     8fe:	9f 5f       	subi	r25, 0xFF	; 255
     900:	9f 73       	andi	r25, 0x3F	; 63
     902:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     90c:	08 95       	ret

0000090e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     90e:	fc 01       	movw	r30, r24
     910:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     912:	44 8d       	ldd	r20, Z+28	; 0x1c
     914:	25 2f       	mov	r18, r21
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	84 2f       	mov	r24, r20
     91a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     91c:	82 1b       	sub	r24, r18
     91e:	93 0b       	sbc	r25, r19
     920:	54 17       	cp	r21, r20
     922:	10 f0       	brcs	.+4      	; 0x928 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     924:	cf 96       	adiw	r24, 0x3f	; 63
     926:	08 95       	ret
  return tail - head - 1;
     928:	01 97       	sbiw	r24, 0x01	; 1
}
     92a:	08 95       	ret

0000092c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     92c:	8e e1       	ldi	r24, 0x1E	; 30
     92e:	96 e0       	ldi	r25, 0x06	; 6
     930:	89 2b       	or	r24, r25
     932:	39 f0       	breq	.+14     	; 0x942 <_Z14serialEventRunv+0x16>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	89 2b       	or	r24, r25
     93a:	19 f0       	breq	.+6      	; 0x942 <_Z14serialEventRunv+0x16>
     93c:	7f d1       	rcall	.+766    	; 0xc3c <_Z17Serial0_availablev>
     93e:	81 11       	cpse	r24, r1
     940:	25 c0       	rjmp	.+74     	; 0x98c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	89 2b       	or	r24, r25
     948:	41 f0       	breq	.+16     	; 0x95a <_Z14serialEventRunv+0x2e>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	89 2b       	or	r24, r25
     950:	21 f0       	breq	.+8      	; 0x95a <_Z14serialEventRunv+0x2e>
     952:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     956:	81 11       	cpse	r24, r1
     958:	1c c0       	rjmp	.+56     	; 0x992 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	89 2b       	or	r24, r25
     960:	41 f0       	breq	.+16     	; 0x972 <_Z14serialEventRunv+0x46>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	89 2b       	or	r24, r25
     968:	21 f0       	breq	.+8      	; 0x972 <_Z14serialEventRunv+0x46>
     96a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     96e:	81 11       	cpse	r24, r1
     970:	13 c0       	rjmp	.+38     	; 0x998 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	89 2b       	or	r24, r25
     978:	a1 f0       	breq	.+40     	; 0x9a2 <_Z14serialEventRunv+0x76>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	89 2b       	or	r24, r25
     980:	81 f0       	breq	.+32     	; 0x9a2 <_Z14serialEventRunv+0x76>
     982:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     986:	81 11       	cpse	r24, r1
     988:	0a c0       	rjmp	.+20     	; 0x99e <_Z14serialEventRunv+0x72>
     98a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     98c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     990:	d8 cf       	rjmp	.-80     	; 0x942 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     992:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     996:	e1 cf       	rjmp	.-62     	; 0x95a <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     998:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     99c:	ea cf       	rjmp	.-44     	; 0x972 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     99e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     9a2:	08 95       	ret

000009a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     9a4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     9a6:	84 8d       	ldd	r24, Z+28	; 0x1c
     9a8:	df 01       	movw	r26, r30
     9aa:	a8 0f       	add	r26, r24
     9ac:	b1 1d       	adc	r27, r1
     9ae:	a3 5a       	subi	r26, 0xA3	; 163
     9b0:	bf 4f       	sbci	r27, 0xFF	; 255
     9b2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     9b4:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	8f 73       	andi	r24, 0x3F	; 63
     9bc:	99 27       	eor	r25, r25
     9be:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9c0:	a6 89       	ldd	r26, Z+22	; 0x16
     9c2:	b7 89       	ldd	r27, Z+23	; 0x17
     9c4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     9c6:	a0 89       	ldd	r26, Z+16	; 0x10
     9c8:	b1 89       	ldd	r27, Z+17	; 0x11
     9ca:	8c 91       	ld	r24, X
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     9d0:	93 8d       	ldd	r25, Z+27	; 0x1b
     9d2:	84 8d       	ldd	r24, Z+28	; 0x1c
     9d4:	98 13       	cpse	r25, r24
     9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9d8:	02 88       	ldd	r0, Z+18	; 0x12
     9da:	f3 89       	ldd	r31, Z+19	; 0x13
     9dc:	e0 2d       	mov	r30, r0
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7d       	andi	r24, 0xDF	; 223
     9e2:	80 83       	st	Z, r24
     9e4:	08 95       	ret

000009e6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ec 01       	movw	r28, r24
  _written = true;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9fc:	98 13       	cpse	r25, r24
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <_ZN14HardwareSerial5writeEh+0x24>
     a00:	e8 89       	ldd	r30, Y+16	; 0x10
     a02:	f9 89       	ldd	r31, Y+17	; 0x11
     a04:	80 81       	ld	r24, Z
     a06:	85 fd       	sbrc	r24, 5
     a08:	23 c0       	rjmp	.+70     	; 0xa50 <_ZN14HardwareSerial5writeEh+0x6a>
     a0a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a0c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	0f 5f       	subi	r16, 0xFF	; 255
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	0f 73       	andi	r16, 0x3F	; 63
     a16:	11 27       	eor	r17, r17
     a18:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a1c:	e8 12       	cpse	r14, r24
     a1e:	0b c0       	rjmp	.+22     	; 0xa36 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	07 fc       	sbrc	r0, 7
     a24:	fa cf       	rjmp	.-12     	; 0xa1a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a26:	e8 89       	ldd	r30, Y+16	; 0x10
     a28:	f9 89       	ldd	r31, Y+17	; 0x11
     a2a:	80 81       	ld	r24, Z
     a2c:	85 ff       	sbrs	r24, 5
     a2e:	f5 cf       	rjmp	.-22     	; 0xa1a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a30:	ce 01       	movw	r24, r28
     a32:	b8 df       	rcall	.-144    	; 0x9a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a34:	f2 cf       	rjmp	.-28     	; 0xa1a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a38:	fe 01       	movw	r30, r28
     a3a:	e8 0f       	add	r30, r24
     a3c:	f1 1d       	adc	r31, r1
     a3e:	e3 5a       	subi	r30, 0xA3	; 163
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     a44:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     a46:	ea 89       	ldd	r30, Y+18	; 0x12
     a48:	fb 89       	ldd	r31, Y+19	; 0x13
     a4a:	80 81       	ld	r24, Z
     a4c:	80 62       	ori	r24, 0x20	; 32
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     a50:	ee 89       	ldd	r30, Y+22	; 0x16
     a52:	ff 89       	ldd	r31, Y+23	; 0x17
     a54:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     a56:	e8 89       	ldd	r30, Y+16	; 0x10
     a58:	f9 89       	ldd	r31, Y+17	; 0x11
     a5a:	80 81       	ld	r24, Z
     a5c:	80 64       	ori	r24, 0x40	; 64
     a5e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	08 95       	ret

00000a72 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a78:	88 8d       	ldd	r24, Y+24	; 0x18
     a7a:	88 23       	and	r24, r24
     a7c:	c1 f0       	breq	.+48     	; 0xaae <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a7e:	ea 89       	ldd	r30, Y+18	; 0x12
     a80:	fb 89       	ldd	r31, Y+19	; 0x13
     a82:	80 81       	ld	r24, Z
     a84:	85 fd       	sbrc	r24, 5
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <_ZN14HardwareSerial5flushEv+0x20>
     a88:	a8 89       	ldd	r26, Y+16	; 0x10
     a8a:	b9 89       	ldd	r27, Y+17	; 0x11
     a8c:	8c 91       	ld	r24, X
     a8e:	86 fd       	sbrc	r24, 6
     a90:	0e c0       	rjmp	.+28     	; 0xaae <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	07 fc       	sbrc	r0, 7
     a96:	f5 cf       	rjmp	.-22     	; 0xa82 <_ZN14HardwareSerial5flushEv+0x10>
     a98:	80 81       	ld	r24, Z
     a9a:	85 ff       	sbrs	r24, 5
     a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a9e:	a8 89       	ldd	r26, Y+16	; 0x10
     aa0:	b9 89       	ldd	r27, Y+17	; 0x11
     aa2:	8c 91       	ld	r24, X
     aa4:	85 ff       	sbrs	r24, 5
     aa6:	ed cf       	rjmp	.-38     	; 0xa82 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     aa8:	ce 01       	movw	r24, r28
     aaa:	7c df       	rcall	.-264    	; 0x9a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     aac:	e8 cf       	rjmp	.-48     	; 0xa7e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	6a 01       	movw	r12, r20
     ac6:	7b 01       	movw	r14, r22
     ac8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     aca:	e8 89       	ldd	r30, Y+16	; 0x10
     acc:	f9 89       	ldd	r31, Y+17	; 0x11
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ad2:	41 15       	cp	r20, r1
     ad4:	51 4e       	sbci	r21, 0xE1	; 225
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	b1 f0       	breq	.+44     	; 0xb08 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	79 e0       	ldi	r23, 0x09	; 9
     ae0:	8d e3       	ldi	r24, 0x3D	; 61
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	a7 01       	movw	r20, r14
     ae6:	96 01       	movw	r18, r12
     ae8:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	a1 09       	sbc	r26, r1
     af4:	b1 09       	sbc	r27, r1
     af6:	b6 95       	lsr	r27
     af8:	a7 95       	ror	r26
     afa:	97 95       	ror	r25
     afc:	87 95       	ror	r24
     afe:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b00:	21 15       	cp	r18, r1
     b02:	80 e1       	ldi	r24, 0x10	; 16
     b04:	38 07       	cpc	r19, r24
     b06:	a8 f0       	brcs	.+42     	; 0xb32 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     b08:	e8 89       	ldd	r30, Y+16	; 0x10
     b0a:	f9 89       	ldd	r31, Y+17	; 0x11
     b0c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b0e:	60 e8       	ldi	r22, 0x80	; 128
     b10:	74 e8       	ldi	r23, 0x84	; 132
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a7 01       	movw	r20, r14
     b18:	96 01       	movw	r18, r12
     b1a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
     b1e:	da 01       	movw	r26, r20
     b20:	c9 01       	movw	r24, r18
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	b6 95       	lsr	r27
     b2a:	a7 95       	ror	r26
     b2c:	97 95       	ror	r25
     b2e:	87 95       	ror	r24
     b30:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b32:	ec 85       	ldd	r30, Y+12	; 0x0c
     b34:	fd 85       	ldd	r31, Y+13	; 0x0d
     b36:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b38:	ee 85       	ldd	r30, Y+14	; 0x0e
     b3a:	ff 85       	ldd	r31, Y+15	; 0x0f
     b3c:	20 83       	st	Z, r18

  _written = false;
     b3e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b40:	ec 89       	ldd	r30, Y+20	; 0x14
     b42:	fd 89       	ldd	r31, Y+21	; 0x15
     b44:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b46:	ea 89       	ldd	r30, Y+18	; 0x12
     b48:	fb 89       	ldd	r31, Y+19	; 0x13
     b4a:	80 81       	ld	r24, Z
     b4c:	80 61       	ori	r24, 0x10	; 16
     b4e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b50:	ea 89       	ldd	r30, Y+18	; 0x12
     b52:	fb 89       	ldd	r31, Y+19	; 0x13
     b54:	80 81       	ld	r24, Z
     b56:	88 60       	ori	r24, 0x08	; 8
     b58:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b5a:	ea 89       	ldd	r30, Y+18	; 0x12
     b5c:	fb 89       	ldd	r31, Y+19	; 0x13
     b5e:	80 81       	ld	r24, Z
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b64:	ea 89       	ldd	r30, Y+18	; 0x12
     b66:	fb 89       	ldd	r31, Y+19	; 0x13
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7d       	andi	r24, 0xDF	; 223
     b6c:	80 83       	st	Z, r24
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	08 95       	ret

00000b7e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	0b b6       	in	r0, 0x3b	; 59
     b8a:	0f 92       	push	r0
     b8c:	2f 93       	push	r18
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b96:	e0 91 dc 07 	lds	r30, 0x07DC	; 0x8007dc <Serial+0x10>
     b9a:	f0 91 dd 07 	lds	r31, 0x07DD	; 0x8007dd <Serial+0x11>
     b9e:	80 81       	ld	r24, Z
     ba0:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <Serial+0x16>
     ba4:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <Serial+0x17>
     ba8:	82 fd       	sbrc	r24, 2
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     bac:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     bae:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <Serial+0x19>
     bb2:	8f 5f       	subi	r24, 0xFF	; 255
     bb4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     bb6:	20 91 e6 07 	lds	r18, 0x07E6	; 0x8007e6 <Serial+0x1a>
     bba:	82 17       	cp	r24, r18
     bbc:	51 f0       	breq	.+20     	; 0xbd2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     bbe:	e0 91 e5 07 	lds	r30, 0x07E5	; 0x8007e5 <Serial+0x19>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e4 53       	subi	r30, 0x34	; 52
     bc6:	f8 4f       	sbci	r31, 0xF8	; 248
     bc8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bca:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <Serial+0x19>
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bd0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0b be       	out	0x3b, r0	; 59
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	0b b6       	in	r0, 0x3b	; 59
     bf6:	0f 92       	push	r0
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c10:	8c ec       	ldi	r24, 0xCC	; 204
     c12:	97 e0       	ldi	r25, 0x07	; 7
     c14:	c7 de       	rcall	.-626    	; 0x9a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0b be       	out	0x3b, r0	; 59
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c3c:	8c ec       	ldi	r24, 0xCC	; 204
     c3e:	97 e0       	ldi	r25, 0x07	; 7
     c40:	38 de       	rcall	.-912    	; 0x8b2 <_ZN14HardwareSerial9availableEv>
     c42:	21 e0       	ldi	r18, 0x01	; 1
     c44:	89 2b       	or	r24, r25
     c46:	09 f4       	brne	.+2      	; 0xc4a <_Z17Serial0_availablev+0xe>
     c48:	20 e0       	ldi	r18, 0x00	; 0
}
     c4a:	82 2f       	mov	r24, r18
     c4c:	08 95       	ret

00000c4e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c4e:	ec ec       	ldi	r30, 0xCC	; 204
     c50:	f7 e0       	ldi	r31, 0x07	; 7
     c52:	13 82       	std	Z+3, r1	; 0x03
     c54:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c56:	88 ee       	ldi	r24, 0xE8	; 232
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	84 83       	std	Z+4, r24	; 0x04
     c60:	95 83       	std	Z+5, r25	; 0x05
     c62:	a6 83       	std	Z+6, r26	; 0x06
     c64:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c66:	88 e2       	ldi	r24, 0x28	; 40
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	91 83       	std	Z+1, r25	; 0x01
     c6c:	80 83       	st	Z, r24
     c6e:	85 ec       	ldi	r24, 0xC5	; 197
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	95 87       	std	Z+13, r25	; 0x0d
     c74:	84 87       	std	Z+12, r24	; 0x0c
     c76:	84 ec       	ldi	r24, 0xC4	; 196
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	97 87       	std	Z+15, r25	; 0x0f
     c7c:	86 87       	std	Z+14, r24	; 0x0e
     c7e:	80 ec       	ldi	r24, 0xC0	; 192
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	91 8b       	std	Z+17, r25	; 0x11
     c84:	80 8b       	std	Z+16, r24	; 0x10
     c86:	81 ec       	ldi	r24, 0xC1	; 193
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	93 8b       	std	Z+19, r25	; 0x13
     c8c:	82 8b       	std	Z+18, r24	; 0x12
     c8e:	82 ec       	ldi	r24, 0xC2	; 194
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	95 8b       	std	Z+21, r25	; 0x15
     c94:	84 8b       	std	Z+20, r24	; 0x14
     c96:	86 ec       	ldi	r24, 0xC6	; 198
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	97 8b       	std	Z+23, r25	; 0x17
     c9c:	86 8b       	std	Z+22, r24	; 0x16
     c9e:	11 8e       	std	Z+25, r1	; 0x19
     ca0:	12 8e       	std	Z+26, r1	; 0x1a
     ca2:	13 8e       	std	Z+27, r1	; 0x1b
     ca4:	14 8e       	std	Z+28, r1	; 0x1c
     ca6:	08 95       	ret

00000ca8 <initVariant>:
     ca8:	08 95       	ret

00000caa <_Z12initializarev>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     caa:	26 e0       	ldi	r18, 0x06	; 6
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	55 e2       	ldi	r21, 0x25	; 37
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	8c ec       	ldi	r24, 0xCC	; 204
     cb6:	97 e0       	ldi	r25, 0x07	; 7
     cb8:	fd de       	rcall	.-518    	; 0xab4 <_ZN14HardwareSerial5beginEmh>
void setupUSB() __attribute__((weak));
void setupUSB() { }
void initializare()
{Serial.begin(9600);
	//configure external interrupt 4
	DDRE &= ~(1<<DDE4);
     cba:	6c 98       	cbi	0x0d, 4	; 13
	EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (RISING);
     cbc:	ea e6       	ldi	r30, 0x6A	; 106
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	83 60       	ori	r24, 0x03	; 3
     cc4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT4);
     cc6:	ec 9a       	sbi	0x1d, 4	; 29
		//configure external interrupt 4
		DDRE &= ~(1<<DDE5);
     cc8:	6d 98       	cbi	0x0d, 5	; 13
		EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (RISING << ISC50);
     cca:	80 81       	ld	r24, Z
     ccc:	8c 60       	ori	r24, 0x0C	; 12
     cce:	80 83       	st	Z, r24
		EIMSK |= (1 << INT5);
     cd0:	ed 9a       	sbi	0x1d, 5	; 29
	//configure digital pin 13 as output, the laser pin
	DDRB |= 1<<PB7;
     cd2:	27 9a       	sbi	0x04, 7	; 4
	PORTB &= ~(1<<PB7);
     cd4:	2f 98       	cbi	0x05, 7	; 5
     cd6:	08 95       	ret

00000cd8 <main>:
	
}
int main(void)
{
	init();
     cd8:	c6 d1       	rcall	.+908    	; 0x1066 <init>
	initVariant();
     cda:	e6 df       	rcall	.-52     	; 0xca8 <initVariant>
    initializare();
     cdc:	e6 df       	rcall	.-52     	; 0xcaa <_Z12initializarev>
	
	  
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     cde:	c6 e9       	ldi	r28, 0x96	; 150
     ce0:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	  
    
	for (;;) {
		loop();
     ce2:	d2 dd       	rcall	.-1116   	; 0x888 <loop>
		if (serialEventRun) serialEventRun();
     ce4:	20 97       	sbiw	r28, 0x00	; 0
     ce6:	e9 f3       	breq	.-6      	; 0xce2 <main+0xa>
     ce8:	21 de       	rcall	.-958    	; 0x92c <_Z14serialEventRunv>
     cea:	fb cf       	rjmp	.-10     	; 0xce2 <main+0xa>

00000cec <_ZN5Print5writeEPKhj>:
     cec:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	6c 01       	movw	r12, r24
     cfe:	7a 01       	movw	r14, r20
     d00:	8b 01       	movw	r16, r22
     d02:	c0 e0       	ldi	r28, 0x00	; 0
     d04:	d0 e0       	ldi	r29, 0x00	; 0
     d06:	ce 15       	cp	r28, r14
     d08:	df 05       	cpc	r29, r15
     d0a:	81 f0       	breq	.+32     	; 0xd2c <_ZN5Print5writeEPKhj+0x40>
     d0c:	d8 01       	movw	r26, r16
     d0e:	6d 91       	ld	r22, X+
     d10:	8d 01       	movw	r16, r26
     d12:	d6 01       	movw	r26, r12
     d14:	ed 91       	ld	r30, X+
     d16:	fc 91       	ld	r31, X
     d18:	01 90       	ld	r0, Z+
     d1a:	f0 81       	ld	r31, Z
     d1c:	e0 2d       	mov	r30, r0
     d1e:	c6 01       	movw	r24, r12
     d20:	19 95       	eicall
     d22:	89 2b       	or	r24, r25
     d24:	11 f0       	breq	.+4      	; 0xd2a <_ZN5Print5writeEPKhj+0x3e>
     d26:	21 96       	adiw	r28, 0x01	; 1
     d28:	ee cf       	rjmp	.-36     	; 0xd06 <_ZN5Print5writeEPKhj+0x1a>
     d2a:	7e 01       	movw	r14, r28
     d2c:	c7 01       	movw	r24, r14
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	08 95       	ret

00000d40 <_ZN5Print5writeEPKc>:
     d40:	61 15       	cp	r22, r1
     d42:	71 05       	cpc	r23, r1
     d44:	79 f0       	breq	.+30     	; 0xd64 <_ZN5Print5writeEPKc+0x24>
     d46:	fb 01       	movw	r30, r22
     d48:	01 90       	ld	r0, Z+
     d4a:	00 20       	and	r0, r0
     d4c:	e9 f7       	brne	.-6      	; 0xd48 <_ZN5Print5writeEPKc+0x8>
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	af 01       	movw	r20, r30
     d52:	46 1b       	sub	r20, r22
     d54:	57 0b       	sbc	r21, r23
     d56:	dc 01       	movw	r26, r24
     d58:	ed 91       	ld	r30, X+
     d5a:	fc 91       	ld	r31, X
     d5c:	02 80       	ldd	r0, Z+2	; 0x02
     d5e:	f3 81       	ldd	r31, Z+3	; 0x03
     d60:	e0 2d       	mov	r30, r0
     d62:	19 94       	eijmp
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	08 95       	ret

00000d6a <_ZN5Print5printEPKc>:
     d6a:	ea cf       	rjmp	.-44     	; 0xd40 <_ZN5Print5writeEPKc>

00000d6c <_ZN5Print5printEc>:
     d6c:	dc 01       	movw	r26, r24
     d6e:	ed 91       	ld	r30, X+
     d70:	fc 91       	ld	r31, X
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	19 94       	eijmp

00000d7a <_ZN5Print7printlnEv>:
     d7a:	66 e3       	ldi	r22, 0x36	; 54
     d7c:	72 e0       	ldi	r23, 0x02	; 2
     d7e:	e0 cf       	rjmp	.-64     	; 0xd40 <_ZN5Print5writeEPKc>

00000d80 <_ZN5Print7printlnEPKc>:
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	da df       	rcall	.-76     	; 0xd40 <_ZN5Print5writeEPKc>
     d8c:	8c 01       	movw	r16, r24
     d8e:	ce 01       	movw	r24, r28
     d90:	f4 df       	rcall	.-24     	; 0xd7a <_ZN5Print7printlnEv>
     d92:	80 0f       	add	r24, r16
     d94:	91 1f       	adc	r25, r17
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <_ZN5Print11printNumberEmh>:
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	a1 97       	sbiw	r28, 0x21	; 33
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	7c 01       	movw	r14, r24
     dc6:	fa 01       	movw	r30, r20
     dc8:	cb 01       	movw	r24, r22
     dca:	19 a2       	std	Y+33, r1	; 0x21
     dcc:	22 30       	cpi	r18, 0x02	; 2
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <_ZN5Print11printNumberEmh+0x32>
     dd0:	2a e0       	ldi	r18, 0x0A	; 10
     dd2:	8e 01       	movw	r16, r28
     dd4:	0f 5d       	subi	r16, 0xDF	; 223
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	82 2e       	mov	r8, r18
     dda:	91 2c       	mov	r9, r1
     ddc:	a1 2c       	mov	r10, r1
     dde:	b1 2c       	mov	r11, r1
     de0:	bf 01       	movw	r22, r30
     de2:	a5 01       	movw	r20, r10
     de4:	94 01       	movw	r18, r8
     de6:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
     dea:	f9 01       	movw	r30, r18
     dec:	ca 01       	movw	r24, r20
     dee:	01 50       	subi	r16, 0x01	; 1
     df0:	11 09       	sbc	r17, r1
     df2:	6a 30       	cpi	r22, 0x0A	; 10
     df4:	10 f4       	brcc	.+4      	; 0xdfa <_ZN5Print11printNumberEmh+0x5a>
     df6:	60 5d       	subi	r22, 0xD0	; 208
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <_ZN5Print11printNumberEmh+0x5c>
     dfa:	69 5c       	subi	r22, 0xC9	; 201
     dfc:	d8 01       	movw	r26, r16
     dfe:	6c 93       	st	X, r22
     e00:	23 2b       	or	r18, r19
     e02:	24 2b       	or	r18, r20
     e04:	25 2b       	or	r18, r21
     e06:	61 f7       	brne	.-40     	; 0xde0 <_ZN5Print11printNumberEmh+0x40>
     e08:	b8 01       	movw	r22, r16
     e0a:	c7 01       	movw	r24, r14
     e0c:	99 df       	rcall	.-206    	; 0xd40 <_ZN5Print5writeEPKc>
     e0e:	a1 96       	adiw	r28, 0x21	; 33
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	08 95       	ret

00000e30 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
  if (base == 0) {
     e40:	21 15       	cp	r18, r1
     e42:	31 05       	cpc	r19, r1
     e44:	81 f4       	brne	.+32     	; 0xe66 <_ZN5Print5printEli+0x36>
    return write(n);
     e46:	dc 01       	movw	r26, r24
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	01 90       	ld	r0, Z+
     e4e:	f0 81       	ld	r31, Z
     e50:	e0 2d       	mov	r30, r0
     e52:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     e64:	19 94       	eijmp
  } else if (base == 10) {
     e66:	2a 30       	cpi	r18, 0x0A	; 10
     e68:	31 05       	cpc	r19, r1
     e6a:	f1 f4       	brne	.+60     	; 0xea8 <_ZN5Print5printEli+0x78>
    if (n < 0) {
     e6c:	77 ff       	sbrs	r23, 7
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <_ZN5Print5printEli+0x76>
     e70:	6a 01       	movw	r12, r20
     e72:	7b 01       	movw	r14, r22
     e74:	ec 01       	movw	r28, r24
      int t = print('-');
     e76:	6d e2       	ldi	r22, 0x2D	; 45
     e78:	79 df       	rcall	.-270    	; 0xd6c <_ZN5Print5printEc>
     e7a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     e7c:	44 27       	eor	r20, r20
     e7e:	55 27       	eor	r21, r21
     e80:	ba 01       	movw	r22, r20
     e82:	4c 19       	sub	r20, r12
     e84:	5d 09       	sbc	r21, r13
     e86:	6e 09       	sbc	r22, r14
     e88:	7f 09       	sbc	r23, r15
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	ce 01       	movw	r24, r28
     e8e:	88 df       	rcall	.-240    	; 0xda0 <_ZN5Print11printNumberEmh>
     e90:	80 0f       	add	r24, r16
     e92:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     ea6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     eb6:	cf 90       	pop	r12
     eb8:	73 cf       	rjmp	.-282    	; 0xda0 <_ZN5Print11printNumberEmh>

00000eba <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     eba:	9a 01       	movw	r18, r20
  return print((long) n, base);
     ebc:	ab 01       	movw	r20, r22
     ebe:	77 0f       	add	r23, r23
     ec0:	66 0b       	sbc	r22, r22
     ec2:	77 0b       	sbc	r23, r23
     ec4:	b5 cf       	rjmp	.-150    	; 0xe30 <_ZN5Print5printEli>

00000ec6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     ed0:	f4 df       	rcall	.-24     	; 0xeba <_ZN5Print5printEii>
     ed2:	8c 01       	movw	r16, r24
  n += println();
     ed4:	ce 01       	movw	r24, r28
     ed6:	51 df       	rcall	.-350    	; 0xd7a <_ZN5Print7printlnEv>
  return n;
}
     ed8:	80 0f       	add	r24, r16
     eda:	91 1f       	adc	r25, r17
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     efc:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <timer0_millis>
     f00:	90 91 6b 08 	lds	r25, 0x086B	; 0x80086b <timer0_millis+0x1>
     f04:	a0 91 6c 08 	lds	r26, 0x086C	; 0x80086c <timer0_millis+0x2>
     f08:	b0 91 6d 08 	lds	r27, 0x086D	; 0x80086d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     f0c:	30 91 69 08 	lds	r19, 0x0869	; 0x800869 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     f10:	23 e0       	ldi	r18, 0x03	; 3
     f12:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     f14:	2d 37       	cpi	r18, 0x7D	; 125
     f16:	20 f4       	brcc	.+8      	; 0xf20 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	a1 1d       	adc	r26, r1
     f1c:	b1 1d       	adc	r27, r1
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     f20:	26 e8       	ldi	r18, 0x86	; 134
     f22:	23 0f       	add	r18, r19
		m += 1;
     f24:	02 96       	adiw	r24, 0x02	; 2
     f26:	a1 1d       	adc	r26, r1
     f28:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f2a:	20 93 69 08 	sts	0x0869, r18	; 0x800869 <timer0_fract>
	timer0_millis = m;
     f2e:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <timer0_millis>
     f32:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <timer0_millis+0x1>
     f36:	a0 93 6c 08 	sts	0x086C, r26	; 0x80086c <timer0_millis+0x2>
     f3a:	b0 93 6d 08 	sts	0x086D, r27	; 0x80086d <timer0_millis+0x3>
	timer0_overflow_count++;
     f3e:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <timer0_overflow_count>
     f42:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <timer0_overflow_count+0x1>
     f46:	a0 91 70 08 	lds	r26, 0x0870	; 0x800870 <timer0_overflow_count+0x2>
     f4a:	b0 91 71 08 	lds	r27, 0x0871	; 0x800871 <timer0_overflow_count+0x3>
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	a1 1d       	adc	r26, r1
     f52:	b1 1d       	adc	r27, r1
     f54:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <timer0_overflow_count>
     f58:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <timer0_overflow_count+0x1>
     f5c:	a0 93 70 08 	sts	0x0870, r26	; 0x800870 <timer0_overflow_count+0x2>
     f60:	b0 93 71 08 	sts	0x0871, r27	; 0x800871 <timer0_overflow_count+0x3>
}
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     f7a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     f7c:	f8 94       	cli
	m = timer0_millis;
     f7e:	60 91 6a 08 	lds	r22, 0x086A	; 0x80086a <timer0_millis>
     f82:	70 91 6b 08 	lds	r23, 0x086B	; 0x80086b <timer0_millis+0x1>
     f86:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <timer0_millis+0x2>
     f8a:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <timer0_millis+0x3>
	SREG = oldSREG;
     f8e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     f90:	08 95       	ret

00000f92 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f92:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     f94:	f8 94       	cli
	m = timer0_overflow_count;
     f96:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <timer0_overflow_count>
     f9a:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <timer0_overflow_count+0x1>
     f9e:	a0 91 70 08 	lds	r26, 0x0870	; 0x800870 <timer0_overflow_count+0x2>
     fa2:	b0 91 71 08 	lds	r27, 0x0871	; 0x800871 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     fa6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     fa8:	a8 9b       	sbis	0x15, 0	; 21
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <micros+0x24>
     fac:	2f 3f       	cpi	r18, 0xFF	; 255
     fae:	19 f0       	breq	.+6      	; 0xfb6 <micros+0x24>
		m++;
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	a1 1d       	adc	r26, r1
     fb4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     fb6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     fb8:	ba 2f       	mov	r27, r26
     fba:	a9 2f       	mov	r26, r25
     fbc:	98 2f       	mov	r25, r24
     fbe:	88 27       	eor	r24, r24
     fc0:	82 0f       	add	r24, r18
     fc2:	91 1d       	adc	r25, r1
     fc4:	a1 1d       	adc	r26, r1
     fc6:	b1 1d       	adc	r27, r1
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	42 e0       	ldi	r20, 0x02	; 2
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	4a 95       	dec	r20
     fd8:	d1 f7       	brne	.-12     	; 0xfce <micros+0x3c>
}
     fda:	08 95       	ret

00000fdc <delay>:

void delay(unsigned long ms)
{
     fdc:	8f 92       	push	r8
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	6b 01       	movw	r12, r22
     fee:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     ff0:	d0 df       	rcall	.-96     	; 0xf92 <micros>
     ff2:	4b 01       	movw	r8, r22
     ff4:	5c 01       	movw	r10, r24

	while (ms > 0) {
     ff6:	c1 14       	cp	r12, r1
     ff8:	d1 04       	cpc	r13, r1
     ffa:	e1 04       	cpc	r14, r1
     ffc:	f1 04       	cpc	r15, r1
     ffe:	f9 f0       	breq	.+62     	; 0x103e <delay+0x62>
		yield();
    1000:	0e 94 dd 10 	call	0x21ba	; 0x21ba <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1004:	c6 df       	rcall	.-116    	; 0xf92 <micros>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	88 19       	sub	r24, r8
    100c:	99 09       	sbc	r25, r9
    100e:	aa 09       	sbc	r26, r10
    1010:	bb 09       	sbc	r27, r11
    1012:	88 3e       	cpi	r24, 0xE8	; 232
    1014:	93 40       	sbci	r25, 0x03	; 3
    1016:	a1 05       	cpc	r26, r1
    1018:	b1 05       	cpc	r27, r1
    101a:	68 f3       	brcs	.-38     	; 0xff6 <delay+0x1a>
			ms--;
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	c2 1a       	sub	r12, r18
    1020:	d1 08       	sbc	r13, r1
    1022:	e1 08       	sbc	r14, r1
    1024:	f1 08       	sbc	r15, r1
			start += 1000;
    1026:	88 ee       	ldi	r24, 0xE8	; 232
    1028:	88 0e       	add	r8, r24
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	98 1e       	adc	r9, r24
    102e:	a1 1c       	adc	r10, r1
    1030:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1032:	c1 14       	cp	r12, r1
    1034:	d1 04       	cpc	r13, r1
    1036:	e1 04       	cpc	r14, r1
    1038:	f1 04       	cpc	r15, r1
    103a:	21 f7       	brne	.-56     	; 0x1004 <delay+0x28>
    103c:	dc cf       	rjmp	.-72     	; 0xff6 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	08 95       	ret

00001050 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	38 f0       	brcs	.+14     	; 0x1064 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    105e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <delayMicroseconds+0x10>
    1064:	08 95       	ret

00001066 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1066:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1068:	84 b5       	in	r24, 0x24	; 36
    106a:	82 60       	ori	r24, 0x02	; 2
    106c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    106e:	84 b5       	in	r24, 0x24	; 36
    1070:	81 60       	ori	r24, 0x01	; 1
    1072:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1074:	85 b5       	in	r24, 0x25	; 37
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1080:	ee e6       	ldi	r30, 0x6E	; 110
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    108a:	e1 e8       	ldi	r30, 0x81	; 129
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1090:	80 81       	ld	r24, Z
    1092:	82 60       	ori	r24, 0x02	; 2
    1094:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1096:	80 81       	ld	r24, Z
    1098:	81 60       	ori	r24, 0x01	; 1
    109a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    109c:	e0 e8       	ldi	r30, 0x80	; 128
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	81 60       	ori	r24, 0x01	; 1
    10a4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10a6:	e1 eb       	ldi	r30, 0xB1	; 177
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	84 60       	ori	r24, 0x04	; 4
    10ae:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10b0:	e0 eb       	ldi	r30, 0xB0	; 176
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	81 60       	ori	r24, 0x01	; 1
    10b8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    10ba:	e1 e9       	ldi	r30, 0x91	; 145
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    10c4:	80 81       	ld	r24, Z
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    10ca:	e0 e9       	ldi	r30, 0x90	; 144
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    10d4:	e1 ea       	ldi	r30, 0xA1	; 161
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    10de:	80 81       	ld	r24, Z
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    10e4:	e0 ea       	ldi	r30, 0xA0	; 160
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	81 60       	ori	r24, 0x01	; 1
    10ec:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    10ee:	e1 e2       	ldi	r30, 0x21	; 33
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	80 81       	ld	r24, Z
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    10f8:	80 81       	ld	r24, Z
    10fa:	81 60       	ori	r24, 0x01	; 1
    10fc:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    10fe:	e0 e2       	ldi	r30, 0x20	; 32
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	80 81       	ld	r24, Z
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1108:	ea e7       	ldi	r30, 0x7A	; 122
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	84 60       	ori	r24, 0x04	; 4
    1110:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1112:	80 81       	ld	r24, Z
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1118:	80 81       	ld	r24, Z
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    111e:	80 81       	ld	r24, Z
    1120:	80 68       	ori	r24, 0x80	; 128
    1122:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1124:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1128:	08 95       	ret

0000112a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	fc 01       	movw	r30, r24
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	e2 31       	cpi	r30, 0x12	; 18
    1132:	f1 05       	cpc	r31, r1
    1134:	08 f0       	brcs	.+2      	; 0x1138 <turnOffPWM+0xe>
    1136:	4e c0       	rjmp	.+156    	; 0x11d4 <turnOffPWM+0xaa>
    1138:	88 27       	eor	r24, r24
    113a:	ee 58       	subi	r30, 0x8E	; 142
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1144:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1148:	8f 77       	andi	r24, 0x7F	; 127
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    114c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1156:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1158:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	f9 cf       	rjmp	.-14     	; 0x1152 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1160:	84 b5       	in	r24, 0x24	; 36
    1162:	8f 77       	andi	r24, 0x7F	; 127
    1164:	02 c0       	rjmp	.+4      	; 0x116a <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1166:	84 b5       	in	r24, 0x24	; 36
    1168:	8f 7d       	andi	r24, 0xDF	; 223
    116a:	84 bd       	out	0x24, r24	; 36
    116c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    116e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1172:	8f 77       	andi	r24, 0x7F	; 127
    1174:	03 c0       	rjmp	.+6      	; 0x117c <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1176:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    117a:	8f 7d       	andi	r24, 0xDF	; 223
    117c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1180:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1182:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1186:	8f 77       	andi	r24, 0x7F	; 127
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    118a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1192:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1196:	87 7f       	andi	r24, 0xF7	; 247
    1198:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    119c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    119e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11a2:	8f 77       	andi	r24, 0x7F	; 127
    11a4:	07 c0       	rjmp	.+14     	; 0x11b4 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    11a6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11aa:	8f 7d       	andi	r24, 0xDF	; 223
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    11ae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11b2:	87 7f       	andi	r24, 0xF7	; 247
    11b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    11b8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    11ba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11be:	8f 77       	andi	r24, 0x7F	; 127
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    11c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11c6:	8f 7d       	andi	r24, 0xDF	; 223
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    11ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11ce:	87 7f       	andi	r24, 0xF7	; 247
    11d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11d4:	08 95       	ret

000011d6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 59       	subi	r30, 0x92	; 146
    11e0:	fe 4f       	sbci	r31, 0xFE	; 254
    11e2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    11e4:	fc 01       	movw	r30, r24
    11e6:	ec 54       	subi	r30, 0x4C	; 76
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    11ec:	88 23       	and	r24, r24
    11ee:	61 f1       	breq	.+88     	; 0x1248 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	fc 01       	movw	r30, r24
    11f8:	ec 5e       	subi	r30, 0xEC	; 236
    11fa:	fd 4f       	sbci	r31, 0xFD	; 253
    11fc:	c5 91       	lpm	r28, Z+
    11fe:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1200:	fc 01       	movw	r30, r24
    1202:	e6 50       	subi	r30, 0x06	; 6
    1204:	fe 4f       	sbci	r31, 0xFE	; 254
    1206:	a5 91       	lpm	r26, Z+
    1208:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    120a:	61 11       	cpse	r22, r1
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    120e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1210:	f8 94       	cli
		*reg &= ~bit;
    1212:	88 81       	ld	r24, Y
    1214:	20 95       	com	r18
    1216:	82 23       	and	r24, r18
    1218:	88 83       	st	Y, r24
		*out &= ~bit;
    121a:	ec 91       	ld	r30, X
    121c:	2e 23       	and	r18, r30
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1220:	62 30       	cpi	r22, 0x02	; 2
    1222:	61 f4       	brne	.+24     	; 0x123c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1224:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1226:	f8 94       	cli
		*reg &= ~bit;
    1228:	88 81       	ld	r24, Y
    122a:	32 2f       	mov	r19, r18
    122c:	30 95       	com	r19
    122e:	83 23       	and	r24, r19
    1230:	88 83       	st	Y, r24
		*out |= bit;
    1232:	ec 91       	ld	r30, X
    1234:	2e 2b       	or	r18, r30
    1236:	2c 93       	st	X, r18
		SREG = oldSREG;
    1238:	9f bf       	out	0x3f, r25	; 63
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    123c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    123e:	f8 94       	cli
		*reg |= bit;
    1240:	e8 81       	ld	r30, Y
    1242:	2e 2b       	or	r18, r30
    1244:	28 83       	st	Y, r18
		SREG = oldSREG;
    1246:	8f bf       	out	0x3f, r24	; 63
	}
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	f9 01       	movw	r30, r18
    125a:	e8 5d       	subi	r30, 0xD8	; 216
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1260:	f9 01       	movw	r30, r18
    1262:	e2 59       	subi	r30, 0x92	; 146
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1268:	f9 01       	movw	r30, r18
    126a:	ec 54       	subi	r30, 0x4C	; 76
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1270:	cc 23       	and	r28, r28
    1272:	b9 f0       	breq	.+46     	; 0x12a2 <digitalWrite+0x54>
    1274:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1276:	81 11       	cpse	r24, r1
    1278:	58 df       	rcall	.-336    	; 0x112a <turnOffPWM>

	out = portOutputRegister(port);
    127a:	ec 2f       	mov	r30, r28
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	e6 50       	subi	r30, 0x06	; 6
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	a5 91       	lpm	r26, Z+
    1288:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    128a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    128c:	f8 94       	cli

	if (val == LOW) {
    128e:	11 11       	cpse	r17, r1
    1290:	04 c0       	rjmp	.+8      	; 0x129a <digitalWrite+0x4c>
		*out &= ~bit;
    1292:	8c 91       	ld	r24, X
    1294:	d0 95       	com	r29
    1296:	d8 23       	and	r29, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <digitalWrite+0x50>
	} else {
		*out |= bit;
    129a:	ec 91       	ld	r30, X
    129c:	de 2b       	or	r29, r30
    129e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    12a0:	9f bf       	out	0x3f, r25	; 63
}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	08 95       	ret

000012aa <_ZN6StringD1Ev>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    12aa:	fc 01       	movw	r30, r24
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	0c 94 2e 14 	jmp	0x285c	; 0x285c <free>

000012b4 <_ZN6String10invalidateEv>:
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	ec 01       	movw	r28, r24
    12ba:	88 81       	ld	r24, Y
    12bc:	99 81       	ldd	r25, Y+1	; 0x01
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <_ZN6String10invalidateEv+0x12>
    12c2:	0e 94 2e 14 	call	0x285c	; 0x285c <free>
    12c6:	19 82       	std	Y+1, r1	; 0x01
    12c8:	18 82       	st	Y, r1
    12ca:	1d 82       	std	Y+5, r1	; 0x05
    12cc:	1c 82       	std	Y+4, r1	; 0x04
    12ce:	1b 82       	std	Y+3, r1	; 0x03
    12d0:	1a 82       	std	Y+2, r1	; 0x02
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <_ZN6String12changeBufferEj>:
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	8b 01       	movw	r16, r22
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	88 81       	ld	r24, Y
    12ea:	99 81       	ldd	r25, Y+1	; 0x01
    12ec:	0e 94 b7 14 	call	0x296e	; 0x296e <realloc>
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	31 f0       	breq	.+12     	; 0x1300 <_ZN6String12changeBufferEj+0x28>
    12f4:	99 83       	std	Y+1, r25	; 0x01
    12f6:	88 83       	st	Y, r24
    12f8:	1b 83       	std	Y+3, r17	; 0x03
    12fa:	0a 83       	std	Y+2, r16	; 0x02
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <_ZN6String12changeBufferEj+0x2a>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	08 95       	ret

0000130c <_ZN6String7reserveEj>:
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	ec 01       	movw	r28, r24
    1312:	88 81       	ld	r24, Y
    1314:	99 81       	ldd	r25, Y+1	; 0x01
    1316:	89 2b       	or	r24, r25
    1318:	29 f0       	breq	.+10     	; 0x1324 <_ZN6String7reserveEj+0x18>
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	86 17       	cp	r24, r22
    1320:	97 07       	cpc	r25, r23
    1322:	58 f4       	brcc	.+22     	; 0x133a <_ZN6String7reserveEj+0x2e>
    1324:	ce 01       	movw	r24, r28
    1326:	d8 df       	rcall	.-80     	; 0x12d8 <_ZN6String12changeBufferEj>
    1328:	88 23       	and	r24, r24
    132a:	41 f0       	breq	.+16     	; 0x133c <_ZN6String7reserveEj+0x30>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	89 2b       	or	r24, r25
    1332:	19 f4       	brne	.+6      	; 0x133a <_ZN6String7reserveEj+0x2e>
    1334:	e8 81       	ld	r30, Y
    1336:	f9 81       	ldd	r31, Y+1	; 0x01
    1338:	10 82       	st	Z, r1
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <_ZN6String4copyEPKcj>:
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	7b 01       	movw	r14, r22
    1352:	8a 01       	movw	r16, r20
    1354:	ba 01       	movw	r22, r20
    1356:	da df       	rcall	.-76     	; 0x130c <_ZN6String7reserveEj>
    1358:	81 11       	cpse	r24, r1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_ZN6String4copyEPKcj+0x20>
    135c:	ce 01       	movw	r24, r28
    135e:	aa df       	rcall	.-172    	; 0x12b4 <_ZN6String10invalidateEv>
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <_ZN6String4copyEPKcj+0x2e>
    1362:	1d 83       	std	Y+5, r17	; 0x05
    1364:	0c 83       	std	Y+4, r16	; 0x04
    1366:	b7 01       	movw	r22, r14
    1368:	88 81       	ld	r24, Y
    136a:	99 81       	ldd	r25, Y+1	; 0x01
    136c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <strcpy>
    1370:	ce 01       	movw	r24, r28
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	08 95       	ret

00001380 <_ZN6StringC1EPKc>:
    1380:	fc 01       	movw	r30, r24
    1382:	11 82       	std	Z+1, r1	; 0x01
    1384:	10 82       	st	Z, r1
    1386:	13 82       	std	Z+3, r1	; 0x03
    1388:	12 82       	std	Z+2, r1	; 0x02
    138a:	15 82       	std	Z+5, r1	; 0x05
    138c:	14 82       	std	Z+4, r1	; 0x04
    138e:	61 15       	cp	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	49 f0       	breq	.+18     	; 0x13a6 <_ZN6StringC1EPKc+0x26>
    1394:	fb 01       	movw	r30, r22
    1396:	01 90       	ld	r0, Z+
    1398:	00 20       	and	r0, r0
    139a:	e9 f7       	brne	.-6      	; 0x1396 <_ZN6StringC1EPKc+0x16>
    139c:	31 97       	sbiw	r30, 0x01	; 1
    139e:	af 01       	movw	r20, r30
    13a0:	46 1b       	sub	r20, r22
    13a2:	57 0b       	sbc	r21, r23
    13a4:	ce cf       	rjmp	.-100    	; 0x1342 <_ZN6String4copyEPKcj>
    13a6:	08 95       	ret

000013a8 <_ZN6StringaSEPKc>:
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	51 f0       	breq	.+20     	; 0x13c8 <_ZN6StringaSEPKc+0x20>
    13b4:	fb 01       	movw	r30, r22
    13b6:	01 90       	ld	r0, Z+
    13b8:	00 20       	and	r0, r0
    13ba:	e9 f7       	brne	.-6      	; 0x13b6 <_ZN6StringaSEPKc+0xe>
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	af 01       	movw	r20, r30
    13c0:	46 1b       	sub	r20, r22
    13c2:	57 0b       	sbc	r21, r23
    13c4:	be df       	rcall	.-132    	; 0x1342 <_ZN6String4copyEPKcj>
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <_ZN6StringaSEPKc+0x22>
    13c8:	75 df       	rcall	.-278    	; 0x12b4 <_ZN6String10invalidateEv>
    13ca:	ce 01       	movw	r24, r28
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <_ZN6String6concatEPKcj>:
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	61 15       	cp	r22, r1
    13e0:	71 05       	cpc	r23, r1
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <_ZN6String6concatEPKcj+0x16>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	1b c0       	rjmp	.+54     	; 0x141e <_ZN6String6concatEPKcj+0x4c>
    13e8:	41 15       	cp	r20, r1
    13ea:	51 05       	cpc	r21, r1
    13ec:	b9 f0       	breq	.+46     	; 0x141c <_ZN6String6concatEPKcj+0x4a>
    13ee:	7b 01       	movw	r14, r22
    13f0:	ec 01       	movw	r28, r24
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	8a 01       	movw	r16, r20
    13f8:	08 0f       	add	r16, r24
    13fa:	19 1f       	adc	r17, r25
    13fc:	b8 01       	movw	r22, r16
    13fe:	ce 01       	movw	r24, r28
    1400:	85 df       	rcall	.-246    	; 0x130c <_ZN6String7reserveEj>
    1402:	88 23       	and	r24, r24
    1404:	79 f3       	breq	.-34     	; 0x13e4 <_ZN6String6concatEPKcj+0x12>
    1406:	28 81       	ld	r18, Y
    1408:	39 81       	ldd	r19, Y+1	; 0x01
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	b7 01       	movw	r22, r14
    1410:	82 0f       	add	r24, r18
    1412:	93 1f       	adc	r25, r19
    1414:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <strcpy>
    1418:	1d 83       	std	Y+5, r17	; 0x05
    141a:	0c 83       	std	Y+4, r16	; 0x04
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	08 95       	ret

0000142c <_ZN6String6concatEc>:
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	1f 92       	push	r1
    1432:	1f 92       	push	r1
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	69 83       	std	Y+1, r22	; 0x01
    143a:	1a 82       	std	Y+2, r1	; 0x02
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	be 01       	movw	r22, r28
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	c5 df       	rcall	.-118    	; 0x13d2 <_ZN6String6concatEPKcj>
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    1452:	fc 01       	movw	r30, r24
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	11 f0       	breq	.+4      	; 0x1460 <_ZNK6String5toIntEv+0xe>
    145c:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <atol>
	return 0;
}
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	cb 01       	movw	r24, r22
    1466:	08 95       	ret

00001468 <_ZN12AccelStepper4stepEl>:
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
	_acceleration = acceleration;
	computeNewSpeed();
    }
}
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	dc 01       	movw	r26, r24
    146e:	13 96       	adiw	r26, 0x03	; 3
    1470:	0c 91       	ld	r16, X
    1472:	13 97       	sbiw	r26, 0x03	; 3
    1474:	10 e0       	ldi	r17, 0x00	; 0
    1476:	09 30       	cpi	r16, 0x09	; 9
    1478:	11 05       	cpc	r17, r1
    147a:	d8 f5       	brcc	.+118    	; 0x14f2 <_ZN12AccelStepper4stepEl+0x8a>
    147c:	f8 01       	movw	r30, r16
    147e:	88 27       	eor	r24, r24
    1480:	ec 57       	subi	r30, 0x7C	; 124
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	8f 4f       	sbci	r24, 0xFF	; 255
    1486:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__tablejump2__>
    148a:	ed 91       	ld	r30, X+
    148c:	fc 91       	ld	r31, X
    148e:	11 97       	sbiw	r26, 0x01	; 1
    1490:	00 84       	ldd	r0, Z+8	; 0x08
    1492:	f1 85       	ldd	r31, Z+9	; 0x09
    1494:	e0 2d       	mov	r30, r0
    1496:	29 c0       	rjmp	.+82     	; 0x14ea <_ZN12AccelStepper4stepEl+0x82>
    1498:	ed 91       	ld	r30, X+
    149a:	fc 91       	ld	r31, X
    149c:	11 97       	sbiw	r26, 0x01	; 1
    149e:	02 84       	ldd	r0, Z+10	; 0x0a
    14a0:	f3 85       	ldd	r31, Z+11	; 0x0b
    14a2:	e0 2d       	mov	r30, r0
    14a4:	22 c0       	rjmp	.+68     	; 0x14ea <_ZN12AccelStepper4stepEl+0x82>
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	11 97       	sbiw	r26, 0x01	; 1
    14ac:	04 84       	ldd	r0, Z+12	; 0x0c
    14ae:	f5 85       	ldd	r31, Z+13	; 0x0d
    14b0:	e0 2d       	mov	r30, r0
    14b2:	1b c0       	rjmp	.+54     	; 0x14ea <_ZN12AccelStepper4stepEl+0x82>
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	11 97       	sbiw	r26, 0x01	; 1
    14ba:	06 84       	ldd	r0, Z+14	; 0x0e
    14bc:	f7 85       	ldd	r31, Z+15	; 0x0f
    14be:	e0 2d       	mov	r30, r0
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <_ZN12AccelStepper4stepEl+0x82>
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	11 97       	sbiw	r26, 0x01	; 1
    14c8:	00 88       	ldd	r0, Z+16	; 0x10
    14ca:	f1 89       	ldd	r31, Z+17	; 0x11
    14cc:	e0 2d       	mov	r30, r0
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <_ZN12AccelStepper4stepEl+0x82>
    14d0:	ed 91       	ld	r30, X+
    14d2:	fc 91       	ld	r31, X
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	02 88       	ldd	r0, Z+18	; 0x12
    14d8:	f3 89       	ldd	r31, Z+19	; 0x13
    14da:	e0 2d       	mov	r30, r0
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <_ZN12AccelStepper4stepEl+0x82>
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    14e4:	04 88       	ldd	r0, Z+20	; 0x14
    14e6:	f5 89       	ldd	r31, Z+21	; 0x15
    14e8:	e0 2d       	mov	r30, r0
    14ea:	cd 01       	movw	r24, r26
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	19 94       	eijmp
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <_ZN12AccelStepper5step6El>:
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ec 01       	movw	r28, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	ba 01       	movw	r22, r20
    1502:	26 e0       	ldi	r18, 0x06	; 6
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    150e:	62 30       	cpi	r22, 0x02	; 2
    1510:	71 05       	cpc	r23, r1
    1512:	81 05       	cpc	r24, r1
    1514:	91 05       	cpc	r25, r1
    1516:	59 f1       	breq	.+86     	; 0x156e <_ZN12AccelStepper5step6El+0x76>
    1518:	8c f4       	brge	.+34     	; 0x153c <_ZN12AccelStepper5step6El+0x44>
    151a:	61 15       	cp	r22, r1
    151c:	71 05       	cpc	r23, r1
    151e:	81 05       	cpc	r24, r1
    1520:	91 05       	cpc	r25, r1
    1522:	f1 f0       	breq	.+60     	; 0x1560 <_ZN12AccelStepper5step6El+0x68>
    1524:	61 30       	cpi	r22, 0x01	; 1
    1526:	71 05       	cpc	r23, r1
    1528:	81 05       	cpc	r24, r1
    152a:	91 05       	cpc	r25, r1
    152c:	c1 f5       	brne	.+112    	; 0x159e <_ZN12AccelStepper5step6El+0xa6>
    152e:	e8 81       	ld	r30, Y
    1530:	f9 81       	ldd	r31, Y+1	; 0x01
    1532:	04 80       	ldd	r0, Z+4	; 0x04
    1534:	f5 81       	ldd	r31, Z+5	; 0x05
    1536:	e0 2d       	mov	r30, r0
    1538:	65 e0       	ldi	r22, 0x05	; 5
    153a:	2d c0       	rjmp	.+90     	; 0x1596 <_ZN12AccelStepper5step6El+0x9e>
    153c:	64 30       	cpi	r22, 0x04	; 4
    153e:	71 05       	cpc	r23, r1
    1540:	81 05       	cpc	r24, r1
    1542:	91 05       	cpc	r25, r1
    1544:	11 f1       	breq	.+68     	; 0x158a <_ZN12AccelStepper5step6El+0x92>
    1546:	d4 f0       	brlt	.+52     	; 0x157c <_ZN12AccelStepper5step6El+0x84>
    1548:	65 30       	cpi	r22, 0x05	; 5
    154a:	71 05       	cpc	r23, r1
    154c:	81 05       	cpc	r24, r1
    154e:	91 05       	cpc	r25, r1
    1550:	31 f5       	brne	.+76     	; 0x159e <_ZN12AccelStepper5step6El+0xa6>
    1552:	e8 81       	ld	r30, Y
    1554:	f9 81       	ldd	r31, Y+1	; 0x01
    1556:	04 80       	ldd	r0, Z+4	; 0x04
    1558:	f5 81       	ldd	r31, Z+5	; 0x05
    155a:	e0 2d       	mov	r30, r0
    155c:	66 e0       	ldi	r22, 0x06	; 6
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <_ZN12AccelStepper5step6El+0x9e>
    1560:	e8 81       	ld	r30, Y
    1562:	f9 81       	ldd	r31, Y+1	; 0x01
    1564:	04 80       	ldd	r0, Z+4	; 0x04
    1566:	f5 81       	ldd	r31, Z+5	; 0x05
    1568:	e0 2d       	mov	r30, r0
    156a:	64 e0       	ldi	r22, 0x04	; 4
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <_ZN12AccelStepper5step6El+0x9e>
    156e:	e8 81       	ld	r30, Y
    1570:	f9 81       	ldd	r31, Y+1	; 0x01
    1572:	04 80       	ldd	r0, Z+4	; 0x04
    1574:	f5 81       	ldd	r31, Z+5	; 0x05
    1576:	e0 2d       	mov	r30, r0
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <_ZN12AccelStepper5step6El+0x9e>
    157c:	e8 81       	ld	r30, Y
    157e:	f9 81       	ldd	r31, Y+1	; 0x01
    1580:	04 80       	ldd	r0, Z+4	; 0x04
    1582:	f5 81       	ldd	r31, Z+5	; 0x05
    1584:	e0 2d       	mov	r30, r0
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <_ZN12AccelStepper5step6El+0x9e>
    158a:	e8 81       	ld	r30, Y
    158c:	f9 81       	ldd	r31, Y+1	; 0x01
    158e:	04 80       	ldd	r0, Z+4	; 0x04
    1590:	f5 81       	ldd	r31, Z+5	; 0x05
    1592:	e0 2d       	mov	r30, r0
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	ce 01       	movw	r24, r28
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	19 94       	eijmp
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <_ZN12AccelStepper5step8El>:
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	dc 01       	movw	r26, r24
    15aa:	47 70       	andi	r20, 0x07	; 7
    15ac:	55 27       	eor	r21, r21
    15ae:	66 27       	eor	r22, r22
    15b0:	77 27       	eor	r23, r23
    15b2:	fa 01       	movw	r30, r20
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	cd 91       	ld	r28, X+
    15b8:	dc 91       	ld	r29, X
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    15bc:	e7 30       	cpi	r30, 0x07	; 7
    15be:	f1 05       	cpc	r31, r1
    15c0:	30 f4       	brcc	.+12     	; 0x15ce <_ZN12AccelStepper5step8El+0x2a>
    15c2:	88 27       	eor	r24, r24
    15c4:	e3 57       	subi	r30, 0x73	; 115
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ca:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__tablejump2__>
    15ce:	ec 81       	ldd	r30, Y+4	; 0x04
    15d0:	fd 81       	ldd	r31, Y+5	; 0x05
    15d2:	61 e0       	ldi	r22, 0x01	; 1
    15d4:	1b c0       	rjmp	.+54     	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    15d6:	ec 81       	ldd	r30, Y+4	; 0x04
    15d8:	fd 81       	ldd	r31, Y+5	; 0x05
    15da:	65 e0       	ldi	r22, 0x05	; 5
    15dc:	17 c0       	rjmp	.+46     	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    15de:	ec 81       	ldd	r30, Y+4	; 0x04
    15e0:	fd 81       	ldd	r31, Y+5	; 0x05
    15e2:	64 e0       	ldi	r22, 0x04	; 4
    15e4:	13 c0       	rjmp	.+38     	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    15e6:	ec 81       	ldd	r30, Y+4	; 0x04
    15e8:	fd 81       	ldd	r31, Y+5	; 0x05
    15ea:	66 e0       	ldi	r22, 0x06	; 6
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    15ee:	ec 81       	ldd	r30, Y+4	; 0x04
    15f0:	fd 81       	ldd	r31, Y+5	; 0x05
    15f2:	62 e0       	ldi	r22, 0x02	; 2
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    15f6:	ec 81       	ldd	r30, Y+4	; 0x04
    15f8:	fd 81       	ldd	r31, Y+5	; 0x05
    15fa:	6a e0       	ldi	r22, 0x0A	; 10
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    15fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1600:	fd 81       	ldd	r31, Y+5	; 0x05
    1602:	68 e0       	ldi	r22, 0x08	; 8
    1604:	03 c0       	rjmp	.+6      	; 0x160c <_ZN12AccelStepper5step8El+0x68>
    1606:	ec 81       	ldd	r30, Y+4	; 0x04
    1608:	fd 81       	ldd	r31, Y+5	; 0x05
    160a:	69 e0       	ldi	r22, 0x09	; 9
    160c:	cd 01       	movw	r24, r26
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	19 94       	eijmp

00001614 <_ZN12AccelStepper13setOutputPinsEh>:
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	94 30       	cpi	r25, 0x04	; 4
    162a:	41 f0       	breq	.+16     	; 0x163c <_ZN12AccelStepper13setOutputPinsEh+0x28>
    162c:	98 30       	cpi	r25, 0x08	; 8
    162e:	31 f0       	breq	.+12     	; 0x163c <_ZN12AccelStepper13setOutputPinsEh+0x28>
    1630:	93 30       	cpi	r25, 0x03	; 3
    1632:	31 f0       	breq	.+12     	; 0x1640 <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    1634:	96 30       	cpi	r25, 0x06	; 6
    1636:	21 f0       	breq	.+8      	; 0x1640 <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    1638:	12 e0       	ldi	r17, 0x02	; 2
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <_ZN12AccelStepper13setOutputPinsEh+0x2e>
    163c:	14 e0       	ldi	r17, 0x04	; 4
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <_ZN12AccelStepper13setOutputPinsEh+0x2e>
    1640:	13 e0       	ldi	r17, 0x03	; 3
    1642:	24 96       	adiw	r28, 0x04	; 4
    1644:	e1 2c       	mov	r14, r1
    1646:	f1 2c       	mov	r15, r1
    1648:	c6 2e       	mov	r12, r22
    164a:	d1 2c       	mov	r13, r1
    164c:	01 e0       	ldi	r16, 0x01	; 1
    164e:	c6 01       	movw	r24, r12
    1650:	0e 2c       	mov	r0, r14
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_ZN12AccelStepper13setOutputPinsEh+0x44>
    1654:	95 95       	asr	r25
    1656:	87 95       	ror	r24
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <_ZN12AccelStepper13setOutputPinsEh+0x40>
    165c:	6c 81       	ldd	r22, Y+4	; 0x04
    165e:	80 fd       	sbrc	r24, 0
    1660:	60 27       	eor	r22, r16
    1662:	89 91       	ld	r24, Y+
    1664:	f4 dd       	rcall	.-1048   	; 0x124e <digitalWrite>
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	e8 1a       	sub	r14, r24
    166a:	f8 0a       	sbc	r15, r24
    166c:	e1 16       	cp	r14, r17
    166e:	78 f3       	brcs	.-34     	; 0x164e <_ZN12AccelStepper13setOutputPinsEh+0x3a>
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	df 90       	pop	r13
    167e:	cf 90       	pop	r12
    1680:	08 95       	ret

00001682 <_ZN12AccelStepper5step1El>:
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	ec 01       	movw	r28, r24
    1688:	e8 81       	ld	r30, Y
    168a:	f9 81       	ldd	r31, Y+1	; 0x01
    168c:	04 80       	ldd	r0, Z+4	; 0x04
    168e:	f5 81       	ldd	r31, Z+5	; 0x05
    1690:	e0 2d       	mov	r30, r0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	81 11       	cpse	r24, r1
    1696:	02 c0       	rjmp	.+4      	; 0x169c <_ZN12AccelStepper5step1El+0x1a>
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	01 c0       	rjmp	.+2      	; 0x169e <_ZN12AccelStepper5step1El+0x1c>
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	ce 01       	movw	r24, r28
    16a0:	19 95       	eicall
    16a2:	e8 81       	ld	r30, Y
    16a4:	f9 81       	ldd	r31, Y+1	; 0x01
    16a6:	04 80       	ldd	r0, Z+4	; 0x04
    16a8:	f5 81       	ldd	r31, Z+5	; 0x05
    16aa:	e0 2d       	mov	r30, r0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	81 11       	cpse	r24, r1
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <_ZN12AccelStepper5step1El+0x34>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <_ZN12AccelStepper5step1El+0x36>
    16b6:	63 e0       	ldi	r22, 0x03	; 3
    16b8:	ce 01       	movw	r24, r28
    16ba:	19 95       	eicall
    16bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    16be:	9d a5       	ldd	r25, Y+45	; 0x2d
    16c0:	c7 dc       	rcall	.-1650   	; 0x1050 <delayMicroseconds>
    16c2:	e8 81       	ld	r30, Y
    16c4:	f9 81       	ldd	r31, Y+1	; 0x01
    16c6:	04 80       	ldd	r0, Z+4	; 0x04
    16c8:	f5 81       	ldd	r31, Z+5	; 0x05
    16ca:	e0 2d       	mov	r30, r0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	81 11       	cpse	r24, r1
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <_ZN12AccelStepper5step1El+0x54>
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <_ZN12AccelStepper5step1El+0x56>
    16d6:	62 e0       	ldi	r22, 0x02	; 2
    16d8:	ce 01       	movw	r24, r28
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	19 94       	eijmp

000016e0 <_ZN12AccelStepper13enableOutputsEv>:
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	fc 01       	movw	r30, r24
    16e6:	23 81       	ldd	r18, Z+3	; 0x03
    16e8:	22 23       	and	r18, r18
    16ea:	29 f1       	breq	.+74     	; 0x1736 <_ZN12AccelStepper13enableOutputsEv+0x56>
    16ec:	ec 01       	movw	r28, r24
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	84 81       	ldd	r24, Z+4	; 0x04
    16f2:	71 dd       	rcall	.-1310   	; 0x11d6 <pinMode>
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	6e dd       	rcall	.-1316   	; 0x11d6 <pinMode>
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	11 f0       	breq	.+4      	; 0x1704 <_ZN12AccelStepper13enableOutputsEv+0x24>
    1700:	88 30       	cpi	r24, 0x08	; 8
    1702:	31 f4       	brne	.+12     	; 0x1710 <_ZN12AccelStepper13enableOutputsEv+0x30>
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	66 dd       	rcall	.-1332   	; 0x11d6 <pinMode>
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	06 c0       	rjmp	.+12     	; 0x171c <_ZN12AccelStepper13enableOutputsEv+0x3c>
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	11 f0       	breq	.+4      	; 0x1718 <_ZN12AccelStepper13enableOutputsEv+0x38>
    1714:	86 30       	cpi	r24, 0x06	; 6
    1716:	19 f4       	brne	.+6      	; 0x171e <_ZN12AccelStepper13enableOutputsEv+0x3e>
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	5c dd       	rcall	.-1352   	; 0x11d6 <pinMode>
    171e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1720:	8f 3f       	cpi	r24, 0xFF	; 255
    1722:	49 f0       	breq	.+18     	; 0x1736 <_ZN12AccelStepper13enableOutputsEv+0x56>
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	57 dd       	rcall	.-1362   	; 0x11d6 <pinMode>
    1728:	6e a5       	ldd	r22, Y+46	; 0x2e
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	68 27       	eor	r22, r24
    172e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	8c cd       	rjmp	.-1256   	; 0x124e <digitalWrite>
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <_ZN12AccelStepper14disableOutputsEv>:
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	fc 01       	movw	r30, r24
    1742:	23 81       	ldd	r18, Z+3	; 0x03
    1744:	22 23       	and	r18, r18
    1746:	99 f0       	breq	.+38     	; 0x176e <_ZN12AccelStepper14disableOutputsEv+0x32>
    1748:	ec 01       	movw	r28, r24
    174a:	01 90       	ld	r0, Z+
    174c:	f0 81       	ld	r31, Z
    174e:	e0 2d       	mov	r30, r0
    1750:	04 80       	ldd	r0, Z+4	; 0x04
    1752:	f5 81       	ldd	r31, Z+5	; 0x05
    1754:	e0 2d       	mov	r30, r0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	19 95       	eicall
    175a:	8f a5       	ldd	r24, Y+47	; 0x2f
    175c:	8f 3f       	cpi	r24, 0xFF	; 255
    175e:	39 f0       	breq	.+14     	; 0x176e <_ZN12AccelStepper14disableOutputsEv+0x32>
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	39 dd       	rcall	.-1422   	; 0x11d6 <pinMode>
    1764:	6e a5       	ldd	r22, Y+46	; 0x2e
    1766:	8f a5       	ldd	r24, Y+47	; 0x2f
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	70 cd       	rjmp	.-1312   	; 0x124e <digitalWrite>
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <_ZN12AccelStepper5step4El>:
    1774:	43 70       	andi	r20, 0x03	; 3
    1776:	55 27       	eor	r21, r21
    1778:	66 27       	eor	r22, r22
    177a:	77 27       	eor	r23, r23
    177c:	dc 01       	movw	r26, r24
    177e:	ed 91       	ld	r30, X+
    1780:	fc 91       	ld	r31, X
    1782:	04 80       	ldd	r0, Z+4	; 0x04
    1784:	f5 81       	ldd	r31, Z+5	; 0x05
    1786:	e0 2d       	mov	r30, r0
    1788:	42 30       	cpi	r20, 0x02	; 2
    178a:	51 05       	cpc	r21, r1
    178c:	61 05       	cpc	r22, r1
    178e:	71 05       	cpc	r23, r1
    1790:	71 f0       	breq	.+28     	; 0x17ae <_ZN12AccelStepper5step4El+0x3a>
    1792:	43 30       	cpi	r20, 0x03	; 3
    1794:	51 05       	cpc	r21, r1
    1796:	61 05       	cpc	r22, r1
    1798:	71 05       	cpc	r23, r1
    179a:	59 f0       	breq	.+22     	; 0x17b2 <_ZN12AccelStepper5step4El+0x3e>
    179c:	41 30       	cpi	r20, 0x01	; 1
    179e:	51 05       	cpc	r21, r1
    17a0:	61 05       	cpc	r22, r1
    17a2:	71 05       	cpc	r23, r1
    17a4:	11 f0       	breq	.+4      	; 0x17aa <_ZN12AccelStepper5step4El+0x36>
    17a6:	65 e0       	ldi	r22, 0x05	; 5
    17a8:	05 c0       	rjmp	.+10     	; 0x17b4 <_ZN12AccelStepper5step4El+0x40>
    17aa:	66 e0       	ldi	r22, 0x06	; 6
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <_ZN12AccelStepper5step4El+0x40>
    17ae:	6a e0       	ldi	r22, 0x0A	; 10
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <_ZN12AccelStepper5step4El+0x40>
    17b2:	69 e0       	ldi	r22, 0x09	; 9
    17b4:	19 94       	eijmp

000017b6 <_ZN12AccelStepper5step3El>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	ba 01       	movw	r22, r20
    17c0:	23 e0       	ldi	r18, 0x03	; 3
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	8d d7       	rcall	.+3866   	; 0x26e4 <__divmodsi4>
    17ca:	61 30       	cpi	r22, 0x01	; 1
    17cc:	71 05       	cpc	r23, r1
    17ce:	81 05       	cpc	r24, r1
    17d0:	91 05       	cpc	r25, r1
    17d2:	81 f0       	breq	.+32     	; 0x17f4 <_ZN12AccelStepper5step3El+0x3e>
    17d4:	62 30       	cpi	r22, 0x02	; 2
    17d6:	71 05       	cpc	r23, r1
    17d8:	81 05       	cpc	r24, r1
    17da:	91 05       	cpc	r25, r1
    17dc:	91 f0       	breq	.+36     	; 0x1802 <_ZN12AccelStepper5step3El+0x4c>
    17de:	67 2b       	or	r22, r23
    17e0:	68 2b       	or	r22, r24
    17e2:	69 2b       	or	r22, r25
    17e4:	c1 f4       	brne	.+48     	; 0x1816 <_ZN12AccelStepper5step3El+0x60>
    17e6:	e8 81       	ld	r30, Y
    17e8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ea:	04 80       	ldd	r0, Z+4	; 0x04
    17ec:	f5 81       	ldd	r31, Z+5	; 0x05
    17ee:	e0 2d       	mov	r30, r0
    17f0:	64 e0       	ldi	r22, 0x04	; 4
    17f2:	0d c0       	rjmp	.+26     	; 0x180e <_ZN12AccelStepper5step3El+0x58>
    17f4:	e8 81       	ld	r30, Y
    17f6:	f9 81       	ldd	r31, Y+1	; 0x01
    17f8:	04 80       	ldd	r0, Z+4	; 0x04
    17fa:	f5 81       	ldd	r31, Z+5	; 0x05
    17fc:	e0 2d       	mov	r30, r0
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	06 c0       	rjmp	.+12     	; 0x180e <_ZN12AccelStepper5step3El+0x58>
    1802:	e8 81       	ld	r30, Y
    1804:	f9 81       	ldd	r31, Y+1	; 0x01
    1806:	04 80       	ldd	r0, Z+4	; 0x04
    1808:	f5 81       	ldd	r31, Z+5	; 0x05
    180a:	e0 2d       	mov	r30, r0
    180c:	62 e0       	ldi	r22, 0x02	; 2
    180e:	ce 01       	movw	r24, r28
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	19 94       	eijmp
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <_ZN12AccelStepper5step2El>:
    181c:	43 70       	andi	r20, 0x03	; 3
    181e:	55 27       	eor	r21, r21
    1820:	66 27       	eor	r22, r22
    1822:	77 27       	eor	r23, r23
    1824:	dc 01       	movw	r26, r24
    1826:	ed 91       	ld	r30, X+
    1828:	fc 91       	ld	r31, X
    182a:	04 80       	ldd	r0, Z+4	; 0x04
    182c:	f5 81       	ldd	r31, Z+5	; 0x05
    182e:	e0 2d       	mov	r30, r0
    1830:	42 30       	cpi	r20, 0x02	; 2
    1832:	51 05       	cpc	r21, r1
    1834:	61 05       	cpc	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	71 f0       	breq	.+28     	; 0x1856 <_ZN12AccelStepper5step2El+0x3a>
    183a:	43 30       	cpi	r20, 0x03	; 3
    183c:	51 05       	cpc	r21, r1
    183e:	61 05       	cpc	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	59 f0       	breq	.+22     	; 0x185a <_ZN12AccelStepper5step2El+0x3e>
    1844:	41 30       	cpi	r20, 0x01	; 1
    1846:	51 05       	cpc	r21, r1
    1848:	61 05       	cpc	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	11 f0       	breq	.+4      	; 0x1852 <_ZN12AccelStepper5step2El+0x36>
    184e:	62 e0       	ldi	r22, 0x02	; 2
    1850:	05 c0       	rjmp	.+10     	; 0x185c <_ZN12AccelStepper5step2El+0x40>
    1852:	63 e0       	ldi	r22, 0x03	; 3
    1854:	03 c0       	rjmp	.+6      	; 0x185c <_ZN12AccelStepper5step2El+0x40>
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	01 c0       	rjmp	.+2      	; 0x185c <_ZN12AccelStepper5step2El+0x40>
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	19 94       	eijmp

0000185e <_ZN12AccelStepper5step0El>:
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	a9 01       	movw	r20, r18
    186a:	6c 89       	ldd	r22, Y+20	; 0x14
    186c:	7d 89       	ldd	r23, Y+21	; 0x15
    186e:	8e 89       	ldd	r24, Y+22	; 0x16
    1870:	9f 89       	ldd	r25, Y+23	; 0x17
    1872:	58 d6       	rcall	.+3248   	; 0x2524 <__gesf2>
    1874:	18 16       	cp	r1, r24
    1876:	1c f4       	brge	.+6      	; 0x187e <_ZN12AccelStepper5step0El+0x20>
    1878:	e8 a9       	ldd	r30, Y+48	; 0x30
    187a:	f9 a9       	ldd	r31, Y+49	; 0x31
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <_ZN12AccelStepper5step0El+0x24>
    187e:	ea a9       	ldd	r30, Y+50	; 0x32
    1880:	fb a9       	ldd	r31, Y+51	; 0x33
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	19 94       	eijmp

00001888 <_ZN12AccelStepper8runSpeedEv>:
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	fc 01       	movw	r30, r24
    1896:	44 a1       	ldd	r20, Z+36	; 0x24
    1898:	55 a1       	ldd	r21, Z+37	; 0x25
    189a:	66 a1       	ldd	r22, Z+38	; 0x26
    189c:	77 a1       	ldd	r23, Z+39	; 0x27
    189e:	45 2b       	or	r20, r21
    18a0:	46 2b       	or	r20, r22
    18a2:	47 2b       	or	r20, r23
    18a4:	11 f4       	brne	.+4      	; 0x18aa <_ZN12AccelStepper8runSpeedEv+0x22>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	39 c0       	rjmp	.+114    	; 0x191c <_ZN12AccelStepper8runSpeedEv+0x94>
    18aa:	ec 01       	movw	r28, r24
    18ac:	72 db       	rcall	.-2332   	; 0xf92 <micros>
    18ae:	6b 01       	movw	r12, r22
    18b0:	7c 01       	movw	r14, r24
    18b2:	88 a5       	ldd	r24, Y+40	; 0x28
    18b4:	99 a5       	ldd	r25, Y+41	; 0x29
    18b6:	aa a5       	ldd	r26, Y+42	; 0x2a
    18b8:	bb a5       	ldd	r27, Y+43	; 0x2b
    18ba:	b7 01       	movw	r22, r14
    18bc:	a6 01       	movw	r20, r12
    18be:	48 1b       	sub	r20, r24
    18c0:	59 0b       	sbc	r21, r25
    18c2:	6a 0b       	sbc	r22, r26
    18c4:	7b 0b       	sbc	r23, r27
    18c6:	8c a1       	ldd	r24, Y+36	; 0x24
    18c8:	9d a1       	ldd	r25, Y+37	; 0x25
    18ca:	ae a1       	ldd	r26, Y+38	; 0x26
    18cc:	bf a1       	ldd	r27, Y+39	; 0x27
    18ce:	48 17       	cp	r20, r24
    18d0:	59 07       	cpc	r21, r25
    18d2:	6a 07       	cpc	r22, r26
    18d4:	7b 07       	cpc	r23, r27
    18d6:	38 f3       	brcs	.-50     	; 0x18a6 <_ZN12AccelStepper8runSpeedEv+0x1e>
    18d8:	2a 81       	ldd	r18, Y+2	; 0x02
    18da:	8c 85       	ldd	r24, Y+12	; 0x0c
    18dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    18de:	ae 85       	ldd	r26, Y+14	; 0x0e
    18e0:	bf 85       	ldd	r27, Y+15	; 0x0f
    18e2:	22 23       	and	r18, r18
    18e4:	21 f0       	breq	.+8      	; 0x18ee <_ZN12AccelStepper8runSpeedEv+0x66>
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	b1 1d       	adc	r27, r1
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <_ZN12AccelStepper8runSpeedEv+0x6c>
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	a1 09       	sbc	r26, r1
    18f2:	b1 09       	sbc	r27, r1
    18f4:	8c 87       	std	Y+12, r24	; 0x0c
    18f6:	9d 87       	std	Y+13, r25	; 0x0d
    18f8:	ae 87       	std	Y+14, r26	; 0x0e
    18fa:	bf 87       	std	Y+15, r27	; 0x0f
    18fc:	4c 85       	ldd	r20, Y+12	; 0x0c
    18fe:	5d 85       	ldd	r21, Y+13	; 0x0d
    1900:	6e 85       	ldd	r22, Y+14	; 0x0e
    1902:	7f 85       	ldd	r23, Y+15	; 0x0f
    1904:	e8 81       	ld	r30, Y
    1906:	f9 81       	ldd	r31, Y+1	; 0x01
    1908:	06 80       	ldd	r0, Z+6	; 0x06
    190a:	f7 81       	ldd	r31, Z+7	; 0x07
    190c:	e0 2d       	mov	r30, r0
    190e:	ce 01       	movw	r24, r28
    1910:	19 95       	eicall
    1912:	c8 a6       	std	Y+40, r12	; 0x28
    1914:	d9 a6       	std	Y+41, r13	; 0x29
    1916:	ea a6       	std	Y+42, r14	; 0x2a
    1918:	fb a6       	std	Y+43, r15	; 0x2b
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	df 90       	pop	r13
    1926:	cf 90       	pop	r12
    1928:	08 95       	ret

0000192a <_ZN12AccelStepper12distanceToGoEv>:
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	fc 01       	movw	r30, r24
    1930:	80 89       	ldd	r24, Z+16	; 0x10
    1932:	91 89       	ldd	r25, Z+17	; 0x11
    1934:	a2 89       	ldd	r26, Z+18	; 0x12
    1936:	b3 89       	ldd	r27, Z+19	; 0x13
    1938:	04 85       	ldd	r16, Z+12	; 0x0c
    193a:	15 85       	ldd	r17, Z+13	; 0x0d
    193c:	26 85       	ldd	r18, Z+14	; 0x0e
    193e:	37 85       	ldd	r19, Z+15	; 0x0f
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	60 1b       	sub	r22, r16
    1946:	71 0b       	sbc	r23, r17
    1948:	82 0b       	sbc	r24, r18
    194a:	93 0b       	sbc	r25, r19
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <_ZN12AccelStepper15currentPositionEv>:
    1952:	fc 01       	movw	r30, r24
    1954:	64 85       	ldd	r22, Z+12	; 0x0c
    1956:	75 85       	ldd	r23, Z+13	; 0x0d
    1958:	86 85       	ldd	r24, Z+14	; 0x0e
    195a:	97 85       	ldd	r25, Z+15	; 0x0f
    195c:	08 95       	ret

0000195e <_ZN12AccelStepper18setCurrentPositionEl>:
    195e:	fc 01       	movw	r30, r24
    1960:	44 87       	std	Z+12, r20	; 0x0c
    1962:	55 87       	std	Z+13, r21	; 0x0d
    1964:	66 87       	std	Z+14, r22	; 0x0e
    1966:	77 87       	std	Z+15, r23	; 0x0f
    1968:	40 8b       	std	Z+16, r20	; 0x10
    196a:	51 8b       	std	Z+17, r21	; 0x11
    196c:	62 8b       	std	Z+18, r22	; 0x12
    196e:	73 8b       	std	Z+19, r23	; 0x13
    1970:	14 aa       	std	Z+52, r1	; 0x34
    1972:	15 aa       	std	Z+53, r1	; 0x35
    1974:	16 aa       	std	Z+54, r1	; 0x36
    1976:	17 aa       	std	Z+55, r1	; 0x37
    1978:	14 a2       	std	Z+36, r1	; 0x24
    197a:	15 a2       	std	Z+37, r1	; 0x25
    197c:	16 a2       	std	Z+38, r1	; 0x26
    197e:	17 a2       	std	Z+39, r1	; 0x27
    1980:	14 8a       	std	Z+20, r1	; 0x14
    1982:	15 8a       	std	Z+21, r1	; 0x15
    1984:	16 8a       	std	Z+22, r1	; 0x16
    1986:	17 8a       	std	Z+23, r1	; 0x17
    1988:	08 95       	ret

0000198a <_ZN12AccelStepper15computeNewSpeedEv>:
    198a:	4f 92       	push	r4
    198c:	5f 92       	push	r5
    198e:	6f 92       	push	r6
    1990:	7f 92       	push	r7
    1992:	8f 92       	push	r8
    1994:	9f 92       	push	r9
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ec 01       	movw	r28, r24
    19ac:	c8 88       	ldd	r12, Y+16	; 0x10
    19ae:	d9 88       	ldd	r13, Y+17	; 0x11
    19b0:	ea 88       	ldd	r14, Y+18	; 0x12
    19b2:	fb 88       	ldd	r15, Y+19	; 0x13
    19b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b8:	ae 85       	ldd	r26, Y+14	; 0x0e
    19ba:	bf 85       	ldd	r27, Y+15	; 0x0f
    19bc:	c8 1a       	sub	r12, r24
    19be:	d9 0a       	sbc	r13, r25
    19c0:	ea 0a       	sbc	r14, r26
    19c2:	fb 0a       	sbc	r15, r27
    19c4:	6c 89       	ldd	r22, Y+20	; 0x14
    19c6:	7d 89       	ldd	r23, Y+21	; 0x15
    19c8:	8e 89       	ldd	r24, Y+22	; 0x16
    19ca:	9f 89       	ldd	r25, Y+23	; 0x17
    19cc:	9b 01       	movw	r18, r22
    19ce:	ac 01       	movw	r20, r24
    19d0:	ad d5       	rcall	.+2906   	; 0x252c <__mulsf3>
    19d2:	4b 01       	movw	r8, r22
    19d4:	5c 01       	movw	r10, r24
    19d6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    19d8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    19da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19de:	9b 01       	movw	r18, r22
    19e0:	ac 01       	movw	r20, r24
    19e2:	ed d3       	rcall	.+2010   	; 0x21be <__addsf3>
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	c5 01       	movw	r24, r10
    19ea:	b4 01       	movw	r22, r8
    19ec:	50 d4       	rcall	.+2208   	; 0x228e <__divsf3>
    19ee:	b7 d4       	rcall	.+2414   	; 0x235e <__fixsfsi>
    19f0:	c1 14       	cp	r12, r1
    19f2:	d1 04       	cpc	r13, r1
    19f4:	e1 04       	cpc	r14, r1
    19f6:	f1 04       	cpc	r15, r1
    19f8:	99 f4       	brne	.+38     	; 0x1a20 <_ZN12AccelStepper15computeNewSpeedEv+0x96>
    19fa:	62 30       	cpi	r22, 0x02	; 2
    19fc:	71 05       	cpc	r23, r1
    19fe:	81 05       	cpc	r24, r1
    1a00:	91 05       	cpc	r25, r1
    1a02:	0c f0       	brlt	.+2      	; 0x1a06 <_ZN12AccelStepper15computeNewSpeedEv+0x7c>
    1a04:	76 c0       	rjmp	.+236    	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1a06:	1c a2       	std	Y+36, r1	; 0x24
    1a08:	1d a2       	std	Y+37, r1	; 0x25
    1a0a:	1e a2       	std	Y+38, r1	; 0x26
    1a0c:	1f a2       	std	Y+39, r1	; 0x27
    1a0e:	1c 8a       	std	Y+20, r1	; 0x14
    1a10:	1d 8a       	std	Y+21, r1	; 0x15
    1a12:	1e 8a       	std	Y+22, r1	; 0x16
    1a14:	1f 8a       	std	Y+23, r1	; 0x17
    1a16:	1c aa       	std	Y+52, r1	; 0x34
    1a18:	1d aa       	std	Y+53, r1	; 0x35
    1a1a:	1e aa       	std	Y+54, r1	; 0x36
    1a1c:	1f aa       	std	Y+55, r1	; 0x37
    1a1e:	e4 c0       	rjmp	.+456    	; 0x1be8 <_ZN12AccelStepper15computeNewSpeedEv+0x25e>
    1a20:	0c a9       	ldd	r16, Y+52	; 0x34
    1a22:	1d a9       	ldd	r17, Y+53	; 0x35
    1a24:	2e a9       	ldd	r18, Y+54	; 0x36
    1a26:	3f a9       	ldd	r19, Y+55	; 0x37
    1a28:	1c 14       	cp	r1, r12
    1a2a:	1d 04       	cpc	r1, r13
    1a2c:	1e 04       	cpc	r1, r14
    1a2e:	1f 04       	cpc	r1, r15
    1a30:	fc f4       	brge	.+62     	; 0x1a70 <_ZN12AccelStepper15computeNewSpeedEv+0xe6>
    1a32:	10 16       	cp	r1, r16
    1a34:	11 06       	cpc	r1, r17
    1a36:	12 06       	cpc	r1, r18
    1a38:	13 06       	cpc	r1, r19
    1a3a:	4c f4       	brge	.+18     	; 0x1a4e <_ZN12AccelStepper15computeNewSpeedEv+0xc4>
    1a3c:	6c 15       	cp	r22, r12
    1a3e:	7d 05       	cpc	r23, r13
    1a40:	8e 05       	cpc	r24, r14
    1a42:	9f 05       	cpc	r25, r15
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <_ZN12AccelStepper15computeNewSpeedEv+0x10e>
    1a46:	2a 81       	ldd	r18, Y+2	; 0x02
    1a48:	21 11       	cpse	r18, r1
    1a4a:	53 c0       	rjmp	.+166    	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1a4c:	25 c0       	rjmp	.+74     	; 0x1a98 <_ZN12AccelStepper15computeNewSpeedEv+0x10e>
    1a4e:	01 15       	cp	r16, r1
    1a50:	11 05       	cpc	r17, r1
    1a52:	21 05       	cpc	r18, r1
    1a54:	31 05       	cpc	r19, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <_ZN12AccelStepper15computeNewSpeedEv+0xd0>
    1a58:	4c c0       	rjmp	.+152    	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1a5a:	6c 15       	cp	r22, r12
    1a5c:	7d 05       	cpc	r23, r13
    1a5e:	8e 05       	cpc	r24, r14
    1a60:	9f 05       	cpc	r25, r15
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <_ZN12AccelStepper15computeNewSpeedEv+0xdc>
    1a64:	46 c0       	rjmp	.+140    	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <_ZN12AccelStepper15computeNewSpeedEv+0xe4>
    1a6c:	42 c0       	rjmp	.+132    	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1a6e:	36 c0       	rjmp	.+108    	; 0x1adc <_ZN12AccelStepper15computeNewSpeedEv+0x152>
    1a70:	10 16       	cp	r1, r16
    1a72:	11 06       	cpc	r1, r17
    1a74:	12 06       	cpc	r1, r18
    1a76:	13 06       	cpc	r1, r19
    1a78:	ec f4       	brge	.+58     	; 0x1ab4 <_ZN12AccelStepper15computeNewSpeedEv+0x12a>
    1a7a:	00 27       	eor	r16, r16
    1a7c:	11 27       	eor	r17, r17
    1a7e:	98 01       	movw	r18, r16
    1a80:	0c 19       	sub	r16, r12
    1a82:	1d 09       	sbc	r17, r13
    1a84:	2e 09       	sbc	r18, r14
    1a86:	3f 09       	sbc	r19, r15
    1a88:	60 17       	cp	r22, r16
    1a8a:	71 07       	cpc	r23, r17
    1a8c:	82 07       	cpc	r24, r18
    1a8e:	93 07       	cpc	r25, r19
    1a90:	1c f4       	brge	.+6      	; 0x1a98 <_ZN12AccelStepper15computeNewSpeedEv+0x10e>
    1a92:	2a 81       	ldd	r18, Y+2	; 0x02
    1a94:	22 23       	and	r18, r18
    1a96:	69 f1       	breq	.+90     	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	88 27       	eor	r24, r24
    1a9e:	99 27       	eor	r25, r25
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	82 1b       	sub	r24, r18
    1aa4:	93 0b       	sbc	r25, r19
    1aa6:	a4 0b       	sbc	r26, r20
    1aa8:	b5 0b       	sbc	r27, r21
    1aaa:	8c ab       	std	Y+52, r24	; 0x34
    1aac:	9d ab       	std	Y+53, r25	; 0x35
    1aae:	ae ab       	std	Y+54, r26	; 0x36
    1ab0:	bf ab       	std	Y+55, r27	; 0x37
    1ab2:	1f c0       	rjmp	.+62     	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1ab4:	01 15       	cp	r16, r1
    1ab6:	11 05       	cpc	r17, r1
    1ab8:	21 05       	cpc	r18, r1
    1aba:	31 05       	cpc	r19, r1
    1abc:	d1 f0       	breq	.+52     	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1abe:	88 24       	eor	r8, r8
    1ac0:	99 24       	eor	r9, r9
    1ac2:	54 01       	movw	r10, r8
    1ac4:	8c 18       	sub	r8, r12
    1ac6:	9d 08       	sbc	r9, r13
    1ac8:	ae 08       	sbc	r10, r14
    1aca:	bf 08       	sbc	r11, r15
    1acc:	68 15       	cp	r22, r8
    1ace:	79 05       	cpc	r23, r9
    1ad0:	8a 05       	cpc	r24, r10
    1ad2:	9b 05       	cpc	r25, r11
    1ad4:	74 f4       	brge	.+28     	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	81 11       	cpse	r24, r1
    1ada:	0b c0       	rjmp	.+22     	; 0x1af2 <_ZN12AccelStepper15computeNewSpeedEv+0x168>
    1adc:	30 95       	com	r19
    1ade:	20 95       	com	r18
    1ae0:	10 95       	com	r17
    1ae2:	01 95       	neg	r16
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	2f 4f       	sbci	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	0c ab       	std	Y+52, r16	; 0x34
    1aec:	1d ab       	std	Y+53, r17	; 0x35
    1aee:	2e ab       	std	Y+54, r18	; 0x36
    1af0:	3f ab       	std	Y+55, r19	; 0x37
    1af2:	8c a8       	ldd	r8, Y+52	; 0x34
    1af4:	9d a8       	ldd	r9, Y+53	; 0x35
    1af6:	ae a8       	ldd	r10, Y+54	; 0x36
    1af8:	bf a8       	ldd	r11, Y+55	; 0x37
    1afa:	81 14       	cp	r8, r1
    1afc:	91 04       	cpc	r9, r1
    1afe:	a1 04       	cpc	r10, r1
    1b00:	b1 04       	cpc	r11, r1
    1b02:	89 f4       	brne	.+34     	; 0x1b26 <_ZN12AccelStepper15computeNewSpeedEv+0x19c>
    1b04:	88 ad       	ldd	r24, Y+56	; 0x38
    1b06:	99 ad       	ldd	r25, Y+57	; 0x39
    1b08:	aa ad       	ldd	r26, Y+58	; 0x3a
    1b0a:	bb ad       	ldd	r27, Y+59	; 0x3b
    1b0c:	8c af       	std	Y+60, r24	; 0x3c
    1b0e:	9d af       	std	Y+61, r25	; 0x3d
    1b10:	ae af       	std	Y+62, r26	; 0x3e
    1b12:	bf af       	std	Y+63, r27	; 0x3f
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	1c 14       	cp	r1, r12
    1b18:	1d 04       	cpc	r1, r13
    1b1a:	1e 04       	cpc	r1, r14
    1b1c:	1f 04       	cpc	r1, r15
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <_ZN12AccelStepper15computeNewSpeedEv+0x198>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	8a 83       	std	Y+2, r24	; 0x02
    1b24:	38 c0       	rjmp	.+112    	; 0x1b96 <_ZN12AccelStepper15computeNewSpeedEv+0x20c>
    1b26:	cc ac       	ldd	r12, Y+60	; 0x3c
    1b28:	dd ac       	ldd	r13, Y+61	; 0x3d
    1b2a:	ee ac       	ldd	r14, Y+62	; 0x3e
    1b2c:	ff ac       	ldd	r15, Y+63	; 0x3f
    1b2e:	a7 01       	movw	r20, r14
    1b30:	96 01       	movw	r18, r12
    1b32:	c7 01       	movw	r24, r14
    1b34:	b6 01       	movw	r22, r12
    1b36:	43 d3       	rcall	.+1670   	; 0x21be <__addsf3>
    1b38:	2b 01       	movw	r4, r22
    1b3a:	3c 01       	movw	r6, r24
    1b3c:	c5 01       	movw	r24, r10
    1b3e:	b4 01       	movw	r22, r8
    1b40:	41 d4       	rcall	.+2178   	; 0x23c4 <__floatsisf>
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	50 e4       	ldi	r21, 0x40	; 64
    1b4a:	f0 d4       	rcall	.+2528   	; 0x252c <__mulsf3>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	34 d3       	rcall	.+1640   	; 0x21be <__addsf3>
    1b56:	9b 01       	movw	r18, r22
    1b58:	ac 01       	movw	r20, r24
    1b5a:	c3 01       	movw	r24, r6
    1b5c:	b2 01       	movw	r22, r4
    1b5e:	97 d3       	rcall	.+1838   	; 0x228e <__divsf3>
    1b60:	9b 01       	movw	r18, r22
    1b62:	ac 01       	movw	r20, r24
    1b64:	c7 01       	movw	r24, r14
    1b66:	b6 01       	movw	r22, r12
    1b68:	29 d3       	rcall	.+1618   	; 0x21bc <__subsf3>
    1b6a:	3b 01       	movw	r6, r22
    1b6c:	6c 01       	movw	r12, r24
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e0 5c       	subi	r30, 0xC0	; 192
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	e0 80       	ld	r14, Z
    1b76:	f1 80       	ldd	r15, Z+1	; 0x01
    1b78:	02 81       	ldd	r16, Z+2	; 0x02
    1b7a:	13 81       	ldd	r17, Z+3	; 0x03
    1b7c:	97 01       	movw	r18, r14
    1b7e:	a8 01       	movw	r20, r16
    1b80:	d1 d4       	rcall	.+2466   	; 0x2524 <__gesf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	14 f4       	brge	.+4      	; 0x1b8a <_ZN12AccelStepper15computeNewSpeedEv+0x200>
    1b86:	73 01       	movw	r14, r6
    1b88:	86 01       	movw	r16, r12
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	d8 01       	movw	r26, r16
    1b8e:	8c af       	std	Y+60, r24	; 0x3c
    1b90:	9d af       	std	Y+61, r25	; 0x3d
    1b92:	ae af       	std	Y+62, r26	; 0x3e
    1b94:	bf af       	std	Y+63, r27	; 0x3f
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	83 1a       	sub	r8, r19
    1b9a:	93 0a       	sbc	r9, r19
    1b9c:	a3 0a       	sbc	r10, r19
    1b9e:	b3 0a       	sbc	r11, r19
    1ba0:	8c aa       	std	Y+52, r8	; 0x34
    1ba2:	9d aa       	std	Y+53, r9	; 0x35
    1ba4:	ae aa       	std	Y+54, r10	; 0x36
    1ba6:	bf aa       	std	Y+55, r11	; 0x37
    1ba8:	cc ac       	ldd	r12, Y+60	; 0x3c
    1baa:	dd ac       	ldd	r13, Y+61	; 0x3d
    1bac:	ee ac       	ldd	r14, Y+62	; 0x3e
    1bae:	ff ac       	ldd	r15, Y+63	; 0x3f
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	d9 d3       	rcall	.+1970   	; 0x2368 <__fixunssfsi>
    1bb6:	6c a3       	std	Y+36, r22	; 0x24
    1bb8:	7d a3       	std	Y+37, r23	; 0x25
    1bba:	8e a3       	std	Y+38, r24	; 0x26
    1bbc:	9f a3       	std	Y+39, r25	; 0x27
    1bbe:	a7 01       	movw	r20, r14
    1bc0:	96 01       	movw	r18, r12
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	74 e2       	ldi	r23, 0x24	; 36
    1bc6:	84 e7       	ldi	r24, 0x74	; 116
    1bc8:	99 e4       	ldi	r25, 0x49	; 73
    1bca:	61 d3       	rcall	.+1730   	; 0x228e <__divsf3>
    1bcc:	6c 8b       	std	Y+20, r22	; 0x14
    1bce:	7d 8b       	std	Y+21, r23	; 0x15
    1bd0:	8e 8b       	std	Y+22, r24	; 0x16
    1bd2:	9f 8b       	std	Y+23, r25	; 0x17
    1bd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd6:	21 11       	cpse	r18, r1
    1bd8:	07 c0       	rjmp	.+14     	; 0x1be8 <_ZN12AccelStepper15computeNewSpeedEv+0x25e>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	b0 58       	subi	r27, 0x80	; 128
    1be0:	8c 8b       	std	Y+20, r24	; 0x14
    1be2:	9d 8b       	std	Y+21, r25	; 0x15
    1be4:	ae 8b       	std	Y+22, r26	; 0x16
    1be6:	bf 8b       	std	Y+23, r27	; 0x17
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	7f 90       	pop	r7
    1c02:	6f 90       	pop	r6
    1c04:	5f 90       	pop	r5
    1c06:	4f 90       	pop	r4
    1c08:	08 95       	ret

00001c0a <_ZN12AccelStepper6moveToEl>:
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	fc 01       	movw	r30, r24
    1c10:	00 89       	ldd	r16, Z+16	; 0x10
    1c12:	11 89       	ldd	r17, Z+17	; 0x11
    1c14:	22 89       	ldd	r18, Z+18	; 0x12
    1c16:	33 89       	ldd	r19, Z+19	; 0x13
    1c18:	04 17       	cp	r16, r20
    1c1a:	15 07       	cpc	r17, r21
    1c1c:	26 07       	cpc	r18, r22
    1c1e:	37 07       	cpc	r19, r23
    1c20:	39 f0       	breq	.+14     	; 0x1c30 <_ZN12AccelStepper6moveToEl+0x26>
    1c22:	40 8b       	std	Z+16, r20	; 0x10
    1c24:	51 8b       	std	Z+17, r21	; 0x11
    1c26:	62 8b       	std	Z+18, r22	; 0x12
    1c28:	73 8b       	std	Z+19, r23	; 0x13
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ad ce       	rjmp	.-678    	; 0x198a <_ZN12AccelStepper15computeNewSpeedEv>
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <_ZN12AccelStepper15setAccelerationEf.part.8>:
    1c36:	4f 92       	push	r4
    1c38:	5f 92       	push	r5
    1c3a:	6f 92       	push	r6
    1c3c:	7f 92       	push	r7
    1c3e:	8f 92       	push	r8
    1c40:	9f 92       	push	r9
    1c42:	af 92       	push	r10
    1c44:	bf 92       	push	r11
    1c46:	cf 92       	push	r12
    1c48:	df 92       	push	r13
    1c4a:	ef 92       	push	r14
    1c4c:	ff 92       	push	r15
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	ec 01       	movw	r28, r24
    1c54:	6a 01       	movw	r12, r20
    1c56:	7b 01       	movw	r14, r22
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	a9 01       	movw	r20, r18
    1c5e:	c7 01       	movw	r24, r14
    1c60:	b6 01       	movw	r22, r12
    1c62:	11 d3       	rcall	.+1570   	; 0x2286 <__cmpsf2>
    1c64:	87 ff       	sbrs	r24, 7
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <_ZN12AccelStepper15setAccelerationEf.part.8+0x3a>
    1c68:	f7 fa       	bst	r15, 7
    1c6a:	f0 94       	com	r15
    1c6c:	f7 f8       	bld	r15, 7
    1c6e:	f0 94       	com	r15
    1c70:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1c72:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1c74:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1c76:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1c78:	a7 01       	movw	r20, r14
    1c7a:	96 01       	movw	r18, r12
    1c7c:	c5 01       	movw	r24, r10
    1c7e:	b4 01       	movw	r22, r8
    1c80:	02 d3       	rcall	.+1540   	; 0x2286 <__cmpsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <_ZN12AccelStepper15setAccelerationEf.part.8+0x52>
    1c86:	40 c0       	rjmp	.+128    	; 0x1d08 <_ZN12AccelStepper15setAccelerationEf.part.8+0xd2>
    1c88:	6c a9       	ldd	r22, Y+52	; 0x34
    1c8a:	7d a9       	ldd	r23, Y+53	; 0x35
    1c8c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c8e:	9f a9       	ldd	r25, Y+55	; 0x37
    1c90:	99 d3       	rcall	.+1842   	; 0x23c4 <__floatsisf>
    1c92:	2b 01       	movw	r4, r22
    1c94:	3c 01       	movw	r6, r24
    1c96:	a7 01       	movw	r20, r14
    1c98:	96 01       	movw	r18, r12
    1c9a:	c5 01       	movw	r24, r10
    1c9c:	b4 01       	movw	r22, r8
    1c9e:	f7 d2       	rcall	.+1518   	; 0x228e <__divsf3>
    1ca0:	9b 01       	movw	r18, r22
    1ca2:	ac 01       	movw	r20, r24
    1ca4:	c3 01       	movw	r24, r6
    1ca6:	b2 01       	movw	r22, r4
    1ca8:	41 d4       	rcall	.+2178   	; 0x252c <__mulsf3>
    1caa:	59 d3       	rcall	.+1714   	; 0x235e <__fixsfsi>
    1cac:	6c ab       	std	Y+52, r22	; 0x34
    1cae:	7d ab       	std	Y+53, r23	; 0x35
    1cb0:	8e ab       	std	Y+54, r24	; 0x36
    1cb2:	9f ab       	std	Y+55, r25	; 0x37
    1cb4:	a7 01       	movw	r20, r14
    1cb6:	96 01       	movw	r18, r12
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e4       	ldi	r25, 0x40	; 64
    1cc0:	e6 d2       	rcall	.+1484   	; 0x228e <__divsf3>
    1cc2:	9b d4       	rcall	.+2358   	; 0x25fa <sqrt>
    1cc4:	26 e5       	ldi	r18, 0x56	; 86
    1cc6:	3e e0       	ldi	r19, 0x0E	; 14
    1cc8:	4d e2       	ldi	r20, 0x2D	; 45
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	2f d4       	rcall	.+2142   	; 0x252c <__mulsf3>
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	34 e2       	ldi	r19, 0x24	; 36
    1cd2:	44 e7       	ldi	r20, 0x74	; 116
    1cd4:	59 e4       	ldi	r21, 0x49	; 73
    1cd6:	2a d4       	rcall	.+2132   	; 0x252c <__mulsf3>
    1cd8:	68 af       	std	Y+56, r22	; 0x38
    1cda:	79 af       	std	Y+57, r23	; 0x39
    1cdc:	8a af       	std	Y+58, r24	; 0x3a
    1cde:	9b af       	std	Y+59, r25	; 0x3b
    1ce0:	cc 8e       	std	Y+28, r12	; 0x1c
    1ce2:	dd 8e       	std	Y+29, r13	; 0x1d
    1ce4:	ee 8e       	std	Y+30, r14	; 0x1e
    1ce6:	ff 8e       	std	Y+31, r15	; 0x1f
    1ce8:	ce 01       	movw	r24, r28
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	9f 90       	pop	r9
    1cfc:	8f 90       	pop	r8
    1cfe:	7f 90       	pop	r7
    1d00:	6f 90       	pop	r6
    1d02:	5f 90       	pop	r5
    1d04:	4f 90       	pop	r4
    1d06:	41 ce       	rjmp	.-894    	; 0x198a <_ZN12AccelStepper15computeNewSpeedEv>
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	df 90       	pop	r13
    1d12:	cf 90       	pop	r12
    1d14:	bf 90       	pop	r11
    1d16:	af 90       	pop	r10
    1d18:	9f 90       	pop	r9
    1d1a:	8f 90       	pop	r8
    1d1c:	7f 90       	pop	r7
    1d1e:	6f 90       	pop	r6
    1d20:	5f 90       	pop	r5
    1d22:	4f 90       	pop	r4
    1d24:	08 95       	ret

00001d26 <_ZN12AccelStepperC1Ehhhhhb>:
    1d26:	cf 92       	push	r12
    1d28:	ef 92       	push	r14
    1d2a:	0f 93       	push	r16
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
    1d32:	89 e4       	ldi	r24, 0x49	; 73
    1d34:	92 e0       	ldi	r25, 0x02	; 2
    1d36:	99 83       	std	Y+1, r25	; 0x01
    1d38:	88 83       	st	Y, r24
    1d3a:	6b 83       	std	Y+3, r22	; 0x03
    1d3c:	1c 86       	std	Y+12, r1	; 0x0c
    1d3e:	1d 86       	std	Y+13, r1	; 0x0d
    1d40:	1e 86       	std	Y+14, r1	; 0x0e
    1d42:	1f 86       	std	Y+15, r1	; 0x0f
    1d44:	18 8a       	std	Y+16, r1	; 0x10
    1d46:	19 8a       	std	Y+17, r1	; 0x11
    1d48:	1a 8a       	std	Y+18, r1	; 0x12
    1d4a:	1b 8a       	std	Y+19, r1	; 0x13
    1d4c:	1c 8a       	std	Y+20, r1	; 0x14
    1d4e:	1d 8a       	std	Y+21, r1	; 0x15
    1d50:	1e 8a       	std	Y+22, r1	; 0x16
    1d52:	1f 8a       	std	Y+23, r1	; 0x17
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	88 8f       	std	Y+24, r24	; 0x18
    1d5e:	99 8f       	std	Y+25, r25	; 0x19
    1d60:	aa 8f       	std	Y+26, r26	; 0x1a
    1d62:	bb 8f       	std	Y+27, r27	; 0x1b
    1d64:	1c 8e       	std	Y+28, r1	; 0x1c
    1d66:	1d 8e       	std	Y+29, r1	; 0x1d
    1d68:	1e 8e       	std	Y+30, r1	; 0x1e
    1d6a:	1f 8e       	std	Y+31, r1	; 0x1f
    1d6c:	88 a3       	std	Y+32, r24	; 0x20
    1d6e:	99 a3       	std	Y+33, r25	; 0x21
    1d70:	aa a3       	std	Y+34, r26	; 0x22
    1d72:	bb a3       	std	Y+35, r27	; 0x23
    1d74:	1c a2       	std	Y+36, r1	; 0x24
    1d76:	1d a2       	std	Y+37, r1	; 0x25
    1d78:	1e a2       	std	Y+38, r1	; 0x26
    1d7a:	1f a2       	std	Y+39, r1	; 0x27
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	7d a7       	std	Y+45, r23	; 0x2d
    1d82:	6c a7       	std	Y+44, r22	; 0x2c
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	3f a7       	std	Y+47, r19	; 0x2f
    1d88:	18 a6       	std	Y+40, r1	; 0x28
    1d8a:	19 a6       	std	Y+41, r1	; 0x29
    1d8c:	1a a6       	std	Y+42, r1	; 0x2a
    1d8e:	1b a6       	std	Y+43, r1	; 0x2b
    1d90:	4c 83       	std	Y+4, r20	; 0x04
    1d92:	2d 83       	std	Y+5, r18	; 0x05
    1d94:	0e 83       	std	Y+6, r16	; 0x06
    1d96:	ef 82       	std	Y+7, r14	; 0x07
    1d98:	1e a6       	std	Y+46, r1	; 0x2e
    1d9a:	1c aa       	std	Y+52, r1	; 0x34
    1d9c:	1d aa       	std	Y+53, r1	; 0x35
    1d9e:	1e aa       	std	Y+54, r1	; 0x36
    1da0:	1f aa       	std	Y+55, r1	; 0x37
    1da2:	18 ae       	std	Y+56, r1	; 0x38
    1da4:	19 ae       	std	Y+57, r1	; 0x39
    1da6:	1a ae       	std	Y+58, r1	; 0x3a
    1da8:	1b ae       	std	Y+59, r1	; 0x3b
    1daa:	1c ae       	std	Y+60, r1	; 0x3c
    1dac:	1d ae       	std	Y+61, r1	; 0x3d
    1dae:	1e ae       	std	Y+62, r1	; 0x3e
    1db0:	1f ae       	std	Y+63, r1	; 0x3f
    1db2:	fe 01       	movw	r30, r28
    1db4:	e0 5c       	subi	r30, 0xC0	; 192
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 83       	st	Z, r24
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	a2 83       	std	Z+2, r26	; 0x02
    1dbe:	b3 83       	std	Z+3, r27	; 0x03
    1dc0:	1a 82       	std	Y+2, r1	; 0x02
    1dc2:	18 86       	std	Y+8, r1	; 0x08
    1dc4:	19 86       	std	Y+9, r1	; 0x09
    1dc6:	1a 86       	std	Y+10, r1	; 0x0a
    1dc8:	1b 86       	std	Y+11, r1	; 0x0b
    1dca:	cc 20       	and	r12, r12
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <_ZN12AccelStepperC1Ehhhhhb+0xac>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	87 dc       	rcall	.-1778   	; 0x16e0 <_ZN12AccelStepper13enableOutputsEv>
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	50 e0       	ldi	r21, 0x00	; 0
    1dd6:	60 e8       	ldi	r22, 0x80	; 128
    1dd8:	7f e3       	ldi	r23, 0x3F	; 63
    1dda:	ce 01       	movw	r24, r28
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	0f 91       	pop	r16
    1de2:	ef 90       	pop	r14
    1de4:	cf 90       	pop	r12
    1de6:	27 cf       	rjmp	.-434    	; 0x1c36 <_ZN12AccelStepper15setAccelerationEf.part.8>

00001de8 <_ZN12AccelStepper11setMaxSpeedEf>:
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	ec 01       	movw	r28, r24
    1dfa:	6a 01       	movw	r12, r20
    1dfc:	7b 01       	movw	r14, r22
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	a9 01       	movw	r20, r18
    1e04:	c7 01       	movw	r24, r14
    1e06:	b6 01       	movw	r22, r12
    1e08:	3e d2       	rcall	.+1148   	; 0x2286 <__cmpsf2>
    1e0a:	87 ff       	sbrs	r24, 7
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <_ZN12AccelStepper11setMaxSpeedEf+0x2e>
    1e0e:	f7 fa       	bst	r15, 7
    1e10:	f0 94       	com	r15
    1e12:	f7 f8       	bld	r15, 7
    1e14:	f0 94       	com	r15
    1e16:	28 8d       	ldd	r18, Y+24	; 0x18
    1e18:	39 8d       	ldd	r19, Y+25	; 0x19
    1e1a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1e1c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1e1e:	c7 01       	movw	r24, r14
    1e20:	b6 01       	movw	r22, r12
    1e22:	31 d2       	rcall	.+1122   	; 0x2286 <__cmpsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <_ZN12AccelStepper11setMaxSpeedEf+0x42>
    1e28:	40 c0       	rjmp	.+128    	; 0x1eaa <_ZN12AccelStepper11setMaxSpeedEf+0xc2>
    1e2a:	c8 8e       	std	Y+24, r12	; 0x18
    1e2c:	d9 8e       	std	Y+25, r13	; 0x19
    1e2e:	ea 8e       	std	Y+26, r14	; 0x1a
    1e30:	fb 8e       	std	Y+27, r15	; 0x1b
    1e32:	8e 01       	movw	r16, r28
    1e34:	00 5c       	subi	r16, 0xC0	; 192
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	a7 01       	movw	r20, r14
    1e3a:	96 01       	movw	r18, r12
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	74 e2       	ldi	r23, 0x24	; 36
    1e40:	84 e7       	ldi	r24, 0x74	; 116
    1e42:	99 e4       	ldi	r25, 0x49	; 73
    1e44:	24 d2       	rcall	.+1096   	; 0x228e <__divsf3>
    1e46:	f8 01       	movw	r30, r16
    1e48:	60 83       	st	Z, r22
    1e4a:	71 83       	std	Z+1, r23	; 0x01
    1e4c:	82 83       	std	Z+2, r24	; 0x02
    1e4e:	93 83       	std	Z+3, r25	; 0x03
    1e50:	8c a9       	ldd	r24, Y+52	; 0x34
    1e52:	9d a9       	ldd	r25, Y+53	; 0x35
    1e54:	ae a9       	ldd	r26, Y+54	; 0x36
    1e56:	bf a9       	ldd	r27, Y+55	; 0x37
    1e58:	18 16       	cp	r1, r24
    1e5a:	19 06       	cpc	r1, r25
    1e5c:	1a 06       	cpc	r1, r26
    1e5e:	1b 06       	cpc	r1, r27
    1e60:	24 f5       	brge	.+72     	; 0x1eaa <_ZN12AccelStepper11setMaxSpeedEf+0xc2>
    1e62:	6c 89       	ldd	r22, Y+20	; 0x14
    1e64:	7d 89       	ldd	r23, Y+21	; 0x15
    1e66:	8e 89       	ldd	r24, Y+22	; 0x16
    1e68:	9f 89       	ldd	r25, Y+23	; 0x17
    1e6a:	9b 01       	movw	r18, r22
    1e6c:	ac 01       	movw	r20, r24
    1e6e:	5e d3       	rcall	.+1724   	; 0x252c <__mulsf3>
    1e70:	6b 01       	movw	r12, r22
    1e72:	7c 01       	movw	r14, r24
    1e74:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1e76:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1e78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	9e d1       	rcall	.+828    	; 0x21be <__addsf3>
    1e82:	9b 01       	movw	r18, r22
    1e84:	ac 01       	movw	r20, r24
    1e86:	c7 01       	movw	r24, r14
    1e88:	b6 01       	movw	r22, r12
    1e8a:	01 d2       	rcall	.+1026   	; 0x228e <__divsf3>
    1e8c:	68 d2       	rcall	.+1232   	; 0x235e <__fixsfsi>
    1e8e:	6c ab       	std	Y+52, r22	; 0x34
    1e90:	7d ab       	std	Y+53, r23	; 0x35
    1e92:	8e ab       	std	Y+54, r24	; 0x36
    1e94:	9f ab       	std	Y+55, r25	; 0x37
    1e96:	ce 01       	movw	r24, r28
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	70 cd       	rjmp	.-1312   	; 0x198a <_ZN12AccelStepper15computeNewSpeedEv>
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	08 95       	ret

00001ebc <_ZN12AccelStepper8maxSpeedEv>:
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	60 8d       	ldd	r22, Z+24	; 0x18
    1ec0:	71 8d       	ldd	r23, Z+25	; 0x19
    1ec2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ec4:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ec6:	08 95       	ret

00001ec8 <_ZN12AccelStepper8setSpeedEf>:

void AccelStepper::setSpeed(float speed)
{
    1ec8:	4f 92       	push	r4
    1eca:	5f 92       	push	r5
    1ecc:	6f 92       	push	r6
    1ece:	7f 92       	push	r7
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	ec 01       	movw	r28, r24
    1ee6:	5a 01       	movw	r10, r20
    1ee8:	8b 01       	movw	r16, r22
    if (speed == _speed)
    1eea:	9a 01       	movw	r18, r20
    1eec:	ab 01       	movw	r20, r22
    1eee:	6c 89       	ldd	r22, Y+20	; 0x14
    1ef0:	7d 89       	ldd	r23, Y+21	; 0x15
    1ef2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ef4:	9f 89       	ldd	r25, Y+23	; 0x17
    1ef6:	c7 d1       	rcall	.+910    	; 0x2286 <__cmpsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f4       	brne	.+2      	; 0x1efe <_ZN12AccelStepper8setSpeedEf+0x36>
    1efc:	46 c0       	rjmp	.+140    	; 0x1f8a <_ZN12AccelStepper8setSpeedEf+0xc2>
        return;
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
    1efe:	c8 8c       	ldd	r12, Y+24	; 0x18
    1f00:	d9 8c       	ldd	r13, Y+25	; 0x19
    1f02:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1f04:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1f06:	26 01       	movw	r4, r12
    1f08:	37 01       	movw	r6, r14
    1f0a:	77 fa       	bst	r7, 7
    1f0c:	70 94       	com	r7
    1f0e:	77 f8       	bld	r7, 7
    1f10:	70 94       	com	r7
    1f12:	a3 01       	movw	r20, r6
    1f14:	92 01       	movw	r18, r4
    1f16:	b5 01       	movw	r22, r10
    1f18:	c8 01       	movw	r24, r16
    1f1a:	b5 d1       	rcall	.+874    	; 0x2286 <__cmpsf2>
    1f1c:	87 fd       	sbrc	r24, 7
    1f1e:	0a c0       	rjmp	.+20     	; 0x1f34 <_ZN12AccelStepper8setSpeedEf+0x6c>
    1f20:	a7 01       	movw	r20, r14
    1f22:	96 01       	movw	r18, r12
    1f24:	b5 01       	movw	r22, r10
    1f26:	c8 01       	movw	r24, r16
    1f28:	fd d2       	rcall	.+1530   	; 0x2524 <__gesf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	2c f0       	brlt	.+10     	; 0x1f38 <_ZN12AccelStepper8setSpeedEf+0x70>
    1f2e:	65 01       	movw	r12, r10
    1f30:	78 01       	movw	r14, r16
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <_ZN12AccelStepper8setSpeedEf+0x70>
    1f34:	73 01       	movw	r14, r6
    1f36:	62 01       	movw	r12, r4
    if (speed == 0.0)
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	c7 01       	movw	r24, r14
    1f40:	b6 01       	movw	r22, r12
    1f42:	a1 d1       	rcall	.+834    	; 0x2286 <__cmpsf2>
    1f44:	81 11       	cpse	r24, r1
    1f46:	05 c0       	rjmp	.+10     	; 0x1f52 <_ZN12AccelStepper8setSpeedEf+0x8a>
	_stepInterval = 0;
    1f48:	1c a2       	std	Y+36, r1	; 0x24
    1f4a:	1d a2       	std	Y+37, r1	; 0x25
    1f4c:	1e a2       	std	Y+38, r1	; 0x26
    1f4e:	1f a2       	std	Y+39, r1	; 0x27
    1f50:	18 c0       	rjmp	.+48     	; 0x1f82 <_ZN12AccelStepper8setSpeedEf+0xba>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
    1f52:	a7 01       	movw	r20, r14
    1f54:	96 01       	movw	r18, r12
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	74 e2       	ldi	r23, 0x24	; 36
    1f5a:	84 e7       	ldi	r24, 0x74	; 116
    1f5c:	99 e4       	ldi	r25, 0x49	; 73
    1f5e:	97 d1       	rcall	.+814    	; 0x228e <__divsf3>
    1f60:	9f 77       	andi	r25, 0x7F	; 127
    1f62:	02 d2       	rcall	.+1028   	; 0x2368 <__fixunssfsi>
    1f64:	6c a3       	std	Y+36, r22	; 0x24
    1f66:	7d a3       	std	Y+37, r23	; 0x25
    1f68:	8e a3       	std	Y+38, r24	; 0x26
    1f6a:	9f a3       	std	Y+39, r25	; 0x27
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
    1f6c:	11 e0       	ldi	r17, 0x01	; 1
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	a9 01       	movw	r20, r18
    1f74:	c7 01       	movw	r24, r14
    1f76:	b6 01       	movw	r22, r12
    1f78:	d5 d2       	rcall	.+1450   	; 0x2524 <__gesf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <_ZN12AccelStepper8setSpeedEf+0xb8>
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	1a 83       	std	Y+2, r17	; 0x02
    }
    _speed = speed;
    1f82:	cc 8a       	std	Y+20, r12	; 0x14
    1f84:	dd 8a       	std	Y+21, r13	; 0x15
    1f86:	ee 8a       	std	Y+22, r14	; 0x16
    1f88:	ff 8a       	std	Y+23, r15	; 0x17
}
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	7f 90       	pop	r7
    1fa0:	6f 90       	pop	r6
    1fa2:	5f 90       	pop	r5
    1fa4:	4f 90       	pop	r4
    1fa6:	08 95       	ret

00001fa8 <_ZN12MultiStepperC1Ev>:

#include "MultiStepper.h"
#include "AccelStepper.h"

MultiStepper::MultiStepper()
    : _num_steppers(0)
    1fa8:	fc 01       	movw	r30, r24
    1faa:	14 8a       	std	Z+20, r1	; 0x14
    1fac:	08 95       	ret

00001fae <_ZN12MultiStepper10addStepperER12AccelStepper>:
{
}

boolean MultiStepper::addStepper(AccelStepper& stepper)
{
    1fae:	fc 01       	movw	r30, r24
    if (_num_steppers >= MULTISTEPPER_MAX_STEPPERS)
    1fb0:	84 89       	ldd	r24, Z+20	; 0x14
    1fb2:	8a 30       	cpi	r24, 0x0A	; 10
    1fb4:	58 f4       	brcc	.+22     	; 0x1fcc <_ZN12MultiStepper10addStepperER12AccelStepper+0x1e>
	return false; // No room for more
    _steppers[_num_steppers++] = &stepper;
    1fb6:	91 e0       	ldi	r25, 0x01	; 1
    1fb8:	98 0f       	add	r25, r24
    1fba:	94 8b       	std	Z+20, r25	; 0x14
    1fbc:	e8 0f       	add	r30, r24
    1fbe:	f1 1d       	adc	r31, r1
    1fc0:	e8 0f       	add	r30, r24
    1fc2:	f1 1d       	adc	r31, r1
    1fc4:	71 83       	std	Z+1, r23	; 0x01
    1fc6:	60 83       	st	Z, r22
    return true;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	08 95       	ret
}

boolean MultiStepper::addStepper(AccelStepper& stepper)
{
    if (_num_steppers >= MULTISTEPPER_MAX_STEPPERS)
	return false; // No room for more
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    _steppers[_num_steppers++] = &stepper;
    return true;
}
    1fce:	08 95       	ret

00001fd0 <_ZN12MultiStepper6moveToEPl>:

void MultiStepper::moveTo(long absolute[])
{
    1fd0:	2f 92       	push	r2
    1fd2:	3f 92       	push	r3
    1fd4:	4f 92       	push	r4
    1fd6:	5f 92       	push	r5
    1fd8:	6f 92       	push	r6
    1fda:	7f 92       	push	r7
    1fdc:	8f 92       	push	r8
    1fde:	9f 92       	push	r9
    1fe0:	af 92       	push	r10
    1fe2:	bf 92       	push	r11
    1fe4:	cf 92       	push	r12
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <_ZN12MultiStepper6moveToEPl+0x26>
    1ff6:	1f 92       	push	r1
    1ff8:	1f 92       	push	r1
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9d 83       	std	Y+5, r25	; 0x05
    2000:	8c 83       	std	Y+4, r24	; 0x04
    2002:	8b 01       	movw	r16, r22
    // First find the stepper that will take the longest time to move
    float longestTime = 0.0;

    uint8_t i;
    for (i = 0; i < _num_steppers; i++)
    2004:	31 2c       	mov	r3, r1
}

void MultiStepper::moveTo(long absolute[])
{
    // First find the stepper that will take the longest time to move
    float longestTime = 0.0;
    2006:	21 2c       	mov	r2, r1
    2008:	19 82       	std	Y+1, r1	; 0x01
    200a:	1a 82       	std	Y+2, r1	; 0x02
    200c:	1b 82       	std	Y+3, r1	; 0x03

    uint8_t i;
    for (i = 0; i < _num_steppers; i++)
    200e:	ec 81       	ldd	r30, Y+4	; 0x04
    2010:	fd 81       	ldd	r31, Y+5	; 0x05
    2012:	84 89       	ldd	r24, Z+20	; 0x14
    2014:	38 16       	cp	r3, r24
    2016:	08 f0       	brcs	.+2      	; 0x201a <_ZN12MultiStepper6moveToEPl+0x4a>
    2018:	40 c0       	rjmp	.+128    	; 0x209a <_ZN12MultiStepper6moveToEPl+0xca>
    {
	long thisDistance = absolute[i] - _steppers[i]->currentPosition();
    201a:	f8 01       	movw	r30, r16
    201c:	24 e0       	ldi	r18, 0x04	; 4
    201e:	32 9e       	mul	r3, r18
    2020:	e0 0d       	add	r30, r0
    2022:	f1 1d       	adc	r31, r1
    2024:	11 24       	eor	r1, r1
    2026:	c0 80       	ld	r12, Z
    2028:	d1 80       	ldd	r13, Z+1	; 0x01
    202a:	e2 80       	ldd	r14, Z+2	; 0x02
    202c:	f3 80       	ldd	r15, Z+3	; 0x03
    202e:	ac 80       	ldd	r10, Y+4	; 0x04
    2030:	bd 80       	ldd	r11, Y+5	; 0x05
    2032:	a3 0c       	add	r10, r3
    2034:	b1 1c       	adc	r11, r1
    2036:	a3 0c       	add	r10, r3
    2038:	b1 1c       	adc	r11, r1
    203a:	f5 01       	movw	r30, r10
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	88 dc       	rcall	.-1776   	; 0x1952 <_ZN12AccelStepper15currentPositionEv>
    2042:	2b 01       	movw	r4, r22
    2044:	3c 01       	movw	r6, r24
	float thisTime = abs(thisDistance) / _steppers[i]->maxSpeed();
    2046:	f5 01       	movw	r30, r10
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	37 df       	rcall	.-402    	; 0x1ebc <_ZN12AccelStepper8maxSpeedEv>
    204e:	4b 01       	movw	r8, r22
    2050:	5c 01       	movw	r10, r24
    2052:	c7 01       	movw	r24, r14
    2054:	b6 01       	movw	r22, r12
    2056:	64 19       	sub	r22, r4
    2058:	75 09       	sbc	r23, r5
    205a:	86 09       	sbc	r24, r6
    205c:	97 09       	sbc	r25, r7
    205e:	97 ff       	sbrs	r25, 7
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <_ZN12MultiStepper6moveToEPl+0xa0>
    2062:	90 95       	com	r25
    2064:	80 95       	com	r24
    2066:	70 95       	com	r23
    2068:	61 95       	neg	r22
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	8f 4f       	sbci	r24, 0xFF	; 255
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	a9 d1       	rcall	.+850    	; 0x23c4 <__floatsisf>
    2072:	a5 01       	movw	r20, r10
    2074:	94 01       	movw	r18, r8
    2076:	0b d1       	rcall	.+534    	; 0x228e <__divsf3>
    2078:	6b 01       	movw	r12, r22
    207a:	7c 01       	movw	r14, r24

	if (thisTime > longestTime)
    207c:	9b 01       	movw	r18, r22
    207e:	ac 01       	movw	r20, r24
    2080:	62 2d       	mov	r22, r2
    2082:	79 81       	ldd	r23, Y+1	; 0x01
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	9b 81       	ldd	r25, Y+3	; 0x03
    2088:	fe d0       	rcall	.+508    	; 0x2286 <__cmpsf2>
    208a:	87 ff       	sbrs	r24, 7
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <_ZN12MultiStepper6moveToEPl+0xc6>
	    longestTime = thisTime;
    208e:	2c 2c       	mov	r2, r12
    2090:	d9 82       	std	Y+1, r13	; 0x01
    2092:	ea 82       	std	Y+2, r14	; 0x02
    2094:	fb 82       	std	Y+3, r15	; 0x03
{
    // First find the stepper that will take the longest time to move
    float longestTime = 0.0;

    uint8_t i;
    for (i = 0; i < _num_steppers; i++)
    2096:	33 94       	inc	r3
    2098:	ba cf       	rjmp	.-140    	; 0x200e <_ZN12MultiStepper6moveToEPl+0x3e>

	if (thisTime > longestTime)
	    longestTime = thisTime;
    }

    if (longestTime > 0.0)
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	a9 01       	movw	r20, r18
    20a0:	62 2d       	mov	r22, r2
    20a2:	79 81       	ldd	r23, Y+1	; 0x01
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	3d d2       	rcall	.+1146   	; 0x2524 <__gesf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <_ZN12MultiStepper6moveToEPl+0xe0>
    20ae:	3c c0       	rjmp	.+120    	; 0x2128 <_ZN12MultiStepper6moveToEPl+0x158>
    20b0:	71 2c       	mov	r7, r1
    {
	// Now work out a new max speed for each stepper so they will all 
	// arrived at the same time of longestTime
	for (i = 0; i < _num_steppers; i++)
    20b2:	ec 81       	ldd	r30, Y+4	; 0x04
    20b4:	fd 81       	ldd	r31, Y+5	; 0x05
    20b6:	84 89       	ldd	r24, Z+20	; 0x14
    20b8:	78 16       	cp	r7, r24
    20ba:	b0 f5       	brcc	.+108    	; 0x2128 <_ZN12MultiStepper6moveToEPl+0x158>
	{
	    long thisDistance = absolute[i] - _steppers[i]->currentPosition();
    20bc:	68 01       	movw	r12, r16
    20be:	f4 e0       	ldi	r31, 0x04	; 4
    20c0:	7f 9e       	mul	r7, r31
    20c2:	c0 0c       	add	r12, r0
    20c4:	d1 1c       	adc	r13, r1
    20c6:	11 24       	eor	r1, r1
    20c8:	f6 01       	movw	r30, r12
    20ca:	80 80       	ld	r8, Z
    20cc:	91 80       	ldd	r9, Z+1	; 0x01
    20ce:	a2 80       	ldd	r10, Z+2	; 0x02
    20d0:	b3 80       	ldd	r11, Z+3	; 0x03
    20d2:	ec 80       	ldd	r14, Y+4	; 0x04
    20d4:	fd 80       	ldd	r15, Y+5	; 0x05
    20d6:	e7 0c       	add	r14, r7
    20d8:	f1 1c       	adc	r15, r1
    20da:	e7 0c       	add	r14, r7
    20dc:	f1 1c       	adc	r15, r1
    20de:	f7 01       	movw	r30, r14
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	36 dc       	rcall	.-1940   	; 0x1952 <_ZN12AccelStepper15currentPositionEv>
	    float thisSpeed = thisDistance / longestTime;
    20e6:	a5 01       	movw	r20, r10
    20e8:	94 01       	movw	r18, r8
    20ea:	26 1b       	sub	r18, r22
    20ec:	37 0b       	sbc	r19, r23
    20ee:	48 0b       	sbc	r20, r24
    20f0:	59 0b       	sbc	r21, r25
    20f2:	ca 01       	movw	r24, r20
    20f4:	b9 01       	movw	r22, r18
    20f6:	66 d1       	rcall	.+716    	; 0x23c4 <__floatsisf>
    20f8:	22 2d       	mov	r18, r2
    20fa:	39 81       	ldd	r19, Y+1	; 0x01
    20fc:	4a 81       	ldd	r20, Y+2	; 0x02
    20fe:	5b 81       	ldd	r21, Y+3	; 0x03
    2100:	c6 d0       	rcall	.+396    	; 0x228e <__divsf3>
    2102:	4b 01       	movw	r8, r22
    2104:	5c 01       	movw	r10, r24
	    _steppers[i]->moveTo(absolute[i]); // New target position (resets speed)
    2106:	f6 01       	movw	r30, r12
    2108:	40 81       	ld	r20, Z
    210a:	51 81       	ldd	r21, Z+1	; 0x01
    210c:	62 81       	ldd	r22, Z+2	; 0x02
    210e:	73 81       	ldd	r23, Z+3	; 0x03
    2110:	f7 01       	movw	r30, r14
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	79 dd       	rcall	.-1294   	; 0x1c0a <_ZN12AccelStepper6moveToEl>
	    _steppers[i]->setSpeed(thisSpeed); // New speed
    2118:	b5 01       	movw	r22, r10
    211a:	a4 01       	movw	r20, r8
    211c:	f7 01       	movw	r30, r14
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	d2 de       	rcall	.-604    	; 0x1ec8 <_ZN12AccelStepper8setSpeedEf>
    2124:	73 94       	inc	r7

    if (longestTime > 0.0)
    {
	// Now work out a new max speed for each stepper so they will all 
	// arrived at the same time of longestTime
	for (i = 0; i < _num_steppers; i++)
    2126:	c5 cf       	rjmp	.-118    	; 0x20b2 <_ZN12MultiStepper6moveToEPl+0xe2>
    2128:	0f 90       	pop	r0
	    float thisSpeed = thisDistance / longestTime;
	    _steppers[i]->moveTo(absolute[i]); // New target position (resets speed)
	    _steppers[i]->setSpeed(thisSpeed); // New speed
	}
    }
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	df 90       	pop	r13
    2140:	cf 90       	pop	r12
    2142:	bf 90       	pop	r11
    2144:	af 90       	pop	r10
    2146:	9f 90       	pop	r9
    2148:	8f 90       	pop	r8
    214a:	7f 90       	pop	r7
    214c:	6f 90       	pop	r6
    214e:	5f 90       	pop	r5
    2150:	4f 90       	pop	r4
    2152:	3f 90       	pop	r3
    2154:	2f 90       	pop	r2
    2156:	08 95       	ret

00002158 <_ZN12MultiStepper3runEv>:
    2158:	ef 92       	push	r14

// Returns true if any motor is still running to the target position.
boolean MultiStepper::run()
{
    215a:	ff 92       	push	r15
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	7c 01       	movw	r14, r24
    uint8_t i;
    boolean ret = false;
    2166:	00 e0       	ldi	r16, 0x00	; 0
    for (i = 0; i < _num_steppers; i++)
    2168:	10 e0       	ldi	r17, 0x00	; 0
    216a:	f7 01       	movw	r30, r14
    216c:	84 89       	ldd	r24, Z+20	; 0x14
    216e:	18 17       	cp	r17, r24
    2170:	90 f4       	brcc	.+36     	; 0x2196 <_ZN12MultiStepper3runEv+0x3e>
    2172:	e7 01       	movw	r28, r14
    2174:	c1 0f       	add	r28, r17
    2176:	d1 1d       	adc	r29, r1
    2178:	c1 0f       	add	r28, r17
    217a:	d1 1d       	adc	r29, r1
    {
	if ( _steppers[i]->distanceToGo() != 0)
    217c:	88 81       	ld	r24, Y
    217e:	99 81       	ldd	r25, Y+1	; 0x01
    2180:	d4 db       	rcall	.-2136   	; 0x192a <_ZN12AccelStepper12distanceToGoEv>
    2182:	67 2b       	or	r22, r23
    2184:	68 2b       	or	r22, r24
    2186:	69 2b       	or	r22, r25
    2188:	21 f0       	breq	.+8      	; 0x2192 <_ZN12MultiStepper3runEv+0x3a>
	{
	    _steppers[i]->runSpeed();
    218a:	88 81       	ld	r24, Y
    218c:	99 81       	ldd	r25, Y+1	; 0x01
    218e:	7c db       	rcall	.-2312   	; 0x1888 <_ZN12AccelStepper8runSpeedEv>
	    ret = true;
    2190:	01 e0       	ldi	r16, 0x01	; 1
// Returns true if any motor is still running to the target position.
boolean MultiStepper::run()
{
    uint8_t i;
    boolean ret = false;
    for (i = 0; i < _num_steppers; i++)
    2192:	1f 5f       	subi	r17, 0xFF	; 255
    2194:	ea cf       	rjmp	.-44     	; 0x216a <_ZN12MultiStepper3runEv+0x12>
	    _steppers[i]->runSpeed();
	    ret = true;
	}
    }
    return ret;
}
    2196:	80 2f       	mov	r24, r16
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	08 95       	ret

000021a6 <_ZN12MultiStepper18runSpeedToPositionEv>:

// Blocks until all steppers reach their target position and are stopped
void    MultiStepper::runSpeedToPosition()
{ 
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	ec 01       	movw	r28, r24
    while (run())
    21ac:	ce 01       	movw	r24, r28
    21ae:	d4 df       	rcall	.-88     	; 0x2158 <_ZN12MultiStepper3runEv>
    21b0:	81 11       	cpse	r24, r1
    21b2:	fc cf       	rjmp	.-8      	; 0x21ac <_ZN12MultiStepper18runSpeedToPositionEv+0x6>
	;
}
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21ba:	08 95       	ret

000021bc <__subsf3>:
    21bc:	50 58       	subi	r21, 0x80	; 128

000021be <__addsf3>:
    21be:	bb 27       	eor	r27, r27
    21c0:	aa 27       	eor	r26, r26
    21c2:	0e d0       	rcall	.+28     	; 0x21e0 <__addsf3x>
    21c4:	75 c1       	rjmp	.+746    	; 0x24b0 <__fp_round>
    21c6:	66 d1       	rcall	.+716    	; 0x2494 <__fp_pscA>
    21c8:	30 f0       	brcs	.+12     	; 0x21d6 <__addsf3+0x18>
    21ca:	6b d1       	rcall	.+726    	; 0x24a2 <__fp_pscB>
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <__addsf3+0x18>
    21ce:	31 f4       	brne	.+12     	; 0x21dc <__addsf3+0x1e>
    21d0:	9f 3f       	cpi	r25, 0xFF	; 255
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <__addsf3+0x1a>
    21d4:	1e f4       	brtc	.+6      	; 0x21dc <__addsf3+0x1e>
    21d6:	5b c1       	rjmp	.+694    	; 0x248e <__fp_nan>
    21d8:	0e f4       	brtc	.+2      	; 0x21dc <__addsf3+0x1e>
    21da:	e0 95       	com	r30
    21dc:	e7 fb       	bst	r30, 7
    21de:	51 c1       	rjmp	.+674    	; 0x2482 <__fp_inf>

000021e0 <__addsf3x>:
    21e0:	e9 2f       	mov	r30, r25
    21e2:	77 d1       	rcall	.+750    	; 0x24d2 <__fp_split3>
    21e4:	80 f3       	brcs	.-32     	; 0x21c6 <__addsf3+0x8>
    21e6:	ba 17       	cp	r27, r26
    21e8:	62 07       	cpc	r22, r18
    21ea:	73 07       	cpc	r23, r19
    21ec:	84 07       	cpc	r24, r20
    21ee:	95 07       	cpc	r25, r21
    21f0:	18 f0       	brcs	.+6      	; 0x21f8 <__addsf3x+0x18>
    21f2:	71 f4       	brne	.+28     	; 0x2210 <__stack+0x11>
    21f4:	9e f5       	brtc	.+102    	; 0x225c <__stack+0x5d>
    21f6:	8f c1       	rjmp	.+798    	; 0x2516 <__fp_zero>
    21f8:	0e f4       	brtc	.+2      	; 0x21fc <__addsf3x+0x1c>
    21fa:	e0 95       	com	r30
    21fc:	0b 2e       	mov	r0, r27
    21fe:	ba 2f       	mov	r27, r26
    2200:	a0 2d       	mov	r26, r0
    2202:	0b 01       	movw	r0, r22
    2204:	b9 01       	movw	r22, r18
    2206:	90 01       	movw	r18, r0
    2208:	0c 01       	movw	r0, r24
    220a:	ca 01       	movw	r24, r20
    220c:	a0 01       	movw	r20, r0
    220e:	11 24       	eor	r1, r1
    2210:	ff 27       	eor	r31, r31
    2212:	59 1b       	sub	r21, r25
    2214:	99 f0       	breq	.+38     	; 0x223c <__stack+0x3d>
    2216:	59 3f       	cpi	r21, 0xF9	; 249
    2218:	50 f4       	brcc	.+20     	; 0x222e <__stack+0x2f>
    221a:	50 3e       	cpi	r21, 0xE0	; 224
    221c:	68 f1       	brcs	.+90     	; 0x2278 <__stack+0x79>
    221e:	1a 16       	cp	r1, r26
    2220:	f0 40       	sbci	r31, 0x00	; 0
    2222:	a2 2f       	mov	r26, r18
    2224:	23 2f       	mov	r18, r19
    2226:	34 2f       	mov	r19, r20
    2228:	44 27       	eor	r20, r20
    222a:	58 5f       	subi	r21, 0xF8	; 248
    222c:	f3 cf       	rjmp	.-26     	; 0x2214 <__stack+0x15>
    222e:	46 95       	lsr	r20
    2230:	37 95       	ror	r19
    2232:	27 95       	ror	r18
    2234:	a7 95       	ror	r26
    2236:	f0 40       	sbci	r31, 0x00	; 0
    2238:	53 95       	inc	r21
    223a:	c9 f7       	brne	.-14     	; 0x222e <__stack+0x2f>
    223c:	7e f4       	brtc	.+30     	; 0x225c <__stack+0x5d>
    223e:	1f 16       	cp	r1, r31
    2240:	ba 0b       	sbc	r27, r26
    2242:	62 0b       	sbc	r22, r18
    2244:	73 0b       	sbc	r23, r19
    2246:	84 0b       	sbc	r24, r20
    2248:	ba f0       	brmi	.+46     	; 0x2278 <__stack+0x79>
    224a:	91 50       	subi	r25, 0x01	; 1
    224c:	a1 f0       	breq	.+40     	; 0x2276 <__stack+0x77>
    224e:	ff 0f       	add	r31, r31
    2250:	bb 1f       	adc	r27, r27
    2252:	66 1f       	adc	r22, r22
    2254:	77 1f       	adc	r23, r23
    2256:	88 1f       	adc	r24, r24
    2258:	c2 f7       	brpl	.-16     	; 0x224a <__stack+0x4b>
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <__stack+0x79>
    225c:	ba 0f       	add	r27, r26
    225e:	62 1f       	adc	r22, r18
    2260:	73 1f       	adc	r23, r19
    2262:	84 1f       	adc	r24, r20
    2264:	48 f4       	brcc	.+18     	; 0x2278 <__stack+0x79>
    2266:	87 95       	ror	r24
    2268:	77 95       	ror	r23
    226a:	67 95       	ror	r22
    226c:	b7 95       	ror	r27
    226e:	f7 95       	ror	r31
    2270:	9e 3f       	cpi	r25, 0xFE	; 254
    2272:	08 f0       	brcs	.+2      	; 0x2276 <__stack+0x77>
    2274:	b3 cf       	rjmp	.-154    	; 0x21dc <__addsf3+0x1e>
    2276:	93 95       	inc	r25
    2278:	88 0f       	add	r24, r24
    227a:	08 f0       	brcs	.+2      	; 0x227e <__stack+0x7f>
    227c:	99 27       	eor	r25, r25
    227e:	ee 0f       	add	r30, r30
    2280:	97 95       	ror	r25
    2282:	87 95       	ror	r24
    2284:	08 95       	ret

00002286 <__cmpsf2>:
    2286:	d9 d0       	rcall	.+434    	; 0x243a <__fp_cmp>
    2288:	08 f4       	brcc	.+2      	; 0x228c <__cmpsf2+0x6>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	08 95       	ret

0000228e <__divsf3>:
    228e:	0c d0       	rcall	.+24     	; 0x22a8 <__divsf3x>
    2290:	0f c1       	rjmp	.+542    	; 0x24b0 <__fp_round>
    2292:	07 d1       	rcall	.+526    	; 0x24a2 <__fp_pscB>
    2294:	40 f0       	brcs	.+16     	; 0x22a6 <__divsf3+0x18>
    2296:	fe d0       	rcall	.+508    	; 0x2494 <__fp_pscA>
    2298:	30 f0       	brcs	.+12     	; 0x22a6 <__divsf3+0x18>
    229a:	21 f4       	brne	.+8      	; 0x22a4 <__divsf3+0x16>
    229c:	5f 3f       	cpi	r21, 0xFF	; 255
    229e:	19 f0       	breq	.+6      	; 0x22a6 <__divsf3+0x18>
    22a0:	f0 c0       	rjmp	.+480    	; 0x2482 <__fp_inf>
    22a2:	51 11       	cpse	r21, r1
    22a4:	39 c1       	rjmp	.+626    	; 0x2518 <__fp_szero>
    22a6:	f3 c0       	rjmp	.+486    	; 0x248e <__fp_nan>

000022a8 <__divsf3x>:
    22a8:	14 d1       	rcall	.+552    	; 0x24d2 <__fp_split3>
    22aa:	98 f3       	brcs	.-26     	; 0x2292 <__divsf3+0x4>

000022ac <__divsf3_pse>:
    22ac:	99 23       	and	r25, r25
    22ae:	c9 f3       	breq	.-14     	; 0x22a2 <__divsf3+0x14>
    22b0:	55 23       	and	r21, r21
    22b2:	b1 f3       	breq	.-20     	; 0x22a0 <__divsf3+0x12>
    22b4:	95 1b       	sub	r25, r21
    22b6:	55 0b       	sbc	r21, r21
    22b8:	bb 27       	eor	r27, r27
    22ba:	aa 27       	eor	r26, r26
    22bc:	62 17       	cp	r22, r18
    22be:	73 07       	cpc	r23, r19
    22c0:	84 07       	cpc	r24, r20
    22c2:	38 f0       	brcs	.+14     	; 0x22d2 <__divsf3_pse+0x26>
    22c4:	9f 5f       	subi	r25, 0xFF	; 255
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	22 0f       	add	r18, r18
    22ca:	33 1f       	adc	r19, r19
    22cc:	44 1f       	adc	r20, r20
    22ce:	aa 1f       	adc	r26, r26
    22d0:	a9 f3       	breq	.-22     	; 0x22bc <__divsf3_pse+0x10>
    22d2:	33 d0       	rcall	.+102    	; 0x233a <__divsf3_pse+0x8e>
    22d4:	0e 2e       	mov	r0, r30
    22d6:	3a f0       	brmi	.+14     	; 0x22e6 <__divsf3_pse+0x3a>
    22d8:	e0 e8       	ldi	r30, 0x80	; 128
    22da:	30 d0       	rcall	.+96     	; 0x233c <__divsf3_pse+0x90>
    22dc:	91 50       	subi	r25, 0x01	; 1
    22de:	50 40       	sbci	r21, 0x00	; 0
    22e0:	e6 95       	lsr	r30
    22e2:	00 1c       	adc	r0, r0
    22e4:	ca f7       	brpl	.-14     	; 0x22d8 <__divsf3_pse+0x2c>
    22e6:	29 d0       	rcall	.+82     	; 0x233a <__divsf3_pse+0x8e>
    22e8:	fe 2f       	mov	r31, r30
    22ea:	27 d0       	rcall	.+78     	; 0x233a <__divsf3_pse+0x8e>
    22ec:	66 0f       	add	r22, r22
    22ee:	77 1f       	adc	r23, r23
    22f0:	88 1f       	adc	r24, r24
    22f2:	bb 1f       	adc	r27, r27
    22f4:	26 17       	cp	r18, r22
    22f6:	37 07       	cpc	r19, r23
    22f8:	48 07       	cpc	r20, r24
    22fa:	ab 07       	cpc	r26, r27
    22fc:	b0 e8       	ldi	r27, 0x80	; 128
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__divsf3_pse+0x56>
    2300:	bb 0b       	sbc	r27, r27
    2302:	80 2d       	mov	r24, r0
    2304:	bf 01       	movw	r22, r30
    2306:	ff 27       	eor	r31, r31
    2308:	93 58       	subi	r25, 0x83	; 131
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	2a f0       	brmi	.+10     	; 0x2318 <__divsf3_pse+0x6c>
    230e:	9e 3f       	cpi	r25, 0xFE	; 254
    2310:	51 05       	cpc	r21, r1
    2312:	68 f0       	brcs	.+26     	; 0x232e <__divsf3_pse+0x82>
    2314:	b6 c0       	rjmp	.+364    	; 0x2482 <__fp_inf>
    2316:	00 c1       	rjmp	.+512    	; 0x2518 <__fp_szero>
    2318:	5f 3f       	cpi	r21, 0xFF	; 255
    231a:	ec f3       	brlt	.-6      	; 0x2316 <__divsf3_pse+0x6a>
    231c:	98 3e       	cpi	r25, 0xE8	; 232
    231e:	dc f3       	brlt	.-10     	; 0x2316 <__divsf3_pse+0x6a>
    2320:	86 95       	lsr	r24
    2322:	77 95       	ror	r23
    2324:	67 95       	ror	r22
    2326:	b7 95       	ror	r27
    2328:	f7 95       	ror	r31
    232a:	9f 5f       	subi	r25, 0xFF	; 255
    232c:	c9 f7       	brne	.-14     	; 0x2320 <__divsf3_pse+0x74>
    232e:	88 0f       	add	r24, r24
    2330:	91 1d       	adc	r25, r1
    2332:	96 95       	lsr	r25
    2334:	87 95       	ror	r24
    2336:	97 f9       	bld	r25, 7
    2338:	08 95       	ret
    233a:	e1 e0       	ldi	r30, 0x01	; 1
    233c:	66 0f       	add	r22, r22
    233e:	77 1f       	adc	r23, r23
    2340:	88 1f       	adc	r24, r24
    2342:	bb 1f       	adc	r27, r27
    2344:	62 17       	cp	r22, r18
    2346:	73 07       	cpc	r23, r19
    2348:	84 07       	cpc	r24, r20
    234a:	ba 07       	cpc	r27, r26
    234c:	20 f0       	brcs	.+8      	; 0x2356 <__divsf3_pse+0xaa>
    234e:	62 1b       	sub	r22, r18
    2350:	73 0b       	sbc	r23, r19
    2352:	84 0b       	sbc	r24, r20
    2354:	ba 0b       	sbc	r27, r26
    2356:	ee 1f       	adc	r30, r30
    2358:	88 f7       	brcc	.-30     	; 0x233c <__divsf3_pse+0x90>
    235a:	e0 95       	com	r30
    235c:	08 95       	ret

0000235e <__fixsfsi>:
    235e:	04 d0       	rcall	.+8      	; 0x2368 <__fixunssfsi>
    2360:	68 94       	set
    2362:	b1 11       	cpse	r27, r1
    2364:	d9 c0       	rjmp	.+434    	; 0x2518 <__fp_szero>
    2366:	08 95       	ret

00002368 <__fixunssfsi>:
    2368:	bc d0       	rcall	.+376    	; 0x24e2 <__fp_splitA>
    236a:	88 f0       	brcs	.+34     	; 0x238e <__fixunssfsi+0x26>
    236c:	9f 57       	subi	r25, 0x7F	; 127
    236e:	90 f0       	brcs	.+36     	; 0x2394 <__fixunssfsi+0x2c>
    2370:	b9 2f       	mov	r27, r25
    2372:	99 27       	eor	r25, r25
    2374:	b7 51       	subi	r27, 0x17	; 23
    2376:	a0 f0       	brcs	.+40     	; 0x23a0 <__fixunssfsi+0x38>
    2378:	d1 f0       	breq	.+52     	; 0x23ae <__fixunssfsi+0x46>
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	1a f0       	brmi	.+6      	; 0x238a <__fixunssfsi+0x22>
    2384:	ba 95       	dec	r27
    2386:	c9 f7       	brne	.-14     	; 0x237a <__fixunssfsi+0x12>
    2388:	12 c0       	rjmp	.+36     	; 0x23ae <__fixunssfsi+0x46>
    238a:	b1 30       	cpi	r27, 0x01	; 1
    238c:	81 f0       	breq	.+32     	; 0x23ae <__fixunssfsi+0x46>
    238e:	c3 d0       	rcall	.+390    	; 0x2516 <__fp_zero>
    2390:	b1 e0       	ldi	r27, 0x01	; 1
    2392:	08 95       	ret
    2394:	c0 c0       	rjmp	.+384    	; 0x2516 <__fp_zero>
    2396:	67 2f       	mov	r22, r23
    2398:	78 2f       	mov	r23, r24
    239a:	88 27       	eor	r24, r24
    239c:	b8 5f       	subi	r27, 0xF8	; 248
    239e:	39 f0       	breq	.+14     	; 0x23ae <__fixunssfsi+0x46>
    23a0:	b9 3f       	cpi	r27, 0xF9	; 249
    23a2:	cc f3       	brlt	.-14     	; 0x2396 <__fixunssfsi+0x2e>
    23a4:	86 95       	lsr	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	b3 95       	inc	r27
    23ac:	d9 f7       	brne	.-10     	; 0x23a4 <__fixunssfsi+0x3c>
    23ae:	3e f4       	brtc	.+14     	; 0x23be <__fixunssfsi+0x56>
    23b0:	90 95       	com	r25
    23b2:	80 95       	com	r24
    23b4:	70 95       	com	r23
    23b6:	61 95       	neg	r22
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	8f 4f       	sbci	r24, 0xFF	; 255
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	08 95       	ret

000023c0 <__floatunsisf>:
    23c0:	e8 94       	clt
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <__floatsisf+0x12>

000023c4 <__floatsisf>:
    23c4:	97 fb       	bst	r25, 7
    23c6:	3e f4       	brtc	.+14     	; 0x23d6 <__floatsisf+0x12>
    23c8:	90 95       	com	r25
    23ca:	80 95       	com	r24
    23cc:	70 95       	com	r23
    23ce:	61 95       	neg	r22
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	99 23       	and	r25, r25
    23d8:	a9 f0       	breq	.+42     	; 0x2404 <__floatsisf+0x40>
    23da:	f9 2f       	mov	r31, r25
    23dc:	96 e9       	ldi	r25, 0x96	; 150
    23de:	bb 27       	eor	r27, r27
    23e0:	93 95       	inc	r25
    23e2:	f6 95       	lsr	r31
    23e4:	87 95       	ror	r24
    23e6:	77 95       	ror	r23
    23e8:	67 95       	ror	r22
    23ea:	b7 95       	ror	r27
    23ec:	f1 11       	cpse	r31, r1
    23ee:	f8 cf       	rjmp	.-16     	; 0x23e0 <__floatsisf+0x1c>
    23f0:	fa f4       	brpl	.+62     	; 0x2430 <__floatsisf+0x6c>
    23f2:	bb 0f       	add	r27, r27
    23f4:	11 f4       	brne	.+4      	; 0x23fa <__floatsisf+0x36>
    23f6:	60 ff       	sbrs	r22, 0
    23f8:	1b c0       	rjmp	.+54     	; 0x2430 <__floatsisf+0x6c>
    23fa:	6f 5f       	subi	r22, 0xFF	; 255
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <__floatsisf+0x6c>
    2404:	88 23       	and	r24, r24
    2406:	11 f0       	breq	.+4      	; 0x240c <__floatsisf+0x48>
    2408:	96 e9       	ldi	r25, 0x96	; 150
    240a:	11 c0       	rjmp	.+34     	; 0x242e <__floatsisf+0x6a>
    240c:	77 23       	and	r23, r23
    240e:	21 f0       	breq	.+8      	; 0x2418 <__floatsisf+0x54>
    2410:	9e e8       	ldi	r25, 0x8E	; 142
    2412:	87 2f       	mov	r24, r23
    2414:	76 2f       	mov	r23, r22
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <__floatsisf+0x5e>
    2418:	66 23       	and	r22, r22
    241a:	71 f0       	breq	.+28     	; 0x2438 <__floatsisf+0x74>
    241c:	96 e8       	ldi	r25, 0x86	; 134
    241e:	86 2f       	mov	r24, r22
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	2a f0       	brmi	.+10     	; 0x2430 <__floatsisf+0x6c>
    2426:	9a 95       	dec	r25
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	da f7       	brpl	.-10     	; 0x2426 <__floatsisf+0x62>
    2430:	88 0f       	add	r24, r24
    2432:	96 95       	lsr	r25
    2434:	87 95       	ror	r24
    2436:	97 f9       	bld	r25, 7
    2438:	08 95       	ret

0000243a <__fp_cmp>:
    243a:	99 0f       	add	r25, r25
    243c:	00 08       	sbc	r0, r0
    243e:	55 0f       	add	r21, r21
    2440:	aa 0b       	sbc	r26, r26
    2442:	e0 e8       	ldi	r30, 0x80	; 128
    2444:	fe ef       	ldi	r31, 0xFE	; 254
    2446:	16 16       	cp	r1, r22
    2448:	17 06       	cpc	r1, r23
    244a:	e8 07       	cpc	r30, r24
    244c:	f9 07       	cpc	r31, r25
    244e:	c0 f0       	brcs	.+48     	; 0x2480 <__fp_cmp+0x46>
    2450:	12 16       	cp	r1, r18
    2452:	13 06       	cpc	r1, r19
    2454:	e4 07       	cpc	r30, r20
    2456:	f5 07       	cpc	r31, r21
    2458:	98 f0       	brcs	.+38     	; 0x2480 <__fp_cmp+0x46>
    245a:	62 1b       	sub	r22, r18
    245c:	73 0b       	sbc	r23, r19
    245e:	84 0b       	sbc	r24, r20
    2460:	95 0b       	sbc	r25, r21
    2462:	39 f4       	brne	.+14     	; 0x2472 <__fp_cmp+0x38>
    2464:	0a 26       	eor	r0, r26
    2466:	61 f0       	breq	.+24     	; 0x2480 <__fp_cmp+0x46>
    2468:	23 2b       	or	r18, r19
    246a:	24 2b       	or	r18, r20
    246c:	25 2b       	or	r18, r21
    246e:	21 f4       	brne	.+8      	; 0x2478 <__fp_cmp+0x3e>
    2470:	08 95       	ret
    2472:	0a 26       	eor	r0, r26
    2474:	09 f4       	brne	.+2      	; 0x2478 <__fp_cmp+0x3e>
    2476:	a1 40       	sbci	r26, 0x01	; 1
    2478:	a6 95       	lsr	r26
    247a:	8f ef       	ldi	r24, 0xFF	; 255
    247c:	81 1d       	adc	r24, r1
    247e:	81 1d       	adc	r24, r1
    2480:	08 95       	ret

00002482 <__fp_inf>:
    2482:	97 f9       	bld	r25, 7
    2484:	9f 67       	ori	r25, 0x7F	; 127
    2486:	80 e8       	ldi	r24, 0x80	; 128
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	08 95       	ret

0000248e <__fp_nan>:
    248e:	9f ef       	ldi	r25, 0xFF	; 255
    2490:	80 ec       	ldi	r24, 0xC0	; 192
    2492:	08 95       	ret

00002494 <__fp_pscA>:
    2494:	00 24       	eor	r0, r0
    2496:	0a 94       	dec	r0
    2498:	16 16       	cp	r1, r22
    249a:	17 06       	cpc	r1, r23
    249c:	18 06       	cpc	r1, r24
    249e:	09 06       	cpc	r0, r25
    24a0:	08 95       	ret

000024a2 <__fp_pscB>:
    24a2:	00 24       	eor	r0, r0
    24a4:	0a 94       	dec	r0
    24a6:	12 16       	cp	r1, r18
    24a8:	13 06       	cpc	r1, r19
    24aa:	14 06       	cpc	r1, r20
    24ac:	05 06       	cpc	r0, r21
    24ae:	08 95       	ret

000024b0 <__fp_round>:
    24b0:	09 2e       	mov	r0, r25
    24b2:	03 94       	inc	r0
    24b4:	00 0c       	add	r0, r0
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0xc>
    24b8:	88 23       	and	r24, r24
    24ba:	52 f0       	brmi	.+20     	; 0x24d0 <__fp_round+0x20>
    24bc:	bb 0f       	add	r27, r27
    24be:	40 f4       	brcc	.+16     	; 0x24d0 <__fp_round+0x20>
    24c0:	bf 2b       	or	r27, r31
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <__fp_round+0x18>
    24c4:	60 ff       	sbrs	r22, 0
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <__fp_round+0x20>
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	08 95       	ret

000024d2 <__fp_split3>:
    24d2:	57 fd       	sbrc	r21, 7
    24d4:	90 58       	subi	r25, 0x80	; 128
    24d6:	44 0f       	add	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	59 f0       	breq	.+22     	; 0x24f2 <__fp_splitA+0x10>
    24dc:	5f 3f       	cpi	r21, 0xFF	; 255
    24de:	71 f0       	breq	.+28     	; 0x24fc <__fp_splitA+0x1a>
    24e0:	47 95       	ror	r20

000024e2 <__fp_splitA>:
    24e2:	88 0f       	add	r24, r24
    24e4:	97 fb       	bst	r25, 7
    24e6:	99 1f       	adc	r25, r25
    24e8:	61 f0       	breq	.+24     	; 0x2502 <__fp_splitA+0x20>
    24ea:	9f 3f       	cpi	r25, 0xFF	; 255
    24ec:	79 f0       	breq	.+30     	; 0x250c <__fp_splitA+0x2a>
    24ee:	87 95       	ror	r24
    24f0:	08 95       	ret
    24f2:	12 16       	cp	r1, r18
    24f4:	13 06       	cpc	r1, r19
    24f6:	14 06       	cpc	r1, r20
    24f8:	55 1f       	adc	r21, r21
    24fa:	f2 cf       	rjmp	.-28     	; 0x24e0 <__fp_split3+0xe>
    24fc:	46 95       	lsr	r20
    24fe:	f1 df       	rcall	.-30     	; 0x24e2 <__fp_splitA>
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <__fp_splitA+0x30>
    2502:	16 16       	cp	r1, r22
    2504:	17 06       	cpc	r1, r23
    2506:	18 06       	cpc	r1, r24
    2508:	99 1f       	adc	r25, r25
    250a:	f1 cf       	rjmp	.-30     	; 0x24ee <__fp_splitA+0xc>
    250c:	86 95       	lsr	r24
    250e:	71 05       	cpc	r23, r1
    2510:	61 05       	cpc	r22, r1
    2512:	08 94       	sec
    2514:	08 95       	ret

00002516 <__fp_zero>:
    2516:	e8 94       	clt

00002518 <__fp_szero>:
    2518:	bb 27       	eor	r27, r27
    251a:	66 27       	eor	r22, r22
    251c:	77 27       	eor	r23, r23
    251e:	cb 01       	movw	r24, r22
    2520:	97 f9       	bld	r25, 7
    2522:	08 95       	ret

00002524 <__gesf2>:
    2524:	8a df       	rcall	.-236    	; 0x243a <__fp_cmp>
    2526:	08 f4       	brcc	.+2      	; 0x252a <__gesf2+0x6>
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	08 95       	ret

0000252c <__mulsf3>:
    252c:	0b d0       	rcall	.+22     	; 0x2544 <__mulsf3x>
    252e:	c0 cf       	rjmp	.-128    	; 0x24b0 <__fp_round>
    2530:	b1 df       	rcall	.-158    	; 0x2494 <__fp_pscA>
    2532:	28 f0       	brcs	.+10     	; 0x253e <__mulsf3+0x12>
    2534:	b6 df       	rcall	.-148    	; 0x24a2 <__fp_pscB>
    2536:	18 f0       	brcs	.+6      	; 0x253e <__mulsf3+0x12>
    2538:	95 23       	and	r25, r21
    253a:	09 f0       	breq	.+2      	; 0x253e <__mulsf3+0x12>
    253c:	a2 cf       	rjmp	.-188    	; 0x2482 <__fp_inf>
    253e:	a7 cf       	rjmp	.-178    	; 0x248e <__fp_nan>
    2540:	11 24       	eor	r1, r1
    2542:	ea cf       	rjmp	.-44     	; 0x2518 <__fp_szero>

00002544 <__mulsf3x>:
    2544:	c6 df       	rcall	.-116    	; 0x24d2 <__fp_split3>
    2546:	a0 f3       	brcs	.-24     	; 0x2530 <__mulsf3+0x4>

00002548 <__mulsf3_pse>:
    2548:	95 9f       	mul	r25, r21
    254a:	d1 f3       	breq	.-12     	; 0x2540 <__mulsf3+0x14>
    254c:	95 0f       	add	r25, r21
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	55 1f       	adc	r21, r21
    2552:	62 9f       	mul	r22, r18
    2554:	f0 01       	movw	r30, r0
    2556:	72 9f       	mul	r23, r18
    2558:	bb 27       	eor	r27, r27
    255a:	f0 0d       	add	r31, r0
    255c:	b1 1d       	adc	r27, r1
    255e:	63 9f       	mul	r22, r19
    2560:	aa 27       	eor	r26, r26
    2562:	f0 0d       	add	r31, r0
    2564:	b1 1d       	adc	r27, r1
    2566:	aa 1f       	adc	r26, r26
    2568:	64 9f       	mul	r22, r20
    256a:	66 27       	eor	r22, r22
    256c:	b0 0d       	add	r27, r0
    256e:	a1 1d       	adc	r26, r1
    2570:	66 1f       	adc	r22, r22
    2572:	82 9f       	mul	r24, r18
    2574:	22 27       	eor	r18, r18
    2576:	b0 0d       	add	r27, r0
    2578:	a1 1d       	adc	r26, r1
    257a:	62 1f       	adc	r22, r18
    257c:	73 9f       	mul	r23, r19
    257e:	b0 0d       	add	r27, r0
    2580:	a1 1d       	adc	r26, r1
    2582:	62 1f       	adc	r22, r18
    2584:	83 9f       	mul	r24, r19
    2586:	a0 0d       	add	r26, r0
    2588:	61 1d       	adc	r22, r1
    258a:	22 1f       	adc	r18, r18
    258c:	74 9f       	mul	r23, r20
    258e:	33 27       	eor	r19, r19
    2590:	a0 0d       	add	r26, r0
    2592:	61 1d       	adc	r22, r1
    2594:	23 1f       	adc	r18, r19
    2596:	84 9f       	mul	r24, r20
    2598:	60 0d       	add	r22, r0
    259a:	21 1d       	adc	r18, r1
    259c:	82 2f       	mov	r24, r18
    259e:	76 2f       	mov	r23, r22
    25a0:	6a 2f       	mov	r22, r26
    25a2:	11 24       	eor	r1, r1
    25a4:	9f 57       	subi	r25, 0x7F	; 127
    25a6:	50 40       	sbci	r21, 0x00	; 0
    25a8:	8a f0       	brmi	.+34     	; 0x25cc <__mulsf3_pse+0x84>
    25aa:	e1 f0       	breq	.+56     	; 0x25e4 <__mulsf3_pse+0x9c>
    25ac:	88 23       	and	r24, r24
    25ae:	4a f0       	brmi	.+18     	; 0x25c2 <__mulsf3_pse+0x7a>
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	bb 1f       	adc	r27, r27
    25b6:	66 1f       	adc	r22, r22
    25b8:	77 1f       	adc	r23, r23
    25ba:	88 1f       	adc	r24, r24
    25bc:	91 50       	subi	r25, 0x01	; 1
    25be:	50 40       	sbci	r21, 0x00	; 0
    25c0:	a9 f7       	brne	.-22     	; 0x25ac <__mulsf3_pse+0x64>
    25c2:	9e 3f       	cpi	r25, 0xFE	; 254
    25c4:	51 05       	cpc	r21, r1
    25c6:	70 f0       	brcs	.+28     	; 0x25e4 <__mulsf3_pse+0x9c>
    25c8:	5c cf       	rjmp	.-328    	; 0x2482 <__fp_inf>
    25ca:	a6 cf       	rjmp	.-180    	; 0x2518 <__fp_szero>
    25cc:	5f 3f       	cpi	r21, 0xFF	; 255
    25ce:	ec f3       	brlt	.-6      	; 0x25ca <__mulsf3_pse+0x82>
    25d0:	98 3e       	cpi	r25, 0xE8	; 232
    25d2:	dc f3       	brlt	.-10     	; 0x25ca <__mulsf3_pse+0x82>
    25d4:	86 95       	lsr	r24
    25d6:	77 95       	ror	r23
    25d8:	67 95       	ror	r22
    25da:	b7 95       	ror	r27
    25dc:	f7 95       	ror	r31
    25de:	e7 95       	ror	r30
    25e0:	9f 5f       	subi	r25, 0xFF	; 255
    25e2:	c1 f7       	brne	.-16     	; 0x25d4 <__mulsf3_pse+0x8c>
    25e4:	fe 2b       	or	r31, r30
    25e6:	88 0f       	add	r24, r24
    25e8:	91 1d       	adc	r25, r1
    25ea:	96 95       	lsr	r25
    25ec:	87 95       	ror	r24
    25ee:	97 f9       	bld	r25, 7
    25f0:	08 95       	ret
    25f2:	11 f4       	brne	.+4      	; 0x25f8 <__mulsf3_pse+0xb0>
    25f4:	0e f4       	brtc	.+2      	; 0x25f8 <__mulsf3_pse+0xb0>
    25f6:	4b cf       	rjmp	.-362    	; 0x248e <__fp_nan>
    25f8:	3e c0       	rjmp	.+124    	; 0x2676 <__fp_mpack>

000025fa <sqrt>:
    25fa:	73 df       	rcall	.-282    	; 0x24e2 <__fp_splitA>
    25fc:	d0 f3       	brcs	.-12     	; 0x25f2 <__mulsf3_pse+0xaa>
    25fe:	99 23       	and	r25, r25
    2600:	d9 f3       	breq	.-10     	; 0x25f8 <__mulsf3_pse+0xb0>
    2602:	ce f3       	brts	.-14     	; 0x25f6 <__mulsf3_pse+0xae>
    2604:	9f 57       	subi	r25, 0x7F	; 127
    2606:	55 0b       	sbc	r21, r21
    2608:	87 ff       	sbrs	r24, 7
    260a:	43 d0       	rcall	.+134    	; 0x2692 <__fp_norm2>
    260c:	00 24       	eor	r0, r0
    260e:	a0 e6       	ldi	r26, 0x60	; 96
    2610:	40 ea       	ldi	r20, 0xA0	; 160
    2612:	90 01       	movw	r18, r0
    2614:	80 58       	subi	r24, 0x80	; 128
    2616:	56 95       	lsr	r21
    2618:	97 95       	ror	r25
    261a:	28 f4       	brcc	.+10     	; 0x2626 <sqrt+0x2c>
    261c:	80 5c       	subi	r24, 0xC0	; 192
    261e:	66 0f       	add	r22, r22
    2620:	77 1f       	adc	r23, r23
    2622:	88 1f       	adc	r24, r24
    2624:	20 f0       	brcs	.+8      	; 0x262e <sqrt+0x34>
    2626:	26 17       	cp	r18, r22
    2628:	37 07       	cpc	r19, r23
    262a:	48 07       	cpc	r20, r24
    262c:	30 f4       	brcc	.+12     	; 0x263a <sqrt+0x40>
    262e:	62 1b       	sub	r22, r18
    2630:	73 0b       	sbc	r23, r19
    2632:	84 0b       	sbc	r24, r20
    2634:	20 29       	or	r18, r0
    2636:	31 29       	or	r19, r1
    2638:	4a 2b       	or	r20, r26
    263a:	a6 95       	lsr	r26
    263c:	17 94       	ror	r1
    263e:	07 94       	ror	r0
    2640:	20 25       	eor	r18, r0
    2642:	31 25       	eor	r19, r1
    2644:	4a 27       	eor	r20, r26
    2646:	58 f7       	brcc	.-42     	; 0x261e <sqrt+0x24>
    2648:	66 0f       	add	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	88 1f       	adc	r24, r24
    264e:	20 f0       	brcs	.+8      	; 0x2658 <sqrt+0x5e>
    2650:	26 17       	cp	r18, r22
    2652:	37 07       	cpc	r19, r23
    2654:	48 07       	cpc	r20, r24
    2656:	30 f4       	brcc	.+12     	; 0x2664 <sqrt+0x6a>
    2658:	62 0b       	sbc	r22, r18
    265a:	73 0b       	sbc	r23, r19
    265c:	84 0b       	sbc	r24, r20
    265e:	20 0d       	add	r18, r0
    2660:	31 1d       	adc	r19, r1
    2662:	41 1d       	adc	r20, r1
    2664:	a0 95       	com	r26
    2666:	81 f7       	brne	.-32     	; 0x2648 <sqrt+0x4e>
    2668:	b9 01       	movw	r22, r18
    266a:	84 2f       	mov	r24, r20
    266c:	91 58       	subi	r25, 0x81	; 129
    266e:	88 0f       	add	r24, r24
    2670:	96 95       	lsr	r25
    2672:	87 95       	ror	r24
    2674:	08 95       	ret

00002676 <__fp_mpack>:
    2676:	9f 3f       	cpi	r25, 0xFF	; 255
    2678:	31 f0       	breq	.+12     	; 0x2686 <__fp_mpack_finite+0xc>

0000267a <__fp_mpack_finite>:
    267a:	91 50       	subi	r25, 0x01	; 1
    267c:	20 f4       	brcc	.+8      	; 0x2686 <__fp_mpack_finite+0xc>
    267e:	87 95       	ror	r24
    2680:	77 95       	ror	r23
    2682:	67 95       	ror	r22
    2684:	b7 95       	ror	r27
    2686:	88 0f       	add	r24, r24
    2688:	91 1d       	adc	r25, r1
    268a:	96 95       	lsr	r25
    268c:	87 95       	ror	r24
    268e:	97 f9       	bld	r25, 7
    2690:	08 95       	ret

00002692 <__fp_norm2>:
    2692:	91 50       	subi	r25, 0x01	; 1
    2694:	50 40       	sbci	r21, 0x00	; 0
    2696:	66 0f       	add	r22, r22
    2698:	77 1f       	adc	r23, r23
    269a:	88 1f       	adc	r24, r24
    269c:	d2 f7       	brpl	.-12     	; 0x2692 <__fp_norm2>
    269e:	08 95       	ret

000026a0 <__udivmodsi4>:
    26a0:	a1 e2       	ldi	r26, 0x21	; 33
    26a2:	1a 2e       	mov	r1, r26
    26a4:	aa 1b       	sub	r26, r26
    26a6:	bb 1b       	sub	r27, r27
    26a8:	fd 01       	movw	r30, r26
    26aa:	0d c0       	rjmp	.+26     	; 0x26c6 <__udivmodsi4_ep>

000026ac <__udivmodsi4_loop>:
    26ac:	aa 1f       	adc	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	ee 1f       	adc	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	a2 17       	cp	r26, r18
    26b6:	b3 07       	cpc	r27, r19
    26b8:	e4 07       	cpc	r30, r20
    26ba:	f5 07       	cpc	r31, r21
    26bc:	20 f0       	brcs	.+8      	; 0x26c6 <__udivmodsi4_ep>
    26be:	a2 1b       	sub	r26, r18
    26c0:	b3 0b       	sbc	r27, r19
    26c2:	e4 0b       	sbc	r30, r20
    26c4:	f5 0b       	sbc	r31, r21

000026c6 <__udivmodsi4_ep>:
    26c6:	66 1f       	adc	r22, r22
    26c8:	77 1f       	adc	r23, r23
    26ca:	88 1f       	adc	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	1a 94       	dec	r1
    26d0:	69 f7       	brne	.-38     	; 0x26ac <__udivmodsi4_loop>
    26d2:	60 95       	com	r22
    26d4:	70 95       	com	r23
    26d6:	80 95       	com	r24
    26d8:	90 95       	com	r25
    26da:	9b 01       	movw	r18, r22
    26dc:	ac 01       	movw	r20, r24
    26de:	bd 01       	movw	r22, r26
    26e0:	cf 01       	movw	r24, r30
    26e2:	08 95       	ret

000026e4 <__divmodsi4>:
    26e4:	05 2e       	mov	r0, r21
    26e6:	97 fb       	bst	r25, 7
    26e8:	16 f4       	brtc	.+4      	; 0x26ee <__divmodsi4+0xa>
    26ea:	00 94       	com	r0
    26ec:	0f d0       	rcall	.+30     	; 0x270c <__negsi2>
    26ee:	57 fd       	sbrc	r21, 7
    26f0:	05 d0       	rcall	.+10     	; 0x26fc <__divmodsi4_neg2>
    26f2:	d6 df       	rcall	.-84     	; 0x26a0 <__udivmodsi4>
    26f4:	07 fc       	sbrc	r0, 7
    26f6:	02 d0       	rcall	.+4      	; 0x26fc <__divmodsi4_neg2>
    26f8:	46 f4       	brtc	.+16     	; 0x270a <__divmodsi4_exit>
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <__negsi2>

000026fc <__divmodsi4_neg2>:
    26fc:	50 95       	com	r21
    26fe:	40 95       	com	r20
    2700:	30 95       	com	r19
    2702:	21 95       	neg	r18
    2704:	3f 4f       	sbci	r19, 0xFF	; 255
    2706:	4f 4f       	sbci	r20, 0xFF	; 255
    2708:	5f 4f       	sbci	r21, 0xFF	; 255

0000270a <__divmodsi4_exit>:
    270a:	08 95       	ret

0000270c <__negsi2>:
    270c:	90 95       	com	r25
    270e:	80 95       	com	r24
    2710:	70 95       	com	r23
    2712:	61 95       	neg	r22
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	8f 4f       	sbci	r24, 0xFF	; 255
    2718:	9f 4f       	sbci	r25, 0xFF	; 255
    271a:	08 95       	ret

0000271c <__tablejump2__>:
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	88 1f       	adc	r24, r24
    2722:	8b bf       	out	0x3b, r24	; 59
    2724:	07 90       	elpm	r0, Z+
    2726:	f6 91       	elpm	r31, Z
    2728:	e0 2d       	mov	r30, r0
    272a:	19 94       	eijmp

0000272c <malloc>:
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	82 30       	cpi	r24, 0x02	; 2
    2736:	91 05       	cpc	r25, r1
    2738:	10 f4       	brcc	.+4      	; 0x273e <malloc+0x12>
    273a:	82 e0       	ldi	r24, 0x02	; 2
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	e0 91 74 08 	lds	r30, 0x0874	; 0x800874 <__flp>
    2742:	f0 91 75 08 	lds	r31, 0x0875	; 0x800875 <__flp+0x1>
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	a0 e0       	ldi	r26, 0x00	; 0
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	30 97       	sbiw	r30, 0x00	; 0
    2750:	19 f1       	breq	.+70     	; 0x2798 <malloc+0x6c>
    2752:	40 81       	ld	r20, Z
    2754:	51 81       	ldd	r21, Z+1	; 0x01
    2756:	02 81       	ldd	r16, Z+2	; 0x02
    2758:	13 81       	ldd	r17, Z+3	; 0x03
    275a:	48 17       	cp	r20, r24
    275c:	59 07       	cpc	r21, r25
    275e:	c8 f0       	brcs	.+50     	; 0x2792 <malloc+0x66>
    2760:	84 17       	cp	r24, r20
    2762:	95 07       	cpc	r25, r21
    2764:	69 f4       	brne	.+26     	; 0x2780 <malloc+0x54>
    2766:	10 97       	sbiw	r26, 0x00	; 0
    2768:	31 f0       	breq	.+12     	; 0x2776 <malloc+0x4a>
    276a:	12 96       	adiw	r26, 0x02	; 2
    276c:	0c 93       	st	X, r16
    276e:	12 97       	sbiw	r26, 0x02	; 2
    2770:	13 96       	adiw	r26, 0x03	; 3
    2772:	1c 93       	st	X, r17
    2774:	27 c0       	rjmp	.+78     	; 0x27c4 <malloc+0x98>
    2776:	00 93 74 08 	sts	0x0874, r16	; 0x800874 <__flp>
    277a:	10 93 75 08 	sts	0x0875, r17	; 0x800875 <__flp+0x1>
    277e:	22 c0       	rjmp	.+68     	; 0x27c4 <malloc+0x98>
    2780:	21 15       	cp	r18, r1
    2782:	31 05       	cpc	r19, r1
    2784:	19 f0       	breq	.+6      	; 0x278c <malloc+0x60>
    2786:	42 17       	cp	r20, r18
    2788:	53 07       	cpc	r21, r19
    278a:	18 f4       	brcc	.+6      	; 0x2792 <malloc+0x66>
    278c:	9a 01       	movw	r18, r20
    278e:	bd 01       	movw	r22, r26
    2790:	ef 01       	movw	r28, r30
    2792:	df 01       	movw	r26, r30
    2794:	f8 01       	movw	r30, r16
    2796:	db cf       	rjmp	.-74     	; 0x274e <malloc+0x22>
    2798:	21 15       	cp	r18, r1
    279a:	31 05       	cpc	r19, r1
    279c:	f9 f0       	breq	.+62     	; 0x27dc <malloc+0xb0>
    279e:	28 1b       	sub	r18, r24
    27a0:	39 0b       	sbc	r19, r25
    27a2:	24 30       	cpi	r18, 0x04	; 4
    27a4:	31 05       	cpc	r19, r1
    27a6:	80 f4       	brcc	.+32     	; 0x27c8 <malloc+0x9c>
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	61 15       	cp	r22, r1
    27ae:	71 05       	cpc	r23, r1
    27b0:	21 f0       	breq	.+8      	; 0x27ba <malloc+0x8e>
    27b2:	fb 01       	movw	r30, r22
    27b4:	93 83       	std	Z+3, r25	; 0x03
    27b6:	82 83       	std	Z+2, r24	; 0x02
    27b8:	04 c0       	rjmp	.+8      	; 0x27c2 <malloc+0x96>
    27ba:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <__flp+0x1>
    27be:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <__flp>
    27c2:	fe 01       	movw	r30, r28
    27c4:	32 96       	adiw	r30, 0x02	; 2
    27c6:	44 c0       	rjmp	.+136    	; 0x2850 <malloc+0x124>
    27c8:	fe 01       	movw	r30, r28
    27ca:	e2 0f       	add	r30, r18
    27cc:	f3 1f       	adc	r31, r19
    27ce:	81 93       	st	Z+, r24
    27d0:	91 93       	st	Z+, r25
    27d2:	22 50       	subi	r18, 0x02	; 2
    27d4:	31 09       	sbc	r19, r1
    27d6:	39 83       	std	Y+1, r19	; 0x01
    27d8:	28 83       	st	Y, r18
    27da:	3a c0       	rjmp	.+116    	; 0x2850 <malloc+0x124>
    27dc:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <__brkval>
    27e0:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <__brkval+0x1>
    27e4:	23 2b       	or	r18, r19
    27e6:	41 f4       	brne	.+16     	; 0x27f8 <malloc+0xcc>
    27e8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    27ec:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    27f0:	30 93 73 08 	sts	0x0873, r19	; 0x800873 <__brkval+0x1>
    27f4:	20 93 72 08 	sts	0x0872, r18	; 0x800872 <__brkval>
    27f8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    27fc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2800:	21 15       	cp	r18, r1
    2802:	31 05       	cpc	r19, r1
    2804:	41 f4       	brne	.+16     	; 0x2816 <malloc+0xea>
    2806:	2d b7       	in	r18, 0x3d	; 61
    2808:	3e b7       	in	r19, 0x3e	; 62
    280a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    280e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2812:	24 1b       	sub	r18, r20
    2814:	35 0b       	sbc	r19, r21
    2816:	e0 91 72 08 	lds	r30, 0x0872	; 0x800872 <__brkval>
    281a:	f0 91 73 08 	lds	r31, 0x0873	; 0x800873 <__brkval+0x1>
    281e:	e2 17       	cp	r30, r18
    2820:	f3 07       	cpc	r31, r19
    2822:	a0 f4       	brcc	.+40     	; 0x284c <malloc+0x120>
    2824:	2e 1b       	sub	r18, r30
    2826:	3f 0b       	sbc	r19, r31
    2828:	28 17       	cp	r18, r24
    282a:	39 07       	cpc	r19, r25
    282c:	78 f0       	brcs	.+30     	; 0x284c <malloc+0x120>
    282e:	ac 01       	movw	r20, r24
    2830:	4e 5f       	subi	r20, 0xFE	; 254
    2832:	5f 4f       	sbci	r21, 0xFF	; 255
    2834:	24 17       	cp	r18, r20
    2836:	35 07       	cpc	r19, r21
    2838:	48 f0       	brcs	.+18     	; 0x284c <malloc+0x120>
    283a:	4e 0f       	add	r20, r30
    283c:	5f 1f       	adc	r21, r31
    283e:	50 93 73 08 	sts	0x0873, r21	; 0x800873 <__brkval+0x1>
    2842:	40 93 72 08 	sts	0x0872, r20	; 0x800872 <__brkval>
    2846:	81 93       	st	Z+, r24
    2848:	91 93       	st	Z+, r25
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <malloc+0x124>
    284c:	e0 e0       	ldi	r30, 0x00	; 0
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	cf 01       	movw	r24, r30
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	08 95       	ret

0000285c <free>:
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	09 f4       	brne	.+2      	; 0x2866 <free+0xa>
    2864:	81 c0       	rjmp	.+258    	; 0x2968 <free+0x10c>
    2866:	fc 01       	movw	r30, r24
    2868:	32 97       	sbiw	r30, 0x02	; 2
    286a:	13 82       	std	Z+3, r1	; 0x03
    286c:	12 82       	std	Z+2, r1	; 0x02
    286e:	a0 91 74 08 	lds	r26, 0x0874	; 0x800874 <__flp>
    2872:	b0 91 75 08 	lds	r27, 0x0875	; 0x800875 <__flp+0x1>
    2876:	10 97       	sbiw	r26, 0x00	; 0
    2878:	81 f4       	brne	.+32     	; 0x289a <free+0x3e>
    287a:	20 81       	ld	r18, Z
    287c:	31 81       	ldd	r19, Z+1	; 0x01
    287e:	82 0f       	add	r24, r18
    2880:	93 1f       	adc	r25, r19
    2882:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <__brkval>
    2886:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <__brkval+0x1>
    288a:	28 17       	cp	r18, r24
    288c:	39 07       	cpc	r19, r25
    288e:	51 f5       	brne	.+84     	; 0x28e4 <free+0x88>
    2890:	f0 93 73 08 	sts	0x0873, r31	; 0x800873 <__brkval+0x1>
    2894:	e0 93 72 08 	sts	0x0872, r30	; 0x800872 <__brkval>
    2898:	67 c0       	rjmp	.+206    	; 0x2968 <free+0x10c>
    289a:	ed 01       	movw	r28, r26
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	ce 17       	cp	r28, r30
    28a2:	df 07       	cpc	r29, r31
    28a4:	40 f4       	brcc	.+16     	; 0x28b6 <free+0x5a>
    28a6:	4a 81       	ldd	r20, Y+2	; 0x02
    28a8:	5b 81       	ldd	r21, Y+3	; 0x03
    28aa:	9e 01       	movw	r18, r28
    28ac:	41 15       	cp	r20, r1
    28ae:	51 05       	cpc	r21, r1
    28b0:	f1 f0       	breq	.+60     	; 0x28ee <free+0x92>
    28b2:	ea 01       	movw	r28, r20
    28b4:	f5 cf       	rjmp	.-22     	; 0x28a0 <free+0x44>
    28b6:	d3 83       	std	Z+3, r29	; 0x03
    28b8:	c2 83       	std	Z+2, r28	; 0x02
    28ba:	40 81       	ld	r20, Z
    28bc:	51 81       	ldd	r21, Z+1	; 0x01
    28be:	84 0f       	add	r24, r20
    28c0:	95 1f       	adc	r25, r21
    28c2:	c8 17       	cp	r28, r24
    28c4:	d9 07       	cpc	r29, r25
    28c6:	59 f4       	brne	.+22     	; 0x28de <free+0x82>
    28c8:	88 81       	ld	r24, Y
    28ca:	99 81       	ldd	r25, Y+1	; 0x01
    28cc:	84 0f       	add	r24, r20
    28ce:	95 1f       	adc	r25, r21
    28d0:	02 96       	adiw	r24, 0x02	; 2
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	93 83       	std	Z+3, r25	; 0x03
    28dc:	82 83       	std	Z+2, r24	; 0x02
    28de:	21 15       	cp	r18, r1
    28e0:	31 05       	cpc	r19, r1
    28e2:	29 f4       	brne	.+10     	; 0x28ee <free+0x92>
    28e4:	f0 93 75 08 	sts	0x0875, r31	; 0x800875 <__flp+0x1>
    28e8:	e0 93 74 08 	sts	0x0874, r30	; 0x800874 <__flp>
    28ec:	3d c0       	rjmp	.+122    	; 0x2968 <free+0x10c>
    28ee:	e9 01       	movw	r28, r18
    28f0:	fb 83       	std	Y+3, r31	; 0x03
    28f2:	ea 83       	std	Y+2, r30	; 0x02
    28f4:	49 91       	ld	r20, Y+
    28f6:	59 91       	ld	r21, Y+
    28f8:	c4 0f       	add	r28, r20
    28fa:	d5 1f       	adc	r29, r21
    28fc:	ec 17       	cp	r30, r28
    28fe:	fd 07       	cpc	r31, r29
    2900:	61 f4       	brne	.+24     	; 0x291a <free+0xbe>
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	84 0f       	add	r24, r20
    2908:	95 1f       	adc	r25, r21
    290a:	02 96       	adiw	r24, 0x02	; 2
    290c:	e9 01       	movw	r28, r18
    290e:	99 83       	std	Y+1, r25	; 0x01
    2910:	88 83       	st	Y, r24
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	9b 83       	std	Y+3, r25	; 0x03
    2918:	8a 83       	std	Y+2, r24	; 0x02
    291a:	e0 e0       	ldi	r30, 0x00	; 0
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	8d 91       	ld	r24, X+
    2922:	9c 91       	ld	r25, X
    2924:	13 97       	sbiw	r26, 0x03	; 3
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	19 f0       	breq	.+6      	; 0x2930 <free+0xd4>
    292a:	fd 01       	movw	r30, r26
    292c:	dc 01       	movw	r26, r24
    292e:	f7 cf       	rjmp	.-18     	; 0x291e <free+0xc2>
    2930:	8d 91       	ld	r24, X+
    2932:	9c 91       	ld	r25, X
    2934:	11 97       	sbiw	r26, 0x01	; 1
    2936:	9d 01       	movw	r18, r26
    2938:	2e 5f       	subi	r18, 0xFE	; 254
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	82 0f       	add	r24, r18
    293e:	93 1f       	adc	r25, r19
    2940:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <__brkval>
    2944:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <__brkval+0x1>
    2948:	28 17       	cp	r18, r24
    294a:	39 07       	cpc	r19, r25
    294c:	69 f4       	brne	.+26     	; 0x2968 <free+0x10c>
    294e:	30 97       	sbiw	r30, 0x00	; 0
    2950:	29 f4       	brne	.+10     	; 0x295c <free+0x100>
    2952:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <__flp+0x1>
    2956:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <__flp>
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <free+0x104>
    295c:	13 82       	std	Z+3, r1	; 0x03
    295e:	12 82       	std	Z+2, r1	; 0x02
    2960:	b0 93 73 08 	sts	0x0873, r27	; 0x800873 <__brkval+0x1>
    2964:	a0 93 72 08 	sts	0x0872, r26	; 0x800872 <__brkval>
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	08 95       	ret

0000296e <realloc>:
    296e:	6f 92       	push	r6
    2970:	7f 92       	push	r7
    2972:	8f 92       	push	r8
    2974:	9f 92       	push	r9
    2976:	af 92       	push	r10
    2978:	bf 92       	push	r11
    297a:	cf 92       	push	r12
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	81 f4       	brne	.+32     	; 0x29ae <realloc+0x40>
    298e:	cb 01       	movw	r24, r22
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	bf 90       	pop	r11
    29a2:	af 90       	pop	r10
    29a4:	9f 90       	pop	r9
    29a6:	8f 90       	pop	r8
    29a8:	7f 90       	pop	r7
    29aa:	6f 90       	pop	r6
    29ac:	bf ce       	rjmp	.-642    	; 0x272c <malloc>
    29ae:	fc 01       	movw	r30, r24
    29b0:	e6 0f       	add	r30, r22
    29b2:	f7 1f       	adc	r31, r23
    29b4:	9c 01       	movw	r18, r24
    29b6:	22 50       	subi	r18, 0x02	; 2
    29b8:	31 09       	sbc	r19, r1
    29ba:	e2 17       	cp	r30, r18
    29bc:	f3 07       	cpc	r31, r19
    29be:	08 f4       	brcc	.+2      	; 0x29c2 <realloc+0x54>
    29c0:	a5 c0       	rjmp	.+330    	; 0x2b0c <realloc+0x19e>
    29c2:	ec 01       	movw	r28, r24
    29c4:	d9 01       	movw	r26, r18
    29c6:	0d 91       	ld	r16, X+
    29c8:	1c 91       	ld	r17, X
    29ca:	11 97       	sbiw	r26, 0x01	; 1
    29cc:	06 17       	cp	r16, r22
    29ce:	17 07       	cpc	r17, r23
    29d0:	a8 f0       	brcs	.+42     	; 0x29fc <realloc+0x8e>
    29d2:	05 30       	cpi	r16, 0x05	; 5
    29d4:	11 05       	cpc	r17, r1
    29d6:	08 f4       	brcc	.+2      	; 0x29da <realloc+0x6c>
    29d8:	97 c0       	rjmp	.+302    	; 0x2b08 <realloc+0x19a>
    29da:	c8 01       	movw	r24, r16
    29dc:	04 97       	sbiw	r24, 0x04	; 4
    29de:	86 17       	cp	r24, r22
    29e0:	97 07       	cpc	r25, r23
    29e2:	08 f4       	brcc	.+2      	; 0x29e6 <realloc+0x78>
    29e4:	91 c0       	rjmp	.+290    	; 0x2b08 <realloc+0x19a>
    29e6:	02 50       	subi	r16, 0x02	; 2
    29e8:	11 09       	sbc	r17, r1
    29ea:	06 1b       	sub	r16, r22
    29ec:	17 0b       	sbc	r17, r23
    29ee:	01 93       	st	Z+, r16
    29f0:	11 93       	st	Z+, r17
    29f2:	6d 93       	st	X+, r22
    29f4:	7c 93       	st	X, r23
    29f6:	cf 01       	movw	r24, r30
    29f8:	31 df       	rcall	.-414    	; 0x285c <free>
    29fa:	86 c0       	rjmp	.+268    	; 0x2b08 <realloc+0x19a>
    29fc:	5b 01       	movw	r10, r22
    29fe:	a0 1a       	sub	r10, r16
    2a00:	b1 0a       	sbc	r11, r17
    2a02:	4c 01       	movw	r8, r24
    2a04:	80 0e       	add	r8, r16
    2a06:	91 1e       	adc	r9, r17
    2a08:	a0 91 74 08 	lds	r26, 0x0874	; 0x800874 <__flp>
    2a0c:	b0 91 75 08 	lds	r27, 0x0875	; 0x800875 <__flp+0x1>
    2a10:	61 2c       	mov	r6, r1
    2a12:	71 2c       	mov	r7, r1
    2a14:	e1 2c       	mov	r14, r1
    2a16:	f1 2c       	mov	r15, r1
    2a18:	10 97       	sbiw	r26, 0x00	; 0
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <realloc+0xb0>
    2a1c:	46 c0       	rjmp	.+140    	; 0x2aaa <realloc+0x13c>
    2a1e:	8d 91       	ld	r24, X+
    2a20:	9c 91       	ld	r25, X
    2a22:	11 97       	sbiw	r26, 0x01	; 1
    2a24:	a8 15       	cp	r26, r8
    2a26:	b9 05       	cpc	r27, r9
    2a28:	b1 f5       	brne	.+108    	; 0x2a96 <realloc+0x128>
    2a2a:	6c 01       	movw	r12, r24
    2a2c:	42 e0       	ldi	r20, 0x02	; 2
    2a2e:	c4 0e       	add	r12, r20
    2a30:	d1 1c       	adc	r13, r1
    2a32:	ca 14       	cp	r12, r10
    2a34:	db 04       	cpc	r13, r11
    2a36:	78 f1       	brcs	.+94     	; 0x2a96 <realloc+0x128>
    2a38:	4c 01       	movw	r8, r24
    2a3a:	8a 18       	sub	r8, r10
    2a3c:	9b 08       	sbc	r9, r11
    2a3e:	64 01       	movw	r12, r8
    2a40:	42 e0       	ldi	r20, 0x02	; 2
    2a42:	c4 0e       	add	r12, r20
    2a44:	d1 1c       	adc	r13, r1
    2a46:	12 96       	adiw	r26, 0x02	; 2
    2a48:	bc 90       	ld	r11, X
    2a4a:	12 97       	sbiw	r26, 0x02	; 2
    2a4c:	13 96       	adiw	r26, 0x03	; 3
    2a4e:	ac 91       	ld	r26, X
    2a50:	b5 e0       	ldi	r27, 0x05	; 5
    2a52:	cb 16       	cp	r12, r27
    2a54:	d1 04       	cpc	r13, r1
    2a56:	40 f0       	brcs	.+16     	; 0x2a68 <realloc+0xfa>
    2a58:	b2 82       	std	Z+2, r11	; 0x02
    2a5a:	a3 83       	std	Z+3, r26	; 0x03
    2a5c:	91 82       	std	Z+1, r9	; 0x01
    2a5e:	80 82       	st	Z, r8
    2a60:	d9 01       	movw	r26, r18
    2a62:	6d 93       	st	X+, r22
    2a64:	7c 93       	st	X, r23
    2a66:	09 c0       	rjmp	.+18     	; 0x2a7a <realloc+0x10c>
    2a68:	0e 5f       	subi	r16, 0xFE	; 254
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	80 0f       	add	r24, r16
    2a6e:	91 1f       	adc	r25, r17
    2a70:	f9 01       	movw	r30, r18
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	80 83       	st	Z, r24
    2a76:	eb 2d       	mov	r30, r11
    2a78:	fa 2f       	mov	r31, r26
    2a7a:	e1 14       	cp	r14, r1
    2a7c:	f1 04       	cpc	r15, r1
    2a7e:	31 f0       	breq	.+12     	; 0x2a8c <realloc+0x11e>
    2a80:	d7 01       	movw	r26, r14
    2a82:	13 96       	adiw	r26, 0x03	; 3
    2a84:	fc 93       	st	X, r31
    2a86:	ee 93       	st	-X, r30
    2a88:	12 97       	sbiw	r26, 0x02	; 2
    2a8a:	3e c0       	rjmp	.+124    	; 0x2b08 <realloc+0x19a>
    2a8c:	f0 93 75 08 	sts	0x0875, r31	; 0x800875 <__flp+0x1>
    2a90:	e0 93 74 08 	sts	0x0874, r30	; 0x800874 <__flp>
    2a94:	39 c0       	rjmp	.+114    	; 0x2b08 <realloc+0x19a>
    2a96:	68 16       	cp	r6, r24
    2a98:	79 06       	cpc	r7, r25
    2a9a:	08 f4       	brcc	.+2      	; 0x2a9e <realloc+0x130>
    2a9c:	3c 01       	movw	r6, r24
    2a9e:	7d 01       	movw	r14, r26
    2aa0:	12 96       	adiw	r26, 0x02	; 2
    2aa2:	0d 90       	ld	r0, X+
    2aa4:	bc 91       	ld	r27, X
    2aa6:	a0 2d       	mov	r26, r0
    2aa8:	b7 cf       	rjmp	.-146    	; 0x2a18 <realloc+0xaa>
    2aaa:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <__brkval>
    2aae:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <__brkval+0x1>
    2ab2:	88 16       	cp	r8, r24
    2ab4:	99 06       	cpc	r9, r25
    2ab6:	e1 f4       	brne	.+56     	; 0x2af0 <realloc+0x182>
    2ab8:	66 16       	cp	r6, r22
    2aba:	77 06       	cpc	r7, r23
    2abc:	c8 f4       	brcc	.+50     	; 0x2af0 <realloc+0x182>
    2abe:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2ac2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	41 f4       	brne	.+16     	; 0x2ada <realloc+0x16c>
    2aca:	8d b7       	in	r24, 0x3d	; 61
    2acc:	9e b7       	in	r25, 0x3e	; 62
    2ace:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2ad2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2ad6:	84 1b       	sub	r24, r20
    2ad8:	95 0b       	sbc	r25, r21
    2ada:	e8 17       	cp	r30, r24
    2adc:	f9 07       	cpc	r31, r25
    2ade:	b0 f4       	brcc	.+44     	; 0x2b0c <realloc+0x19e>
    2ae0:	f0 93 73 08 	sts	0x0873, r31	; 0x800873 <__brkval+0x1>
    2ae4:	e0 93 72 08 	sts	0x0872, r30	; 0x800872 <__brkval>
    2ae8:	f9 01       	movw	r30, r18
    2aea:	71 83       	std	Z+1, r23	; 0x01
    2aec:	60 83       	st	Z, r22
    2aee:	0c c0       	rjmp	.+24     	; 0x2b08 <realloc+0x19a>
    2af0:	cb 01       	movw	r24, r22
    2af2:	1c de       	rcall	.-968    	; 0x272c <malloc>
    2af4:	7c 01       	movw	r14, r24
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	49 f0       	breq	.+18     	; 0x2b0c <realloc+0x19e>
    2afa:	a8 01       	movw	r20, r16
    2afc:	be 01       	movw	r22, r28
    2afe:	3d d0       	rcall	.+122    	; 0x2b7a <memcpy>
    2b00:	ce 01       	movw	r24, r28
    2b02:	ac de       	rcall	.-680    	; 0x285c <free>
    2b04:	c7 01       	movw	r24, r14
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <realloc+0x1a2>
    2b08:	ce 01       	movw	r24, r28
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <realloc+0x1a2>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ff 90       	pop	r15
    2b1a:	ef 90       	pop	r14
    2b1c:	df 90       	pop	r13
    2b1e:	cf 90       	pop	r12
    2b20:	bf 90       	pop	r11
    2b22:	af 90       	pop	r10
    2b24:	9f 90       	pop	r9
    2b26:	8f 90       	pop	r8
    2b28:	7f 90       	pop	r7
    2b2a:	6f 90       	pop	r6
    2b2c:	08 95       	ret

00002b2e <atol>:
    2b2e:	1f 93       	push	r17
    2b30:	fc 01       	movw	r30, r24
    2b32:	99 27       	eor	r25, r25
    2b34:	88 27       	eor	r24, r24
    2b36:	bc 01       	movw	r22, r24
    2b38:	e8 94       	clt
    2b3a:	11 91       	ld	r17, Z+
    2b3c:	10 32       	cpi	r17, 0x20	; 32
    2b3e:	e9 f3       	breq	.-6      	; 0x2b3a <atol+0xc>
    2b40:	19 30       	cpi	r17, 0x09	; 9
    2b42:	10 f0       	brcs	.+4      	; 0x2b48 <atol+0x1a>
    2b44:	1e 30       	cpi	r17, 0x0E	; 14
    2b46:	c8 f3       	brcs	.-14     	; 0x2b3a <atol+0xc>
    2b48:	1b 32       	cpi	r17, 0x2B	; 43
    2b4a:	49 f0       	breq	.+18     	; 0x2b5e <atol+0x30>
    2b4c:	1d 32       	cpi	r17, 0x2D	; 45
    2b4e:	41 f4       	brne	.+16     	; 0x2b60 <atol+0x32>
    2b50:	68 94       	set
    2b52:	05 c0       	rjmp	.+10     	; 0x2b5e <atol+0x30>
    2b54:	22 d0       	rcall	.+68     	; 0x2b9a <__mulsi_const_10>
    2b56:	61 0f       	add	r22, r17
    2b58:	71 1d       	adc	r23, r1
    2b5a:	81 1d       	adc	r24, r1
    2b5c:	91 1d       	adc	r25, r1
    2b5e:	11 91       	ld	r17, Z+
    2b60:	10 53       	subi	r17, 0x30	; 48
    2b62:	1a 30       	cpi	r17, 0x0A	; 10
    2b64:	b8 f3       	brcs	.-18     	; 0x2b54 <atol+0x26>
    2b66:	3e f4       	brtc	.+14     	; 0x2b76 <atol+0x48>
    2b68:	90 95       	com	r25
    2b6a:	80 95       	com	r24
    2b6c:	70 95       	com	r23
    2b6e:	61 95       	neg	r22
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	8f 4f       	sbci	r24, 0xFF	; 255
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	1f 91       	pop	r17
    2b78:	08 95       	ret

00002b7a <memcpy>:
    2b7a:	fb 01       	movw	r30, r22
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <memcpy+0xa>
    2b80:	01 90       	ld	r0, Z+
    2b82:	0d 92       	st	X+, r0
    2b84:	41 50       	subi	r20, 0x01	; 1
    2b86:	50 40       	sbci	r21, 0x00	; 0
    2b88:	d8 f7       	brcc	.-10     	; 0x2b80 <memcpy+0x6>
    2b8a:	08 95       	ret

00002b8c <strcpy>:
    2b8c:	fb 01       	movw	r30, r22
    2b8e:	dc 01       	movw	r26, r24
    2b90:	01 90       	ld	r0, Z+
    2b92:	0d 92       	st	X+, r0
    2b94:	00 20       	and	r0, r0
    2b96:	e1 f7       	brne	.-8      	; 0x2b90 <strcpy+0x4>
    2b98:	08 95       	ret

00002b9a <__mulsi_const_10>:
    2b9a:	59 2f       	mov	r21, r25
    2b9c:	48 2f       	mov	r20, r24
    2b9e:	37 2f       	mov	r19, r23
    2ba0:	26 2f       	mov	r18, r22
    2ba2:	66 0f       	add	r22, r22
    2ba4:	77 1f       	adc	r23, r23
    2ba6:	88 1f       	adc	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	66 0f       	add	r22, r22
    2bac:	77 1f       	adc	r23, r23
    2bae:	88 1f       	adc	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	62 0f       	add	r22, r18
    2bb4:	73 1f       	adc	r23, r19
    2bb6:	84 1f       	adc	r24, r20
    2bb8:	95 1f       	adc	r25, r21
    2bba:	66 0f       	add	r22, r22
    2bbc:	77 1f       	adc	r23, r23
    2bbe:	88 1f       	adc	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	08 95       	ret

00002bc4 <__do_global_dtors>:
    2bc4:	11 e0       	ldi	r17, 0x01	; 1
    2bc6:	c9 e1       	ldi	r28, 0x19	; 25
    2bc8:	d1 e0       	ldi	r29, 0x01	; 1
    2bca:	00 e0       	ldi	r16, 0x00	; 0
    2bcc:	05 c0       	rjmp	.+10     	; 0x2bd8 <__do_global_dtors+0x14>
    2bce:	80 2f       	mov	r24, r16
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	a4 dd       	rcall	.-1208   	; 0x271c <__tablejump2__>
    2bd4:	21 96       	adiw	r28, 0x01	; 1
    2bd6:	01 1d       	adc	r16, r1
    2bd8:	ca 31       	cpi	r28, 0x1A	; 26
    2bda:	d1 07       	cpc	r29, r17
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	08 07       	cpc	r16, r24
    2be0:	b1 f7       	brne	.-20     	; 0x2bce <__do_global_dtors+0xa>
    2be2:	f8 94       	cli

00002be4 <__stop_program>:
    2be4:	ff cf       	rjmp	.-2      	; 0x2be4 <__stop_program>
