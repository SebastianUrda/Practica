
MaximTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00002af8  00002b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000616  00800160  00800160  00002bec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000720  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f1e7  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026db  00000000  00000000  00012563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c38  00000000  00000000  00014c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001990  00000000  00000000  00018878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dec  00000000  00000000  0001a208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000090f5  00000000  00000000  0001cff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  000260e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 00 	jmp	0xde	; 0xde <__dtors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_1>
       8:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_2>
       c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      40:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_16>
      44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      48:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_18>
      4c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_19>
      50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
      68:	3c 09       	sbc	r19, r12
      6a:	43 09       	sbc	r20, r3
      6c:	4a 09       	sbc	r20, r10
      6e:	51 09       	sbc	r21, r1
      70:	58 09       	sbc	r21, r8
      72:	6f 09       	sbc	r22, r15
      74:	5f 09       	sbc	r21, r15
      76:	6f 09       	sbc	r22, r15
      78:	66 09       	sbc	r22, r6
      7a:	e0 09       	sbc	r30, r0
      7c:	e6 09       	sbc	r30, r6
      7e:	ec 09       	sbc	r30, r12
      80:	f2 09       	sbc	r31, r2
      82:	f8 09       	sbc	r31, r8
      84:	fe 09       	sbc	r31, r14
      86:	04 0a       	sbc	r0, r20

00000088 <__trampolines_end>:
      88:	00 00       	nop
      8a:	00 08       	sbc	r0, r0
      8c:	00 02       	muls	r16, r16
      8e:	01 00       	.word	0x0001	; ????
      90:	00 03       	mulsu	r16, r16
      92:	04 07       	cpc	r16, r20
	...

0000009c <digital_pin_to_bit_mask_PGM>:
      9c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ac:	04 08 10 20                                         ... 

000000b0 <digital_pin_to_port_PGM>:
      b0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c0:	03 03 03 03                                         ....

000000c4 <port_to_output_PGM>:
      c4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ce <port_to_mode_PGM>:
      ce:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d8 <__ctors_start>:
      d8:	e1 02       	muls	r30, r17
      da:	59 05       	cpc	r21, r9

000000dc <__ctors_end>:
      dc:	07 03       	mulsu	r16, r23

000000de <__dtors_end>:
      de:	11 24       	eor	r1, r1
      e0:	1f be       	out	0x3f, r1	; 63
      e2:	cf ef       	ldi	r28, 0xFF	; 255
      e4:	d8 e0       	ldi	r29, 0x08	; 8
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	cd bf       	out	0x3d, r28	; 61

000000ea <__do_copy_data>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	e8 ef       	ldi	r30, 0xF8	; 248
      f2:	fa e2       	ldi	r31, 0x2A	; 42
      f4:	02 c0       	rjmp	.+4      	; 0xfa <__do_copy_data+0x10>
      f6:	05 90       	lpm	r0, Z+
      f8:	0d 92       	st	X+, r0
      fa:	a0 36       	cpi	r26, 0x60	; 96
      fc:	b1 07       	cpc	r27, r17
      fe:	d9 f7       	brne	.-10     	; 0xf6 <__do_copy_data+0xc>

00000100 <__do_clear_bss>:
     100:	27 e0       	ldi	r18, 0x07	; 7
     102:	a0 e6       	ldi	r26, 0x60	; 96
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
     108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
     10a:	a6 37       	cpi	r26, 0x76	; 118
     10c:	b2 07       	cpc	r27, r18
     10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>

00000110 <__do_global_ctors>:
     110:	10 e0       	ldi	r17, 0x00	; 0
     112:	ce e6       	ldi	r28, 0x6E	; 110
     114:	d0 e0       	ldi	r29, 0x00	; 0
     116:	04 c0       	rjmp	.+8      	; 0x120 <__do_global_ctors+0x10>
     118:	21 97       	sbiw	r28, 0x01	; 1
     11a:	fe 01       	movw	r30, r28
     11c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__tablejump2__>
     120:	cc 36       	cpi	r28, 0x6C	; 108
     122:	d1 07       	cpc	r29, r17
     124:	c9 f7       	brne	.-14     	; 0x118 <__do_global_ctors+0x8>
     126:	0e 94 9f 05 	call	0xb3e	; 0xb3e <main>
     12a:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__do_global_dtors>

0000012e <__bad_interrupt>:
     12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <__vector_1>:
MultiStepper steppers;
int n=0;
bool nRead=false;
//external interrupt for button for next coordinate
ISR(INT0_vect)
{
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	2f 93       	push	r18
     146:	3f 93       	push	r19
     148:	4f 93       	push	r20
     14a:	5f 93       	push	r21
     14c:	6f 93       	push	r22
     14e:	7f 93       	push	r23
     150:	8f 93       	push	r24
     152:	9f 93       	push	r25
     154:	af 93       	push	r26
     156:	bf 93       	push	r27
     158:	ef 93       	push	r30
     15a:	ff 93       	push	r31
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();
     15c:	0e 94 00 07 	call	0xe00	; 0xe00 <millis>
     160:	6b 01       	movw	r12, r22
     162:	7c 01       	movw	r14, r24
  //debouncer strategy
  if (interrupt_time - last_interrupt_time > 200)
     164:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_ZZ10__vector_1E19last_interrupt_time>
     168:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_ZZ10__vector_1E19last_interrupt_time+0x1>
     16c:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <_ZZ10__vector_1E19last_interrupt_time+0x2>
     170:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <_ZZ10__vector_1E19last_interrupt_time+0x3>
     174:	a7 01       	movw	r20, r14
     176:	96 01       	movw	r18, r12
     178:	28 1b       	sub	r18, r24
     17a:	39 0b       	sbc	r19, r25
     17c:	4a 0b       	sbc	r20, r26
     17e:	5b 0b       	sbc	r21, r27
     180:	29 3c       	cpi	r18, 0xC9	; 201
     182:	31 05       	cpc	r19, r1
     184:	41 05       	cpc	r20, r1
     186:	51 05       	cpc	r21, r1
     188:	f8 f0       	brcs	.+62     	; 0x1c8 <__vector_1+0x96>
  {
    if(r<n)
     18a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <r>
     18e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <r+0x1>
     192:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <n>
     196:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <n+0x1>
     19a:	82 17       	cp	r24, r18
     19c:	93 07       	cpc	r25, r19
     19e:	34 f4       	brge	.+12     	; 0x1ac <__vector_1+0x7a>
    r++;
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <r+0x1>
     1a6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <r>
     1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <__vector_1+0x82>
    else r=0;
     1ac:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <r+0x1>
     1b0:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <r>
    Serial.print(r);
     1b4:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <r>
     1b8:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <r+0x1>
     1bc:	4a e0       	ldi	r20, 0x0A	; 10
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	8c ec       	ldi	r24, 0xCC	; 204
     1c2:	96 e0       	ldi	r25, 0x06	; 6
     1c4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print5printEii>
  }
  last_interrupt_time = interrupt_time;
     1c8:	c0 92 64 01 	sts	0x0164, r12	; 0x800164 <_ZZ10__vector_1E19last_interrupt_time>
     1cc:	d0 92 65 01 	sts	0x0165, r13	; 0x800165 <_ZZ10__vector_1E19last_interrupt_time+0x1>
     1d0:	e0 92 66 01 	sts	0x0166, r14	; 0x800166 <_ZZ10__vector_1E19last_interrupt_time+0x2>
     1d4:	f0 92 67 01 	sts	0x0167, r15	; 0x800167 <_ZZ10__vector_1E19last_interrupt_time+0x3>
}
     1d8:	ff 91       	pop	r31
     1da:	ef 91       	pop	r30
     1dc:	bf 91       	pop	r27
     1de:	af 91       	pop	r26
     1e0:	9f 91       	pop	r25
     1e2:	8f 91       	pop	r24
     1e4:	7f 91       	pop	r23
     1e6:	6f 91       	pop	r22
     1e8:	5f 91       	pop	r21
     1ea:	4f 91       	pop	r20
     1ec:	3f 91       	pop	r19
     1ee:	2f 91       	pop	r18
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	df 90       	pop	r13
     1f6:	cf 90       	pop	r12
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <__vector_2>:
 //external interrupt for button for previous coordinate
ISR(INT1_vect)
{ 
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	2f 93       	push	r18
     216:	3f 93       	push	r19
     218:	4f 93       	push	r20
     21a:	5f 93       	push	r21
     21c:	6f 93       	push	r22
     21e:	7f 93       	push	r23
     220:	8f 93       	push	r24
     222:	9f 93       	push	r25
     224:	af 93       	push	r26
     226:	bf 93       	push	r27
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();
     22c:	0e 94 00 07 	call	0xe00	; 0xe00 <millis>
     230:	6b 01       	movw	r12, r22
     232:	7c 01       	movw	r14, r24
   //debouncer strategy
  if (interrupt_time - last_interrupt_time > 200)
     234:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     238:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     23c:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <__data_end+0x2>
     240:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <__data_end+0x3>
     244:	a7 01       	movw	r20, r14
     246:	96 01       	movw	r18, r12
     248:	28 1b       	sub	r18, r24
     24a:	39 0b       	sbc	r19, r25
     24c:	4a 0b       	sbc	r20, r26
     24e:	5b 0b       	sbc	r21, r27
     250:	29 3c       	cpi	r18, 0xC9	; 201
     252:	31 05       	cpc	r19, r1
     254:	41 05       	cpc	r20, r1
     256:	51 05       	cpc	r21, r1
     258:	d8 f0       	brcs	.+54     	; 0x290 <__vector_2+0x8e>
  {
    if(r>0)
     25a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <r>
     25e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <r+0x1>
     262:	18 16       	cp	r1, r24
     264:	19 06       	cpc	r1, r25
     266:	14 f4       	brge	.+4      	; 0x26c <__vector_2+0x6a>
    r--;
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	04 c0       	rjmp	.+8      	; 0x274 <__vector_2+0x72>
    else r=n;
     26c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <n>
     270:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <n+0x1>
     274:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <r+0x1>
     278:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <r>
    Serial.print(r);
     27c:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <r>
     280:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <r+0x1>
     284:	4a e0       	ldi	r20, 0x0A	; 10
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	8c ec       	ldi	r24, 0xCC	; 204
     28a:	96 e0       	ldi	r25, 0x06	; 6
     28c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print5printEii>
  }
  last_interrupt_time = interrupt_time;
     290:	c0 92 60 01 	sts	0x0160, r12	; 0x800160 <__data_end>
     294:	d0 92 61 01 	sts	0x0161, r13	; 0x800161 <__data_end+0x1>
     298:	e0 92 62 01 	sts	0x0162, r14	; 0x800162 <__data_end+0x2>
     29c:	f0 92 63 01 	sts	0x0163, r15	; 0x800163 <__data_end+0x3>
}
     2a0:	ff 91       	pop	r31
     2a2:	ef 91       	pop	r30
     2a4:	bf 91       	pop	r27
     2a6:	af 91       	pop	r26
     2a8:	9f 91       	pop	r25
     2aa:	8f 91       	pop	r24
     2ac:	7f 91       	pop	r23
     2ae:	6f 91       	pop	r22
     2b0:	5f 91       	pop	r21
     2b2:	4f 91       	pop	r20
     2b4:	3f 91       	pop	r19
     2b6:	2f 91       	pop	r18
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <_Z9calibratev>:
void calibrate()
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	60 97       	sbiw	r28, 0x10	; 16
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
  myStepperY.setMaxSpeed(100);//Make motors move to blocks
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	68 ec       	ldi	r22, 0xC8	; 200
     2e4:	72 e4       	ldi	r23, 0x42	; 66
     2e6:	84 e4       	ldi	r24, 0x44	; 68
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN12AccelStepper11setMaxSpeedEf>
  myStepperX.setMaxSpeed(100);
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	68 ec       	ldi	r22, 0xC8	; 200
     2f4:	72 e4       	ldi	r23, 0x42	; 66
     2f6:	88 e8       	ldi	r24, 0x88	; 136
     2f8:	96 e0       	ldi	r25, 0x06	; 6
     2fa:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN12AccelStepper11setMaxSpeedEf>
  steppers.addStepper(myStepperY);
     2fe:	64 e4       	ldi	r22, 0x44	; 68
     300:	76 e0       	ldi	r23, 0x06	; 6
     302:	8b e6       	ldi	r24, 0x6B	; 107
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN12MultiStepper10addStepperER12AccelStepper>
  steppers.addStepper(myStepperX);
     30a:	68 e8       	ldi	r22, 0x88	; 136
     30c:	76 e0       	ldi	r23, 0x06	; 6
     30e:	8b e6       	ldi	r24, 0x6B	; 107
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN12MultiStepper10addStepperER12AccelStepper>
  long positions[2];
  long positions1[2];
  positions[0] = -360;
     316:	88 e9       	ldi	r24, 0x98	; 152
     318:	9e ef       	ldi	r25, 0xFE	; 254
     31a:	af ef       	ldi	r26, 0xFF	; 255
     31c:	bf ef       	ldi	r27, 0xFF	; 255
     31e:	89 87       	std	Y+9, r24	; 0x09
     320:	9a 87       	std	Y+10, r25	; 0x0a
     322:	ab 87       	std	Y+11, r26	; 0x0b
     324:	bc 87       	std	Y+12, r27	; 0x0c
  positions[1] = 360;
     326:	88 e6       	ldi	r24, 0x68	; 104
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	a0 e0       	ldi	r26, 0x00	; 0
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	8d 87       	std	Y+13, r24	; 0x0d
     330:	9e 87       	std	Y+14, r25	; 0x0e
     332:	af 87       	std	Y+15, r26	; 0x0f
     334:	b8 8b       	std	Y+16, r27	; 0x10
  steppers.moveTo(positions);
     336:	be 01       	movw	r22, r28
     338:	67 5f       	subi	r22, 0xF7	; 247
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	8b e6       	ldi	r24, 0x6B	; 107
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <_ZN12MultiStepper6moveToEPl>
  steppers.runSpeedToPosition();
     344:	8b e6       	ldi	r24, 0x6B	; 107
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN12MultiStepper18runSpeedToPositionEv>
  delay(100);
     34c:	64 e6       	ldi	r22, 0x64	; 100
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 31 07 	call	0xe62	; 0xe62 <delay>
  myStepperY.setCurrentPosition(0);
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	ba 01       	movw	r22, r20
     35e:	84 e4       	ldi	r24, 0x44	; 68
     360:	96 e0       	ldi	r25, 0x06	; 6
     362:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN12AccelStepper18setCurrentPositionEl>
  myStepperX.setCurrentPosition(0);
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	ba 01       	movw	r22, r20
     36c:	88 e8       	ldi	r24, 0x88	; 136
     36e:	96 e0       	ldi	r25, 0x06	; 6
     370:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN12AccelStepper18setCurrentPositionEl>
  //turn motors until laser point is visible
  positions1[0] = 45;
     374:	8d e2       	ldi	r24, 0x2D	; 45
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a0 e0       	ldi	r26, 0x00	; 0
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	9a 83       	std	Y+2, r25	; 0x02
     380:	ab 83       	std	Y+3, r26	; 0x03
     382:	bc 83       	std	Y+4, r27	; 0x04
  positions1[1] = -45;
     384:	83 ed       	ldi	r24, 0xD3	; 211
     386:	9f ef       	ldi	r25, 0xFF	; 255
     388:	af ef       	ldi	r26, 0xFF	; 255
     38a:	bf ef       	ldi	r27, 0xFF	; 255
     38c:	8d 83       	std	Y+5, r24	; 0x05
     38e:	9e 83       	std	Y+6, r25	; 0x06
     390:	af 83       	std	Y+7, r26	; 0x07
     392:	b8 87       	std	Y+8, r27	; 0x08
  steppers.moveTo(positions1);
     394:	be 01       	movw	r22, r28
     396:	6f 5f       	subi	r22, 0xFF	; 255
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	8b e6       	ldi	r24, 0x6B	; 107
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <_ZN12MultiStepper6moveToEPl>
  steppers.runSpeedToPosition();
     3a2:	8b e6       	ldi	r24, 0x6B	; 107
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN12MultiStepper18runSpeedToPositionEv>
  delay(100);
     3aa:	64 e6       	ldi	r22, 0x64	; 100
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 31 07 	call	0xe62	; 0xe62 <delay>
  myStepperY.setCurrentPosition(0);
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	ba 01       	movw	r22, r20
     3bc:	84 e4       	ldi	r24, 0x44	; 68
     3be:	96 e0       	ldi	r25, 0x06	; 6
     3c0:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN12AccelStepper18setCurrentPositionEl>
  myStepperX.setCurrentPosition(0);
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	ba 01       	movw	r22, r20
     3ca:	88 e8       	ldi	r24, 0x88	; 136
     3cc:	96 e0       	ldi	r25, 0x06	; 6
     3ce:	0e 94 be 0b 	call	0x177c	; 0x177c <_ZN12AccelStepper18setCurrentPositionEl>
  Serial.println("DONE!");
     3d2:	66 e0       	ldi	r22, 0x06	; 6
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8c ec       	ldi	r24, 0xCC	; 204
     3d8:	96 e0       	ldi	r25, 0x06	; 6
     3da:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print7printlnEPKc>
  //turn motors at high speed
  myStepperX.setSpeed(9999);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	5c e3       	ldi	r21, 0x3C	; 60
     3e2:	6c e1       	ldi	r22, 0x1C	; 28
     3e4:	76 e4       	ldi	r23, 0x46	; 70
     3e6:	88 e8       	ldi	r24, 0x88	; 136
     3e8:	96 e0       	ldi	r25, 0x06	; 6
     3ea:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN12AccelStepper8setSpeedEf>
  myStepperY.setSpeed(9999);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	5c e3       	ldi	r21, 0x3C	; 60
     3f2:	6c e1       	ldi	r22, 0x1C	; 28
     3f4:	76 e4       	ldi	r23, 0x46	; 70
     3f6:	84 e4       	ldi	r24, 0x44	; 68
     3f8:	96 e0       	ldi	r25, 0x06	; 6
     3fa:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN12AccelStepper8setSpeedEf>
  state=1;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <state+0x1>
     406:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <state>
}
     40a:	60 96       	adiw	r28, 0x10	; 16
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <_Z7afisarev>:
      }
    }
  }
}
void afisare()
{
     41c:	cf 93       	push	r28
  Serial.println("Matrix Full");
     41e:	6c e0       	ldi	r22, 0x0C	; 12
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	8c ec       	ldi	r24, 0xCC	; 204
     424:	96 e0       	ldi	r25, 0x06	; 6
     426:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print7printlnEPKc>
  for(row=0;row<n;row++){
     42a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <row+0x1>
     42e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <row>
    for(col=0;col<6;col++){
      Serial.print(TabelCoordonate[row][col]);
     432:	c6 e0       	ldi	r28, 0x06	; 6
  }
}
void afisare()
{
  Serial.println("Matrix Full");
  for(row=0;row<n;row++){
     434:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <row>
     438:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <row+0x1>
     43c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <n>
     440:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <n+0x1>
     444:	28 17       	cp	r18, r24
     446:	39 07       	cpc	r19, r25
     448:	0c f0       	brlt	.+2      	; 0x44c <_Z7afisarev+0x30>
     44a:	40 c0       	rjmp	.+128    	; 0x4cc <_Z7afisarev+0xb0>
    for(col=0;col<6;col++){
     44c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <col+0x1>
     450:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <col>
     454:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <col>
     458:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <col+0x1>
     45c:	86 30       	cpi	r24, 0x06	; 6
     45e:	91 05       	cpc	r25, r1
     460:	3c f5       	brge	.+78     	; 0x4b0 <_Z7afisarev+0x94>
      Serial.print(TabelCoordonate[row][col]);
     462:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <row>
     466:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <row+0x1>
     46a:	c2 9f       	mul	r28, r18
     46c:	f0 01       	movw	r30, r0
     46e:	c3 9f       	mul	r28, r19
     470:	f0 0d       	add	r31, r0
     472:	11 24       	eor	r1, r1
     474:	e8 0f       	add	r30, r24
     476:	f9 1f       	adc	r31, r25
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	ec 56       	subi	r30, 0x6C	; 108
     47e:	fe 4f       	sbci	r31, 0xFE	; 254
     480:	60 81       	ld	r22, Z
     482:	71 81       	ldd	r23, Z+1	; 0x01
     484:	4a e0       	ldi	r20, 0x0A	; 10
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	8c ec       	ldi	r24, 0xCC	; 204
     48a:	96 e0       	ldi	r25, 0x06	; 6
     48c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print5printEii>
      Serial.print(" ");
     490:	68 e1       	ldi	r22, 0x18	; 24
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	8c ec       	ldi	r24, 0xCC	; 204
     496:	96 e0       	ldi	r25, 0x06	; 6
     498:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN5Print5printEPKc>
}
void afisare()
{
  Serial.println("Matrix Full");
  for(row=0;row<n;row++){
    for(col=0;col<6;col++){
     49c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <col>
     4a0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <col+0x1>
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <col+0x1>
     4aa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <col>
     4ae:	d2 cf       	rjmp	.-92     	; 0x454 <_Z7afisarev+0x38>
      Serial.print(TabelCoordonate[row][col]);
      Serial.print(" ");
    }
    Serial.println();
     4b0:	8c ec       	ldi	r24, 0xCC	; 204
     4b2:	96 e0       	ldi	r25, 0x06	; 6
     4b4:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN5Print7printlnEv>
  }
}
void afisare()
{
  Serial.println("Matrix Full");
  for(row=0;row<n;row++){
     4b8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <row>
     4bc:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <row+0x1>
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <row+0x1>
     4c6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <row>
     4ca:	b4 cf       	rjmp	.-152    	; 0x434 <_Z7afisarev+0x18>
      Serial.print(TabelCoordonate[row][col]);
      Serial.print(" ");
    }
    Serial.println();
  }
  state=3;
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <state+0x1>
     4d4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <state>
}
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <_Z4workv>:
void work()
{
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	28 97       	sbiw	r28, 0x08	; 8
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
  long pos[2];
  for(int k=0;k<=n;k=k+2)
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
  {
    pos[0] = TabelCoordonate[r][k];
     4fa:	26 e0       	ldi	r18, 0x06	; 6
     4fc:	f2 2e       	mov	r15, r18
  state=3;
}
void work()
{
  long pos[2];
  for(int k=0;k<=n;k=k+2)
     4fe:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <n>
     502:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <n+0x1>
     506:	80 17       	cp	r24, r16
     508:	91 07       	cpc	r25, r17
     50a:	0c f4       	brge	.+2      	; 0x50e <_Z4workv+0x32>
     50c:	4e c0       	rjmp	.+156    	; 0x5aa <_Z4workv+0xce>
  {
    pos[0] = TabelCoordonate[r][k];
     50e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <r>
     512:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <r+0x1>
     516:	f8 9e       	mul	r15, r24
     518:	f0 01       	movw	r30, r0
     51a:	f9 9e       	mul	r15, r25
     51c:	f0 0d       	add	r31, r0
     51e:	11 24       	eor	r1, r1
     520:	df 01       	movw	r26, r30
     522:	a0 0f       	add	r26, r16
     524:	b1 1f       	adc	r27, r17
     526:	aa 0f       	add	r26, r26
     528:	bb 1f       	adc	r27, r27
     52a:	ac 56       	subi	r26, 0x6C	; 108
     52c:	be 4f       	sbci	r27, 0xFE	; 254
     52e:	8d 91       	ld	r24, X+
     530:	9c 91       	ld	r25, X
     532:	09 2e       	mov	r0, r25
     534:	00 0c       	add	r0, r0
     536:	aa 0b       	sbc	r26, r26
     538:	bb 0b       	sbc	r27, r27
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	ab 83       	std	Y+3, r26	; 0x03
     540:	bc 83       	std	Y+4, r27	; 0x04
    pos[1] = TabelCoordonate[r][k+1];
     542:	c8 01       	movw	r24, r16
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	e8 0f       	add	r30, r24
     548:	f9 1f       	adc	r31, r25
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	ec 56       	subi	r30, 0x6C	; 108
     550:	fe 4f       	sbci	r31, 0xFE	; 254
     552:	80 81       	ld	r24, Z
     554:	91 81       	ldd	r25, Z+1	; 0x01
     556:	09 2e       	mov	r0, r25
     558:	00 0c       	add	r0, r0
     55a:	aa 0b       	sbc	r26, r26
     55c:	bb 0b       	sbc	r27, r27
     55e:	8d 83       	std	Y+5, r24	; 0x05
     560:	9e 83       	std	Y+6, r25	; 0x06
     562:	af 83       	std	Y+7, r26	; 0x07
     564:	b8 87       	std	Y+8, r27	; 0x08
    steppers.moveTo(pos);
     566:	be 01       	movw	r22, r28
     568:	6f 5f       	subi	r22, 0xFF	; 255
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	8b e6       	ldi	r24, 0x6B	; 107
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <_ZN12MultiStepper6moveToEPl>
    steppers.runSpeedToPosition(); // Blocks until all are in position
     574:	8b e6       	ldi	r24, 0x6B	; 107
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN12MultiStepper18runSpeedToPositionEv>
    digitalWrite(LED_BUILTIN, HIGH);
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	8d e0       	ldi	r24, 0x0D	; 13
     580:	0e 94 18 08 	call	0x1030	; 0x1030 <digitalWrite>
    delay(50);
     584:	62 e3       	ldi	r22, 0x32	; 50
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 31 07 	call	0xe62	; 0xe62 <delay>
    digitalWrite(LED_BUILTIN, LOW);
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	8d e0       	ldi	r24, 0x0D	; 13
     594:	0e 94 18 08 	call	0x1030	; 0x1030 <digitalWrite>
    delay(50);
     598:	62 e3       	ldi	r22, 0x32	; 50
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 31 07 	call	0xe62	; 0xe62 <delay>
  state=3;
}
void work()
{
  long pos[2];
  for(int k=0;k<=n;k=k+2)
     5a4:	0e 5f       	subi	r16, 0xFE	; 254
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
     5a8:	aa cf       	rjmp	.-172    	; 0x4fe <_Z4workv+0x22>
    digitalWrite(LED_BUILTIN, HIGH);
    delay(50);
    digitalWrite(LED_BUILTIN, LOW);
    delay(50);
  }
}
     5aa:	28 96       	adiw	r28, 0x08	; 8
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	08 95       	ret

000005c2 <_GLOBAL__sub_I_myStepperX>:
    case 0: calibrate(); break;
    case 1: citire(); break;
    case 2: afisare(); break;
    case 3: work(); break;
  }
}
     5c2:	cf 92       	push	r12
     5c4:	ef 92       	push	r14
     5c6:	0f 93       	push	r16
void work();
//End of Auto generated function prototypes by Atmel Studio



AccelStepper myStepperX(AccelStepper::FULL4WIRE, 8,9,10,11);
     5c8:	cc 24       	eor	r12, r12
     5ca:	c3 94       	inc	r12
     5cc:	8b e0       	ldi	r24, 0x0B	; 11
     5ce:	e8 2e       	mov	r14, r24
     5d0:	0a e0       	ldi	r16, 0x0A	; 10
     5d2:	29 e0       	ldi	r18, 0x09	; 9
     5d4:	48 e0       	ldi	r20, 0x08	; 8
     5d6:	64 e0       	ldi	r22, 0x04	; 4
     5d8:	88 e8       	ldi	r24, 0x88	; 136
     5da:	96 e0       	ldi	r25, 0x06	; 6
     5dc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN12AccelStepperC1Ehhhhhb>
AccelStepper myStepperY(AccelStepper::FULL4WIRE,   4,5,6,7);
     5e0:	97 e0       	ldi	r25, 0x07	; 7
     5e2:	e9 2e       	mov	r14, r25
     5e4:	06 e0       	ldi	r16, 0x06	; 6
     5e6:	25 e0       	ldi	r18, 0x05	; 5
     5e8:	44 e0       	ldi	r20, 0x04	; 4
     5ea:	64 e0       	ldi	r22, 0x04	; 4
     5ec:	84 e4       	ldi	r24, 0x44	; 68
     5ee:	96 e0       	ldi	r25, 0x06	; 6
     5f0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN12AccelStepperC1Ehhhhhb>
const int buttonPin = 2;
int buttonState = 0;
int r=0;
int integerValue=0;  // Max value is 65535
char incomingByte;
String inString = "";
     5f4:	68 e3       	ldi	r22, 0x38	; 56
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	80 e8       	ldi	r24, 0x80	; 128
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN6StringC1EPKc>
MultiStepper steppers;
     600:	8b e6       	ldi	r24, 0x6B	; 107
     602:	91 e0       	ldi	r25, 0x01	; 1
    case 0: calibrate(); break;
    case 1: citire(); break;
    case 2: afisare(); break;
    case 3: work(); break;
  }
}
     604:	0f 91       	pop	r16
     606:	ef 90       	pop	r14
     608:	cf 90       	pop	r12
int buttonState = 0;
int r=0;
int integerValue=0;  // Max value is 65535
char incomingByte;
String inString = "";
MultiStepper steppers;
     60a:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <_ZN12MultiStepperC1Ev>

0000060e <_GLOBAL__sub_D_myStepperX>:
const int buttonPin = 2;
int buttonState = 0;
int r=0;
int integerValue=0;  // Max value is 65535
char incomingByte;
String inString = "";
     60e:	80 e8       	ldi	r24, 0x80	; 128
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0c 94 47 08 	jmp	0x108e	; 0x108e <_ZN6StringD1Ev>

00000616 <_Z6citirev>:
  myStepperX.setSpeed(9999);
  myStepperY.setSpeed(9999);
  state=1;
}
void citire()
{
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
        n=integerValue;
        nRead=true;
        Serial.print("n=");
        Serial.print(n);
      }else{
        TabelCoordonate[i][j]=integerValue;
     622:	16 e0       	ldi	r17, 0x06	; 6
        {
          j=0;
          i++;
        }
        if(i==n)
        state=2;
     624:	c2 e0       	ldi	r28, 0x02	; 2
     626:	d0 e0       	ldi	r29, 0x00	; 0
      Serial.println(integerValue);
      inString = "";
      if(!nRead)
      {
        n=integerValue;
        nRead=true;
     628:	01 e0       	ldi	r16, 0x01	; 1
  myStepperY.setSpeed(9999);
  state=1;
}
void citire()
{
  while (Serial.available() > 0) {
     62a:	8c ec       	ldi	r24, 0xCC	; 204
     62c:	96 e0       	ldi	r25, 0x06	; 6
     62e:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN14HardwareSerial9availableEv>
     632:	18 16       	cp	r1, r24
     634:	19 06       	cpc	r1, r25
     636:	0c f0       	brlt	.+2      	; 0x63a <_Z6citirev+0x24>
     638:	80 c0       	rjmp	.+256    	; 0x73a <_Z6citirev+0x124>
    int inChar = Serial.read();
     63a:	8c ec       	ldi	r24, 0xCC	; 204
     63c:	96 e0       	ldi	r25, 0x06	; 6
     63e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN14HardwareSerial4readEv>
     642:	7c 01       	movw	r14, r24

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     644:	68 2f       	mov	r22, r24
     646:	80 e8       	ldi	r24, 0x80	; 128
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN6String6concatEc>
    inString += (char)inChar;
    if (inChar == '\n') {
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	e8 16       	cp	r14, r24
     652:	f1 04       	cpc	r15, r1
     654:	51 f7       	brne	.-44     	; 0x62a <_Z6citirev+0x14>
      Serial.print("Value:");
     656:	6a e1       	ldi	r22, 0x1A	; 26
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	8c ec       	ldi	r24, 0xCC	; 204
     65c:	96 e0       	ldi	r25, 0x06	; 6
     65e:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN5Print5printEPKc>
      integerValue = inString.toInt();
     662:	80 e8       	ldi	r24, 0x80	; 128
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZNK6String5toIntEv>
     66a:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <integerValue+0x1>
     66e:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <integerValue>
      Serial.println(integerValue);
     672:	4a e0       	ldi	r20, 0x0A	; 10
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	8c ec       	ldi	r24, 0xCC	; 204
     678:	96 e0       	ldi	r25, 0x06	; 6
     67a:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN5Print7printlnEii>
      inString = "";
     67e:	68 e3       	ldi	r22, 0x38	; 56
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	80 e8       	ldi	r24, 0x80	; 128
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6StringaSEPKc>
      if(!nRead)
     68a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <nRead>
     68e:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <integerValue>
     692:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <integerValue+0x1>
     696:	81 11       	cpse	r24, r1
     698:	17 c0       	rjmp	.+46     	; 0x6c8 <_Z6citirev+0xb2>
      {
        n=integerValue;
     69a:	50 93 6a 01 	sts	0x016A, r21	; 0x80016a <n+0x1>
     69e:	40 93 69 01 	sts	0x0169, r20	; 0x800169 <n>
        nRead=true;
     6a2:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <nRead>
        Serial.print("n=");
     6a6:	61 e2       	ldi	r22, 0x21	; 33
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	8c ec       	ldi	r24, 0xCC	; 204
     6ac:	96 e0       	ldi	r25, 0x06	; 6
     6ae:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN5Print5printEPKc>
        Serial.print(n);
     6b2:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <n>
     6b6:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <n+0x1>
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	8c ec       	ldi	r24, 0xCC	; 204
     6c0:	96 e0       	ldi	r25, 0x06	; 6
     6c2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print5printEii>
     6c6:	b1 cf       	rjmp	.-158    	; 0x62a <_Z6citirev+0x14>
      }else{
        TabelCoordonate[i][j]=integerValue;
     6c8:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <i>
     6cc:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <i+0x1>
     6d0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <j>
     6d4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <j+0x1>
     6d8:	12 9f       	mul	r17, r18
     6da:	f0 01       	movw	r30, r0
     6dc:	13 9f       	mul	r17, r19
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	e8 0f       	add	r30, r24
     6e4:	f9 1f       	adc	r31, r25
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ec 56       	subi	r30, 0x6C	; 108
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	51 83       	std	Z+1, r21	; 0x01
     6f0:	40 83       	st	Z, r20
        j++;
     6f2:	01 96       	adiw	r24, 0x01	; 1
        if(j==6)
     6f4:	86 30       	cpi	r24, 0x06	; 6
     6f6:	91 05       	cpc	r25, r1
     6f8:	29 f0       	breq	.+10     	; 0x704 <_Z6citirev+0xee>
        nRead=true;
        Serial.print("n=");
        Serial.print(n);
      }else{
        TabelCoordonate[i][j]=integerValue;
        j++;
     6fa:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <j+0x1>
     6fe:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <j>
     702:	0a c0       	rjmp	.+20     	; 0x718 <_Z6citirev+0x102>
        if(j==6)
        {
          j=0;
     704:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <j+0x1>
     708:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <j>
          i++;
     70c:	2f 5f       	subi	r18, 0xFF	; 255
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <i+0x1>
     714:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <i>
        }
        if(i==n)
     718:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <i>
     71c:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <i+0x1>
     720:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <n>
     724:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <n+0x1>
     728:	28 17       	cp	r18, r24
     72a:	39 07       	cpc	r19, r25
     72c:	09 f0       	breq	.+2      	; 0x730 <_Z6citirev+0x11a>
     72e:	7d cf       	rjmp	.-262    	; 0x62a <_Z6citirev+0x14>
        state=2;
     730:	d0 93 8b 01 	sts	0x018B, r29	; 0x80018b <state+0x1>
     734:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <state>
     738:	78 cf       	rjmp	.-272    	; 0x62a <_Z6citirev+0x14>
      }
    }
  }
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	08 95       	ret

00000748 <loop>:
  }
}

void loop()
{
  switch(state)
     748:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <state>
     74c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <state+0x1>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	91 05       	cpc	r25, r1
     754:	61 f0       	breq	.+24     	; 0x76e <loop+0x26>
     756:	1c f4       	brge	.+6      	; 0x75e <loop+0x16>
     758:	89 2b       	or	r24, r25
     75a:	39 f0       	breq	.+14     	; 0x76a <loop+0x22>
     75c:	08 95       	ret
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	91 05       	cpc	r25, r1
     762:	39 f0       	breq	.+14     	; 0x772 <loop+0x2a>
     764:	03 97       	sbiw	r24, 0x03	; 3
     766:	39 f0       	breq	.+14     	; 0x776 <loop+0x2e>
     768:	08 95       	ret
  {
    case 0: calibrate(); break;
     76a:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_Z9calibratev>
    case 1: citire(); break;
     76e:	0c 94 0b 03 	jmp	0x616	; 0x616 <_Z6citirev>
    case 2: afisare(); break;
     772:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_Z7afisarev>
    case 3: work(); break;
     776:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_Z4workv>

0000077a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     77a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     77c:	91 8d       	ldd	r25, Z+25	; 0x19
     77e:	22 8d       	ldd	r18, Z+26	; 0x1a
     780:	89 2f       	mov	r24, r25
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	80 5c       	subi	r24, 0xC0	; 192
     786:	9f 4f       	sbci	r25, 0xFF	; 255
     788:	82 1b       	sub	r24, r18
     78a:	91 09       	sbc	r25, r1
}
     78c:	8f 73       	andi	r24, 0x3F	; 63
     78e:	99 27       	eor	r25, r25
     790:	08 95       	ret

00000792 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     792:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     794:	91 8d       	ldd	r25, Z+25	; 0x19
     796:	82 8d       	ldd	r24, Z+26	; 0x1a
     798:	98 17       	cp	r25, r24
     79a:	31 f0       	breq	.+12     	; 0x7a8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     79c:	82 8d       	ldd	r24, Z+26	; 0x1a
     79e:	e8 0f       	add	r30, r24
     7a0:	f1 1d       	adc	r31, r1
     7a2:	85 8d       	ldd	r24, Z+29	; 0x1d
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     7ac:	08 95       	ret

000007ae <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     7ae:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     7b0:	91 8d       	ldd	r25, Z+25	; 0x19
     7b2:	82 8d       	ldd	r24, Z+26	; 0x1a
     7b4:	98 17       	cp	r25, r24
     7b6:	61 f0       	breq	.+24     	; 0x7d0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     7b8:	82 8d       	ldd	r24, Z+26	; 0x1a
     7ba:	df 01       	movw	r26, r30
     7bc:	a8 0f       	add	r26, r24
     7be:	b1 1d       	adc	r27, r1
     7c0:	5d 96       	adiw	r26, 0x1d	; 29
     7c2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     7c4:	92 8d       	ldd	r25, Z+26	; 0x1a
     7c6:	9f 5f       	subi	r25, 0xFF	; 255
     7c8:	9f 73       	andi	r25, 0x3F	; 63
     7ca:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7d4:	08 95       	ret

000007d6 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     7d6:	fc 01       	movw	r30, r24
     7d8:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     7da:	44 8d       	ldd	r20, Z+28	; 0x1c
     7dc:	25 2f       	mov	r18, r21
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	84 2f       	mov	r24, r20
     7e2:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     7e4:	82 1b       	sub	r24, r18
     7e6:	93 0b       	sbc	r25, r19
     7e8:	54 17       	cp	r21, r20
     7ea:	10 f0       	brcs	.+4      	; 0x7f0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     7ec:	cf 96       	adiw	r24, 0x3f	; 63
     7ee:	08 95       	ret
  return tail - head - 1;
     7f0:	01 97       	sbiw	r24, 0x01	; 1
}
     7f2:	08 95       	ret

000007f4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7f4:	8f e4       	ldi	r24, 0x4F	; 79
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	89 2b       	or	r24, r25
     7fa:	49 f0       	breq	.+18     	; 0x80e <_Z14serialEventRunv+0x1a>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	89 2b       	or	r24, r25
     802:	29 f0       	breq	.+10     	; 0x80e <_Z14serialEventRunv+0x1a>
     804:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_Z17Serial0_availablev>
     808:	81 11       	cpse	r24, r1
     80a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     80e:	08 95       	ret

00000810 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     810:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     812:	84 8d       	ldd	r24, Z+28	; 0x1c
     814:	df 01       	movw	r26, r30
     816:	a8 0f       	add	r26, r24
     818:	b1 1d       	adc	r27, r1
     81a:	a3 5a       	subi	r26, 0xA3	; 163
     81c:	bf 4f       	sbci	r27, 0xFF	; 255
     81e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     820:	84 8d       	ldd	r24, Z+28	; 0x1c
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	8f 73       	andi	r24, 0x3F	; 63
     828:	99 27       	eor	r25, r25
     82a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     82c:	a6 89       	ldd	r26, Z+22	; 0x16
     82e:	b7 89       	ldd	r27, Z+23	; 0x17
     830:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     832:	a0 89       	ldd	r26, Z+16	; 0x10
     834:	b1 89       	ldd	r27, Z+17	; 0x11
     836:	8c 91       	ld	r24, X
     838:	80 64       	ori	r24, 0x40	; 64
     83a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     83c:	93 8d       	ldd	r25, Z+27	; 0x1b
     83e:	84 8d       	ldd	r24, Z+28	; 0x1c
     840:	98 13       	cpse	r25, r24
     842:	06 c0       	rjmp	.+12     	; 0x850 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     844:	02 88       	ldd	r0, Z+18	; 0x12
     846:	f3 89       	ldd	r31, Z+19	; 0x13
     848:	e0 2d       	mov	r30, r0
     84a:	80 81       	ld	r24, Z
     84c:	8f 7d       	andi	r24, 0xDF	; 223
     84e:	80 83       	st	Z, r24
     850:	08 95       	ret

00000852 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ec 01       	movw	r28, r24
  _written = true;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     864:	9b 8d       	ldd	r25, Y+27	; 0x1b
     866:	8c 8d       	ldd	r24, Y+28	; 0x1c
     868:	98 13       	cpse	r25, r24
     86a:	05 c0       	rjmp	.+10     	; 0x876 <_ZN14HardwareSerial5writeEh+0x24>
     86c:	e8 89       	ldd	r30, Y+16	; 0x10
     86e:	f9 89       	ldd	r31, Y+17	; 0x11
     870:	80 81       	ld	r24, Z
     872:	85 fd       	sbrc	r24, 5
     874:	24 c0       	rjmp	.+72     	; 0x8be <_ZN14HardwareSerial5writeEh+0x6c>
     876:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     878:	0b 8d       	ldd	r16, Y+27	; 0x1b
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	0f 5f       	subi	r16, 0xFF	; 255
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	0f 73       	andi	r16, 0x3F	; 63
     882:	11 27       	eor	r17, r17
     884:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     886:	8c 8d       	ldd	r24, Y+28	; 0x1c
     888:	e8 12       	cpse	r14, r24
     88a:	0c c0       	rjmp	.+24     	; 0x8a4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	07 fc       	sbrc	r0, 7
     890:	fa cf       	rjmp	.-12     	; 0x886 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     892:	e8 89       	ldd	r30, Y+16	; 0x10
     894:	f9 89       	ldd	r31, Y+17	; 0x11
     896:	80 81       	ld	r24, Z
     898:	85 ff       	sbrs	r24, 5
     89a:	f5 cf       	rjmp	.-22     	; 0x886 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     89c:	ce 01       	movw	r24, r28
     89e:	0e 94 08 04 	call	0x810	; 0x810 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8a2:	f1 cf       	rjmp	.-30     	; 0x886 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8a6:	fe 01       	movw	r30, r28
     8a8:	e8 0f       	add	r30, r24
     8aa:	f1 1d       	adc	r31, r1
     8ac:	e3 5a       	subi	r30, 0xA3	; 163
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     8b2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     8b4:	ea 89       	ldd	r30, Y+18	; 0x12
     8b6:	fb 89       	ldd	r31, Y+19	; 0x13
     8b8:	80 81       	ld	r24, Z
     8ba:	80 62       	ori	r24, 0x20	; 32
     8bc:	07 c0       	rjmp	.+14     	; 0x8cc <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     8be:	ee 89       	ldd	r30, Y+22	; 0x16
     8c0:	ff 89       	ldd	r31, Y+23	; 0x17
     8c2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     8c4:	e8 89       	ldd	r30, Y+16	; 0x10
     8c6:	f9 89       	ldd	r31, Y+17	; 0x11
     8c8:	80 81       	ld	r24, Z
     8ca:	80 64       	ori	r24, 0x40	; 64
     8cc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	08 95       	ret

000008e0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     8e6:	88 8d       	ldd	r24, Y+24	; 0x18
     8e8:	88 23       	and	r24, r24
     8ea:	c9 f0       	breq	.+50     	; 0x91e <__stack+0x1f>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     8ec:	ea 89       	ldd	r30, Y+18	; 0x12
     8ee:	fb 89       	ldd	r31, Y+19	; 0x13
     8f0:	80 81       	ld	r24, Z
     8f2:	85 fd       	sbrc	r24, 5
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <__stack+0x1>
     8f6:	a8 89       	ldd	r26, Y+16	; 0x10
     8f8:	b9 89       	ldd	r27, Y+17	; 0x11
     8fa:	8c 91       	ld	r24, X
     8fc:	86 fd       	sbrc	r24, 6
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <__stack+0x1f>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	07 fc       	sbrc	r0, 7
     904:	f5 cf       	rjmp	.-22     	; 0x8f0 <_ZN14HardwareSerial5flushEv+0x10>
     906:	80 81       	ld	r24, Z
     908:	85 ff       	sbrs	r24, 5
     90a:	f2 cf       	rjmp	.-28     	; 0x8f0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     90c:	a8 89       	ldd	r26, Y+16	; 0x10
     90e:	b9 89       	ldd	r27, Y+17	; 0x11
     910:	8c 91       	ld	r24, X
     912:	85 ff       	sbrs	r24, 5
     914:	ed cf       	rjmp	.-38     	; 0x8f0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     916:	ce 01       	movw	r24, r28
     918:	0e 94 08 04 	call	0x810	; 0x810 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     91c:	e7 cf       	rjmp	.-50     	; 0x8ec <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
     934:	6a 01       	movw	r12, r20
     936:	7b 01       	movw	r14, r22
     938:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     93a:	e8 89       	ldd	r30, Y+16	; 0x10
     93c:	f9 89       	ldd	r31, Y+17	; 0x11
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     942:	41 15       	cp	r20, r1
     944:	51 4e       	sbci	r21, 0xE1	; 225
     946:	61 05       	cpc	r22, r1
     948:	71 05       	cpc	r23, r1
     94a:	b1 f0       	breq	.+44     	; 0x978 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	79 e0       	ldi	r23, 0x09	; 9
     950:	8d e3       	ldi	r24, 0x3D	; 61
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	a7 01       	movw	r20, r14
     956:	96 01       	movw	r18, r12
     958:	0e 94 be 12 	call	0x257c	; 0x257c <__udivmodsi4>
     95c:	da 01       	movw	r26, r20
     95e:	c9 01       	movw	r24, r18
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	a1 09       	sbc	r26, r1
     964:	b1 09       	sbc	r27, r1
     966:	b6 95       	lsr	r27
     968:	a7 95       	ror	r26
     96a:	97 95       	ror	r25
     96c:	87 95       	ror	r24
     96e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     970:	21 15       	cp	r18, r1
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	38 07       	cpc	r19, r24
     976:	a8 f0       	brcs	.+42     	; 0x9a2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     978:	e8 89       	ldd	r30, Y+16	; 0x10
     97a:	f9 89       	ldd	r31, Y+17	; 0x11
     97c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     97e:	60 e8       	ldi	r22, 0x80	; 128
     980:	74 e8       	ldi	r23, 0x84	; 132
     982:	8e e1       	ldi	r24, 0x1E	; 30
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a7 01       	movw	r20, r14
     988:	96 01       	movw	r18, r12
     98a:	0e 94 be 12 	call	0x257c	; 0x257c <__udivmodsi4>
     98e:	da 01       	movw	r26, r20
     990:	c9 01       	movw	r24, r18
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	a1 09       	sbc	r26, r1
     996:	b1 09       	sbc	r27, r1
     998:	b6 95       	lsr	r27
     99a:	a7 95       	ror	r26
     99c:	97 95       	ror	r25
     99e:	87 95       	ror	r24
     9a0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     9a2:	ec 85       	ldd	r30, Y+12	; 0x0c
     9a4:	fd 85       	ldd	r31, Y+13	; 0x0d
     9a6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     9a8:	ee 85       	ldd	r30, Y+14	; 0x0e
     9aa:	ff 85       	ldd	r31, Y+15	; 0x0f
     9ac:	20 83       	st	Z, r18

  _written = false;
     9ae:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     9b0:	ec 89       	ldd	r30, Y+20	; 0x14
     9b2:	fd 89       	ldd	r31, Y+21	; 0x15
     9b4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     9b6:	ea 89       	ldd	r30, Y+18	; 0x12
     9b8:	fb 89       	ldd	r31, Y+19	; 0x13
     9ba:	80 81       	ld	r24, Z
     9bc:	80 61       	ori	r24, 0x10	; 16
     9be:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     9c0:	ea 89       	ldd	r30, Y+18	; 0x12
     9c2:	fb 89       	ldd	r31, Y+19	; 0x13
     9c4:	80 81       	ld	r24, Z
     9c6:	88 60       	ori	r24, 0x08	; 8
     9c8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     9ca:	ea 89       	ldd	r30, Y+18	; 0x12
     9cc:	fb 89       	ldd	r31, Y+19	; 0x13
     9ce:	80 81       	ld	r24, Z
     9d0:	80 68       	ori	r24, 0x80	; 128
     9d2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     9d4:	ea 89       	ldd	r30, Y+18	; 0x12
     9d6:	fb 89       	ldd	r31, Y+19	; 0x13
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7d       	andi	r24, 0xDF	; 223
     9dc:	80 83       	st	Z, r24
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	08 95       	ret

000009ee <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 93       	push	r18
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a02:	e0 91 dc 06 	lds	r30, 0x06DC	; 0x8006dc <Serial+0x10>
     a06:	f0 91 dd 06 	lds	r31, 0x06DD	; 0x8006dd <Serial+0x11>
     a0a:	80 81       	ld	r24, Z
     a0c:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <Serial+0x16>
     a10:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <Serial+0x17>
     a14:	82 fd       	sbrc	r24, 2
     a16:	12 c0       	rjmp	.+36     	; 0xa3c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a18:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a1a:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Serial+0x19>
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     a22:	20 91 e6 06 	lds	r18, 0x06E6	; 0x8006e6 <Serial+0x1a>
     a26:	82 17       	cp	r24, r18
     a28:	51 f0       	breq	.+20     	; 0xa3e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     a2a:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <Serial+0x19>
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	e4 53       	subi	r30, 0x34	; 52
     a32:	f9 4f       	sbci	r31, 0xF9	; 249
     a34:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     a36:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <Serial+0x19>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     a3c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	2f 91       	pop	r18
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	2f 93       	push	r18
     a5e:	3f 93       	push	r19
     a60:	4f 93       	push	r20
     a62:	5f 93       	push	r21
     a64:	6f 93       	push	r22
     a66:	7f 93       	push	r23
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	af 93       	push	r26
     a6e:	bf 93       	push	r27
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a74:	8c ec       	ldi	r24, 0xCC	; 204
     a76:	96 e0       	ldi	r25, 0x06	; 6
     a78:	0e 94 08 04 	call	0x810	; 0x810 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	bf 91       	pop	r27
     a82:	af 91       	pop	r26
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	7f 91       	pop	r23
     a8a:	6f 91       	pop	r22
     a8c:	5f 91       	pop	r21
     a8e:	4f 91       	pop	r20
     a90:	3f 91       	pop	r19
     a92:	2f 91       	pop	r18
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a9e:	8c ec       	ldi	r24, 0xCC	; 204
     aa0:	96 e0       	ldi	r25, 0x06	; 6
     aa2:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN14HardwareSerial9availableEv>
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f4       	brne	.+2      	; 0xaae <_Z17Serial0_availablev+0x10>
     aac:	20 e0       	ldi	r18, 0x00	; 0
}
     aae:	82 2f       	mov	r24, r18
     ab0:	08 95       	ret

00000ab2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ab2:	ec ec       	ldi	r30, 0xCC	; 204
     ab4:	f6 e0       	ldi	r31, 0x06	; 6
     ab6:	13 82       	std	Z+3, r1	; 0x03
     ab8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     aba:	88 ee       	ldi	r24, 0xE8	; 232
     abc:	93 e0       	ldi	r25, 0x03	; 3
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	84 83       	std	Z+4, r24	; 0x04
     ac4:	95 83       	std	Z+5, r25	; 0x05
     ac6:	a6 83       	std	Z+6, r26	; 0x06
     ac8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     aca:	88 e2       	ldi	r24, 0x28	; 40
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
     ad2:	85 ec       	ldi	r24, 0xC5	; 197
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	95 87       	std	Z+13, r25	; 0x0d
     ad8:	84 87       	std	Z+12, r24	; 0x0c
     ada:	84 ec       	ldi	r24, 0xC4	; 196
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	97 87       	std	Z+15, r25	; 0x0f
     ae0:	86 87       	std	Z+14, r24	; 0x0e
     ae2:	80 ec       	ldi	r24, 0xC0	; 192
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	91 8b       	std	Z+17, r25	; 0x11
     ae8:	80 8b       	std	Z+16, r24	; 0x10
     aea:	81 ec       	ldi	r24, 0xC1	; 193
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	93 8b       	std	Z+19, r25	; 0x13
     af0:	82 8b       	std	Z+18, r24	; 0x12
     af2:	82 ec       	ldi	r24, 0xC2	; 194
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	95 8b       	std	Z+21, r25	; 0x15
     af8:	84 8b       	std	Z+20, r24	; 0x14
     afa:	86 ec       	ldi	r24, 0xC6	; 198
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	97 8b       	std	Z+23, r25	; 0x17
     b00:	86 8b       	std	Z+22, r24	; 0x16
     b02:	11 8e       	std	Z+25, r1	; 0x19
     b04:	12 8e       	std	Z+26, r1	; 0x1a
     b06:	13 8e       	std	Z+27, r1	; 0x1b
     b08:	14 8e       	std	Z+28, r1	; 0x1c
     b0a:	08 95       	ret

00000b0c <initVariant>:
     b0c:	08 95       	ret

00000b0e <_Z12initializarev>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b0e:	26 e0       	ldi	r18, 0x06	; 6
     b10:	40 e8       	ldi	r20, 0x80	; 128
     b12:	55 e2       	ldi	r21, 0x25	; 37
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	8c ec       	ldi	r24, 0xCC	; 204
     b1a:	96 e0       	ldi	r25, 0x06	; 6
     b1c:	0e 94 92 04 	call	0x924	; 0x924 <_ZN14HardwareSerial5beginEmh>
void setupUSB() __attribute__((weak));
void setupUSB() { }
void initializare()
{Serial.begin(9600);
	//configure external interrupt 4
	DDRD &= ~(1<<DDD2);
     b20:	52 98       	cbi	0x0a, 2	; 10
	EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (RISING);
     b22:	e9 e6       	ldi	r30, 0x69	; 105
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	83 60       	ori	r24, 0x03	; 3
     b2a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
     b2c:	e8 9a       	sbi	0x1d, 0	; 29
	//configure external interrupt 5
	DDRD &= ~(1<<DDD3);
     b2e:	53 98       	cbi	0x0a, 3	; 10
	EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (RISING << ISC10);
     b30:	80 81       	ld	r24, Z
     b32:	8c 60       	ori	r24, 0x0C	; 12
     b34:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
     b36:	e9 9a       	sbi	0x1d, 1	; 29
	//configure digital pin 13 as output, the laser pin
	DDRB |= 1<<PINB7;
     b38:	27 9a       	sbi	0x04, 7	; 4
	PORTB &= ~(1<<PINB7);
     b3a:	2f 98       	cbi	0x05, 7	; 5
     b3c:	08 95       	ret

00000b3e <main>:
	
}

int main(void)
{
	init();
     b3e:	0e 94 78 07 	call	0xef0	; 0xef0 <init>

	initVariant();
     b42:	0e 94 86 05 	call	0xb0c	; 0xb0c <initVariant>
	initializare();
     b46:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z12initializarev>
	
	//setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b4a:	ca ef       	ldi	r28, 0xFA	; 250
     b4c:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	//setup();
    
	for (;;) {
		loop();
     b4e:	0e 94 a4 03 	call	0x748	; 0x748 <loop>
		if (serialEventRun) serialEventRun();
     b52:	20 97       	sbiw	r28, 0x00	; 0
     b54:	e1 f3       	breq	.-8      	; 0xb4e <main+0x10>
     b56:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_Z14serialEventRunv>
     b5a:	f9 cf       	rjmp	.-14     	; 0xb4e <main+0x10>

00000b5c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	6c 01       	movw	r12, r24
     b6e:	7a 01       	movw	r14, r20
     b70:	8b 01       	movw	r16, r22
     b72:	c0 e0       	ldi	r28, 0x00	; 0
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	ce 15       	cp	r28, r14
     b78:	df 05       	cpc	r29, r15
     b7a:	81 f0       	breq	.+32     	; 0xb9c <_ZN5Print5writeEPKhj+0x40>
     b7c:	d8 01       	movw	r26, r16
     b7e:	6d 91       	ld	r22, X+
     b80:	8d 01       	movw	r16, r26
     b82:	d6 01       	movw	r26, r12
     b84:	ed 91       	ld	r30, X+
     b86:	fc 91       	ld	r31, X
     b88:	01 90       	ld	r0, Z+
     b8a:	f0 81       	ld	r31, Z
     b8c:	e0 2d       	mov	r30, r0
     b8e:	c6 01       	movw	r24, r12
     b90:	09 95       	icall
     b92:	89 2b       	or	r24, r25
     b94:	11 f0       	breq	.+4      	; 0xb9a <_ZN5Print5writeEPKhj+0x3e>
     b96:	21 96       	adiw	r28, 0x01	; 1
     b98:	ee cf       	rjmp	.-36     	; 0xb76 <_ZN5Print5writeEPKhj+0x1a>
     b9a:	7e 01       	movw	r14, r28
     b9c:	c7 01       	movw	r24, r14
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	08 95       	ret

00000bb0 <_ZN5Print5writeEPKc>:
     bb0:	61 15       	cp	r22, r1
     bb2:	71 05       	cpc	r23, r1
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <_ZN5Print5writeEPKc+0x24>
     bb6:	fb 01       	movw	r30, r22
     bb8:	01 90       	ld	r0, Z+
     bba:	00 20       	and	r0, r0
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <_ZN5Print5writeEPKc+0x8>
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	af 01       	movw	r20, r30
     bc2:	46 1b       	sub	r20, r22
     bc4:	57 0b       	sbc	r21, r23
     bc6:	dc 01       	movw	r26, r24
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	02 80       	ldd	r0, Z+2	; 0x02
     bce:	f3 81       	ldd	r31, Z+3	; 0x03
     bd0:	e0 2d       	mov	r30, r0
     bd2:	09 94       	ijmp
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <_ZN5Print5printEPKc>:
     bda:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <_ZN5Print5writeEPKc>

00000bde <_ZN5Print5printEc>:
     bde:	dc 01       	movw	r26, r24
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	09 94       	ijmp

00000bec <_ZN5Print7printlnEv>:
     bec:	66 e3       	ldi	r22, 0x36	; 54
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <_ZN5Print5writeEPKc>

00000bf4 <_ZN5Print7printlnEPKc>:
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
     bfe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN5Print5writeEPKc>
     c02:	8c 01       	movw	r16, r24
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN5Print7printlnEv>
     c0a:	80 0f       	add	r24, r16
     c0c:	91 1f       	adc	r25, r17
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <_ZN5Print11printNumberEmh>:
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	a1 97       	sbiw	r28, 0x21	; 33
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	7c 01       	movw	r14, r24
     c3e:	fa 01       	movw	r30, r20
     c40:	cb 01       	movw	r24, r22
     c42:	19 a2       	std	Y+33, r1	; 0x21
     c44:	22 30       	cpi	r18, 0x02	; 2
     c46:	08 f4       	brcc	.+2      	; 0xc4a <_ZN5Print11printNumberEmh+0x32>
     c48:	2a e0       	ldi	r18, 0x0A	; 10
     c4a:	8e 01       	movw	r16, r28
     c4c:	0f 5d       	subi	r16, 0xDF	; 223
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	82 2e       	mov	r8, r18
     c52:	91 2c       	mov	r9, r1
     c54:	a1 2c       	mov	r10, r1
     c56:	b1 2c       	mov	r11, r1
     c58:	bf 01       	movw	r22, r30
     c5a:	a5 01       	movw	r20, r10
     c5c:	94 01       	movw	r18, r8
     c5e:	0e 94 be 12 	call	0x257c	; 0x257c <__udivmodsi4>
     c62:	f9 01       	movw	r30, r18
     c64:	ca 01       	movw	r24, r20
     c66:	01 50       	subi	r16, 0x01	; 1
     c68:	11 09       	sbc	r17, r1
     c6a:	6a 30       	cpi	r22, 0x0A	; 10
     c6c:	10 f4       	brcc	.+4      	; 0xc72 <_ZN5Print11printNumberEmh+0x5a>
     c6e:	60 5d       	subi	r22, 0xD0	; 208
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <_ZN5Print11printNumberEmh+0x5c>
     c72:	69 5c       	subi	r22, 0xC9	; 201
     c74:	d8 01       	movw	r26, r16
     c76:	6c 93       	st	X, r22
     c78:	23 2b       	or	r18, r19
     c7a:	24 2b       	or	r18, r20
     c7c:	25 2b       	or	r18, r21
     c7e:	61 f7       	brne	.-40     	; 0xc58 <_ZN5Print11printNumberEmh+0x40>
     c80:	b8 01       	movw	r22, r16
     c82:	c7 01       	movw	r24, r14
     c84:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN5Print5writeEPKc>
     c88:	a1 96       	adiw	r28, 0x21	; 33
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	08 95       	ret

00000caa <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
  if (base == 0) {
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	81 f4       	brne	.+32     	; 0xce0 <_ZN5Print5printEli+0x36>
    return write(n);
     cc0:	dc 01       	movw	r26, r24
     cc2:	ed 91       	ld	r30, X+
     cc4:	fc 91       	ld	r31, X
     cc6:	01 90       	ld	r0, Z+
     cc8:	f0 81       	ld	r31, Z
     cca:	e0 2d       	mov	r30, r0
     ccc:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     cde:	09 94       	ijmp
  } else if (base == 10) {
     ce0:	2a 30       	cpi	r18, 0x0A	; 10
     ce2:	31 05       	cpc	r19, r1
     ce4:	01 f5       	brne	.+64     	; 0xd26 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     ce6:	77 ff       	sbrs	r23, 7
     ce8:	1d c0       	rjmp	.+58     	; 0xd24 <_ZN5Print5printEli+0x7a>
     cea:	6a 01       	movw	r12, r20
     cec:	7b 01       	movw	r14, r22
     cee:	ec 01       	movw	r28, r24
      int t = print('-');
     cf0:	6d e2       	ldi	r22, 0x2D	; 45
     cf2:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN5Print5printEc>
     cf6:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     cf8:	44 27       	eor	r20, r20
     cfa:	55 27       	eor	r21, r21
     cfc:	ba 01       	movw	r22, r20
     cfe:	4c 19       	sub	r20, r12
     d00:	5d 09       	sbc	r21, r13
     d02:	6e 09       	sbc	r22, r14
     d04:	7f 09       	sbc	r23, r15
     d06:	2a e0       	ldi	r18, 0x0A	; 10
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN5Print11printNumberEmh>
     d0e:	80 0f       	add	r24, r16
     d10:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     d24:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     d36:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <_ZN5Print11printNumberEmh>

00000d3a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     d3a:	9a 01       	movw	r18, r20
  return print((long) n, base);
     d3c:	ab 01       	movw	r20, r22
     d3e:	77 0f       	add	r23, r23
     d40:	66 0b       	sbc	r22, r22
     d42:	77 0b       	sbc	r23, r23
     d44:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_ZN5Print5printEli>

00000d48 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     d52:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN5Print5printEii>
     d56:	8c 01       	movw	r16, r24
  n += println();
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN5Print7printlnEv>
  return n;
}
     d5e:	80 0f       	add	r24, r16
     d60:	91 1f       	adc	r25, r17
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     d82:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <timer0_millis>
     d86:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <timer0_millis+0x1>
     d8a:	a0 91 6c 07 	lds	r26, 0x076C	; 0x80076c <timer0_millis+0x2>
     d8e:	b0 91 6d 07 	lds	r27, 0x076D	; 0x80076d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     d92:	30 91 69 07 	lds	r19, 0x0769	; 0x800769 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     d96:	23 e0       	ldi	r18, 0x03	; 3
     d98:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     d9a:	2d 37       	cpi	r18, 0x7D	; 125
     d9c:	20 f4       	brcc	.+8      	; 0xda6 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     da6:	26 e8       	ldi	r18, 0x86	; 134
     da8:	23 0f       	add	r18, r19
		m += 1;
     daa:	02 96       	adiw	r24, 0x02	; 2
     dac:	a1 1d       	adc	r26, r1
     dae:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     db0:	20 93 69 07 	sts	0x0769, r18	; 0x800769 <timer0_fract>
	timer0_millis = m;
     db4:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <timer0_millis>
     db8:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <timer0_millis+0x1>
     dbc:	a0 93 6c 07 	sts	0x076C, r26	; 0x80076c <timer0_millis+0x2>
     dc0:	b0 93 6d 07 	sts	0x076D, r27	; 0x80076d <timer0_millis+0x3>
	timer0_overflow_count++;
     dc4:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <timer0_overflow_count>
     dc8:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <timer0_overflow_count+0x1>
     dcc:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <timer0_overflow_count+0x2>
     dd0:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <timer0_overflow_count+0x3>
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	a1 1d       	adc	r26, r1
     dd8:	b1 1d       	adc	r27, r1
     dda:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <timer0_overflow_count>
     dde:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <timer0_overflow_count+0x1>
     de2:	a0 93 70 07 	sts	0x0770, r26	; 0x800770 <timer0_overflow_count+0x2>
     de6:	b0 93 71 07 	sts	0x0771, r27	; 0x800771 <timer0_overflow_count+0x3>
}
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     e00:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     e02:	f8 94       	cli
	m = timer0_millis;
     e04:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <timer0_millis>
     e08:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <timer0_millis+0x1>
     e0c:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <timer0_millis+0x2>
     e10:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <timer0_millis+0x3>
	SREG = oldSREG;
     e14:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     e16:	08 95       	ret

00000e18 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e18:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e1a:	f8 94       	cli
	m = timer0_overflow_count;
     e1c:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <timer0_overflow_count>
     e20:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <timer0_overflow_count+0x1>
     e24:	a0 91 70 07 	lds	r26, 0x0770	; 0x800770 <timer0_overflow_count+0x2>
     e28:	b0 91 71 07 	lds	r27, 0x0771	; 0x800771 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     e2c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e2e:	a8 9b       	sbis	0x15, 0	; 21
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <micros+0x24>
     e32:	2f 3f       	cpi	r18, 0xFF	; 255
     e34:	19 f0       	breq	.+6      	; 0xe3c <micros+0x24>
		m++;
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	a1 1d       	adc	r26, r1
     e3a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e3c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e3e:	ba 2f       	mov	r27, r26
     e40:	a9 2f       	mov	r26, r25
     e42:	98 2f       	mov	r25, r24
     e44:	88 27       	eor	r24, r24
     e46:	82 0f       	add	r24, r18
     e48:	91 1d       	adc	r25, r1
     e4a:	a1 1d       	adc	r26, r1
     e4c:	b1 1d       	adc	r27, r1
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	42 e0       	ldi	r20, 0x02	; 2
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	4a 95       	dec	r20
     e5e:	d1 f7       	brne	.-12     	; 0xe54 <micros+0x3c>
}
     e60:	08 95       	ret

00000e62 <delay>:

void delay(unsigned long ms)
{
     e62:	8f 92       	push	r8
     e64:	9f 92       	push	r9
     e66:	af 92       	push	r10
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	6b 01       	movw	r12, r22
     e74:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e76:	0e 94 0c 07 	call	0xe18	; 0xe18 <micros>
     e7a:	4b 01       	movw	r8, r22
     e7c:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e7e:	c1 14       	cp	r12, r1
     e80:	d1 04       	cpc	r13, r1
     e82:	e1 04       	cpc	r14, r1
     e84:	f1 04       	cpc	r15, r1
     e86:	01 f1       	breq	.+64     	; 0xec8 <delay+0x66>
		yield();
     e88:	0e 94 24 10 	call	0x2048	; 0x2048 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e8c:	0e 94 0c 07 	call	0xe18	; 0xe18 <micros>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	88 19       	sub	r24, r8
     e96:	99 09       	sbc	r25, r9
     e98:	aa 09       	sbc	r26, r10
     e9a:	bb 09       	sbc	r27, r11
     e9c:	88 3e       	cpi	r24, 0xE8	; 232
     e9e:	93 40       	sbci	r25, 0x03	; 3
     ea0:	a1 05       	cpc	r26, r1
     ea2:	b1 05       	cpc	r27, r1
     ea4:	60 f3       	brcs	.-40     	; 0xe7e <delay+0x1c>
			ms--;
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	c2 1a       	sub	r12, r18
     eaa:	d1 08       	sbc	r13, r1
     eac:	e1 08       	sbc	r14, r1
     eae:	f1 08       	sbc	r15, r1
			start += 1000;
     eb0:	88 ee       	ldi	r24, 0xE8	; 232
     eb2:	88 0e       	add	r8, r24
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	98 1e       	adc	r9, r24
     eb8:	a1 1c       	adc	r10, r1
     eba:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     ebc:	c1 14       	cp	r12, r1
     ebe:	d1 04       	cpc	r13, r1
     ec0:	e1 04       	cpc	r14, r1
     ec2:	f1 04       	cpc	r15, r1
     ec4:	19 f7       	brne	.-58     	; 0xe8c <delay+0x2a>
     ec6:	db cf       	rjmp	.-74     	; 0xe7e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	08 95       	ret

00000eda <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	91 05       	cpc	r25, r1
     ede:	38 f0       	brcs	.+14     	; 0xeee <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     ee8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <delayMicroseconds+0x10>
     eee:	08 95       	ret

00000ef0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ef0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ef2:	84 b5       	in	r24, 0x24	; 36
     ef4:	82 60       	ori	r24, 0x02	; 2
     ef6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ef8:	84 b5       	in	r24, 0x24	; 36
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     efe:	85 b5       	in	r24, 0x25	; 37
     f00:	82 60       	ori	r24, 0x02	; 2
     f02:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f04:	85 b5       	in	r24, 0x25	; 37
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f0a:	ee e6       	ldi	r30, 0x6E	; 110
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f14:	e1 e8       	ldi	r30, 0x81	; 129
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f1a:	80 81       	ld	r24, Z
     f1c:	82 60       	ori	r24, 0x02	; 2
     f1e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f20:	80 81       	ld	r24, Z
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f26:	e0 e8       	ldi	r30, 0x80	; 128
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f30:	e1 eb       	ldi	r30, 0xB1	; 177
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f3a:	e0 eb       	ldi	r30, 0xB0	; 176
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f44:	ea e7       	ldi	r30, 0x7A	; 122
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f4e:	80 81       	ld	r24, Z
     f50:	82 60       	ori	r24, 0x02	; 2
     f52:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f54:	80 81       	ld	r24, Z
     f56:	81 60       	ori	r24, 0x01	; 1
     f58:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f5a:	80 81       	ld	r24, Z
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f60:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f64:	08 95       	ret

00000f66 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	81 f0       	breq	.+32     	; 0xf8a <turnOffPWM+0x24>
     f6a:	28 f4       	brcc	.+10     	; 0xf76 <turnOffPWM+0x10>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	99 f0       	breq	.+38     	; 0xf96 <turnOffPWM+0x30>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	a1 f0       	breq	.+40     	; 0xf9c <turnOffPWM+0x36>
     f74:	08 95       	ret
     f76:	87 30       	cpi	r24, 0x07	; 7
     f78:	a9 f0       	breq	.+42     	; 0xfa4 <turnOffPWM+0x3e>
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	b9 f0       	breq	.+46     	; 0xfac <turnOffPWM+0x46>
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	d1 f4       	brne	.+52     	; 0xfb6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f86:	8f 7d       	andi	r24, 0xDF	; 223
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f8a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f8e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f94:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f96:	84 b5       	in	r24, 0x24	; 36
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f9c:	84 b5       	in	r24, 0x24	; 36
     f9e:	8f 7d       	andi	r24, 0xDF	; 223
     fa0:	84 bd       	out	0x24, r24	; 36
     fa2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     fa4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     fac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb0:	8f 7d       	andi	r24, 0xDF	; 223
     fb2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     fb6:	08 95       	ret

00000fb8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	fc 01       	movw	r30, r24
     fc0:	e4 56       	subi	r30, 0x64	; 100
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     fc6:	fc 01       	movw	r30, r24
     fc8:	e0 55       	subi	r30, 0x50	; 80
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     fce:	88 23       	and	r24, r24
     fd0:	61 f1       	breq	.+88     	; 0x102a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	fc 01       	movw	r30, r24
     fda:	e2 53       	subi	r30, 0x32	; 50
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	c5 91       	lpm	r28, Z+
     fe0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     fe2:	fc 01       	movw	r30, r24
     fe4:	ec 53       	subi	r30, 0x3C	; 60
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	a5 91       	lpm	r26, Z+
     fea:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     fec:	61 11       	cpse	r22, r1
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     ff0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ff2:	f8 94       	cli
		*reg &= ~bit;
     ff4:	88 81       	ld	r24, Y
     ff6:	20 95       	com	r18
     ff8:	82 23       	and	r24, r18
     ffa:	88 83       	st	Y, r24
		*out &= ~bit;
     ffc:	ec 91       	ld	r30, X
     ffe:	2e 23       	and	r18, r30
    1000:	0b c0       	rjmp	.+22     	; 0x1018 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1002:	62 30       	cpi	r22, 0x02	; 2
    1004:	61 f4       	brne	.+24     	; 0x101e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1006:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1008:	f8 94       	cli
		*reg &= ~bit;
    100a:	88 81       	ld	r24, Y
    100c:	32 2f       	mov	r19, r18
    100e:	30 95       	com	r19
    1010:	83 23       	and	r24, r19
    1012:	88 83       	st	Y, r24
		*out |= bit;
    1014:	ec 91       	ld	r30, X
    1016:	2e 2b       	or	r18, r30
    1018:	2c 93       	st	X, r18
		SREG = oldSREG;
    101a:	9f bf       	out	0x3f, r25	; 63
    101c:	06 c0       	rjmp	.+12     	; 0x102a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    101e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1020:	f8 94       	cli
		*reg |= bit;
    1022:	e8 81       	ld	r30, Y
    1024:	2e 2b       	or	r18, r30
    1026:	28 83       	st	Y, r18
		SREG = oldSREG;
    1028:	8f bf       	out	0x3f, r24	; 63
	}
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	f9 01       	movw	r30, r18
    103c:	e8 57       	subi	r30, 0x78	; 120
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1042:	f9 01       	movw	r30, r18
    1044:	e4 56       	subi	r30, 0x64	; 100
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    104a:	f9 01       	movw	r30, r18
    104c:	e0 55       	subi	r30, 0x50	; 80
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1052:	cc 23       	and	r28, r28
    1054:	c1 f0       	breq	.+48     	; 0x1086 <digitalWrite+0x56>
    1056:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1058:	81 11       	cpse	r24, r1
    105a:	0e 94 b3 07 	call	0xf66	; 0xf66 <turnOffPWM>

	out = portOutputRegister(port);
    105e:	ec 2f       	mov	r30, r28
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ec 53       	subi	r30, 0x3C	; 60
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	a5 91       	lpm	r26, Z+
    106c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    106e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1070:	f8 94       	cli

	if (val == LOW) {
    1072:	11 11       	cpse	r17, r1
    1074:	04 c0       	rjmp	.+8      	; 0x107e <digitalWrite+0x4e>
		*out &= ~bit;
    1076:	8c 91       	ld	r24, X
    1078:	d0 95       	com	r29
    107a:	d8 23       	and	r29, r24
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <digitalWrite+0x52>
	} else {
		*out |= bit;
    107e:	ec 91       	ld	r30, X
    1080:	de 2b       	or	r29, r30
    1082:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1084:	9f bf       	out	0x3f, r25	; 63
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	08 95       	ret

0000108e <_ZN6StringD1Ev>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	0c 94 9d 13 	jmp	0x273a	; 0x273a <free>

00001098 <_ZN6String10invalidateEv>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	88 81       	ld	r24, Y
    10a0:	99 81       	ldd	r25, Y+1	; 0x01
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	11 f0       	breq	.+4      	; 0x10aa <_ZN6String10invalidateEv+0x12>
    10a6:	0e 94 9d 13 	call	0x273a	; 0x273a <free>
    10aa:	19 82       	std	Y+1, r1	; 0x01
    10ac:	18 82       	st	Y, r1
    10ae:	1d 82       	std	Y+5, r1	; 0x05
    10b0:	1c 82       	std	Y+4, r1	; 0x04
    10b2:	1b 82       	std	Y+3, r1	; 0x03
    10b4:	1a 82       	std	Y+2, r1	; 0x02
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <_ZN6String12changeBufferEj>:
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
    10c6:	8b 01       	movw	r16, r22
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	88 81       	ld	r24, Y
    10ce:	99 81       	ldd	r25, Y+1	; 0x01
    10d0:	0e 94 26 14 	call	0x284c	; 0x284c <realloc>
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	31 f0       	breq	.+12     	; 0x10e4 <_ZN6String12changeBufferEj+0x28>
    10d8:	99 83       	std	Y+1, r25	; 0x01
    10da:	88 83       	st	Y, r24
    10dc:	1b 83       	std	Y+3, r17	; 0x03
    10de:	0a 83       	std	Y+2, r16	; 0x02
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <_ZN6String12changeBufferEj+0x2a>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <_ZN6String7reserveEj>:
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
    10f6:	88 81       	ld	r24, Y
    10f8:	99 81       	ldd	r25, Y+1	; 0x01
    10fa:	89 2b       	or	r24, r25
    10fc:	29 f0       	breq	.+10     	; 0x1108 <_ZN6String7reserveEj+0x18>
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	86 17       	cp	r24, r22
    1104:	97 07       	cpc	r25, r23
    1106:	60 f4       	brcc	.+24     	; 0x1120 <_ZN6String7reserveEj+0x30>
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZN6String12changeBufferEj>
    110e:	88 23       	and	r24, r24
    1110:	41 f0       	breq	.+16     	; 0x1122 <_ZN6String7reserveEj+0x32>
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	89 2b       	or	r24, r25
    1118:	19 f4       	brne	.+6      	; 0x1120 <_ZN6String7reserveEj+0x30>
    111a:	e8 81       	ld	r30, Y
    111c:	f9 81       	ldd	r31, Y+1	; 0x01
    111e:	10 82       	st	Z, r1
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <_ZN6String4copyEPKcj>:
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
    1136:	7b 01       	movw	r14, r22
    1138:	8a 01       	movw	r16, r20
    113a:	ba 01       	movw	r22, r20
    113c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN6String7reserveEj>
    1140:	81 11       	cpse	r24, r1
    1142:	04 c0       	rjmp	.+8      	; 0x114c <_ZN6String4copyEPKcj+0x24>
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6String10invalidateEv>
    114a:	07 c0       	rjmp	.+14     	; 0x115a <_ZN6String4copyEPKcj+0x32>
    114c:	1d 83       	std	Y+5, r17	; 0x05
    114e:	0c 83       	std	Y+4, r16	; 0x04
    1150:	b7 01       	movw	r22, r14
    1152:	88 81       	ld	r24, Y
    1154:	99 81       	ldd	r25, Y+1	; 0x01
    1156:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <strcpy>
    115a:	ce 01       	movw	r24, r28
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <_ZN6StringC1EPKc>:
    116a:	fc 01       	movw	r30, r24
    116c:	11 82       	std	Z+1, r1	; 0x01
    116e:	10 82       	st	Z, r1
    1170:	13 82       	std	Z+3, r1	; 0x03
    1172:	12 82       	std	Z+2, r1	; 0x02
    1174:	15 82       	std	Z+5, r1	; 0x05
    1176:	14 82       	std	Z+4, r1	; 0x04
    1178:	61 15       	cp	r22, r1
    117a:	71 05       	cpc	r23, r1
    117c:	51 f0       	breq	.+20     	; 0x1192 <_ZN6StringC1EPKc+0x28>
    117e:	fb 01       	movw	r30, r22
    1180:	01 90       	ld	r0, Z+
    1182:	00 20       	and	r0, r0
    1184:	e9 f7       	brne	.-6      	; 0x1180 <_ZN6StringC1EPKc+0x16>
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	af 01       	movw	r20, r30
    118a:	46 1b       	sub	r20, r22
    118c:	57 0b       	sbc	r21, r23
    118e:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_ZN6String4copyEPKcj>
    1192:	08 95       	ret

00001194 <_ZN6StringaSEPKc>:
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
    119a:	61 15       	cp	r22, r1
    119c:	71 05       	cpc	r23, r1
    119e:	59 f0       	breq	.+22     	; 0x11b6 <_ZN6StringaSEPKc+0x22>
    11a0:	fb 01       	movw	r30, r22
    11a2:	01 90       	ld	r0, Z+
    11a4:	00 20       	and	r0, r0
    11a6:	e9 f7       	brne	.-6      	; 0x11a2 <_ZN6StringaSEPKc+0xe>
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	af 01       	movw	r20, r30
    11ac:	46 1b       	sub	r20, r22
    11ae:	57 0b       	sbc	r21, r23
    11b0:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN6String4copyEPKcj>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <_ZN6StringaSEPKc+0x26>
    11b6:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6String10invalidateEv>
    11ba:	ce 01       	movw	r24, r28
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <_ZN6String6concatEPKcj>:
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	61 15       	cp	r22, r1
    11d0:	71 05       	cpc	r23, r1
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <_ZN6String6concatEPKcj+0x16>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	1c c0       	rjmp	.+56     	; 0x1210 <_ZN6String6concatEPKcj+0x4e>
    11d8:	41 15       	cp	r20, r1
    11da:	51 05       	cpc	r21, r1
    11dc:	c1 f0       	breq	.+48     	; 0x120e <_ZN6String6concatEPKcj+0x4c>
    11de:	7b 01       	movw	r14, r22
    11e0:	ec 01       	movw	r28, r24
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	8a 01       	movw	r16, r20
    11e8:	08 0f       	add	r16, r24
    11ea:	19 1f       	adc	r17, r25
    11ec:	b8 01       	movw	r22, r16
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN6String7reserveEj>
    11f4:	88 23       	and	r24, r24
    11f6:	71 f3       	breq	.-36     	; 0x11d4 <_ZN6String6concatEPKcj+0x12>
    11f8:	28 81       	ld	r18, Y
    11fa:	39 81       	ldd	r19, Y+1	; 0x01
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	b7 01       	movw	r22, r14
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <strcpy>
    120a:	1d 83       	std	Y+5, r17	; 0x05
    120c:	0c 83       	std	Y+4, r16	; 0x04
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <_ZN6String6concatEc>:
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 d0       	rcall	.+0      	; 0x1224 <_ZN6String6concatEc+0x6>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	69 83       	std	Y+1, r22	; 0x01
    122a:	1a 82       	std	Y+2, r1	; 0x02
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	be 01       	movw	r22, r28
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN6String6concatEPKcj>
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	11 f0       	breq	.+4      	; 0x1252 <_ZNK6String5toIntEv+0xe>
    124e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <atol>
	return 0;
}
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	cb 01       	movw	r24, r22
    1258:	08 95       	ret

0000125a <_ZN12AccelStepper4stepEl>:
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
	_acceleration = acceleration;
	computeNewSpeed();
    }
}
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	dc 01       	movw	r26, r24
    1260:	13 96       	adiw	r26, 0x03	; 3
    1262:	ec 91       	ld	r30, X
    1264:	0e 2f       	mov	r16, r30
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	09 30       	cpi	r16, 0x09	; 9
    126a:	11 05       	cpc	r17, r1
    126c:	c0 f5       	brcc	.+112    	; 0x12de <_ZN12AccelStepper4stepEl+0x84>
    126e:	f8 01       	movw	r30, r16
    1270:	ec 5c       	subi	r30, 0xCC	; 204
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__tablejump2__>
    1278:	dc 01       	movw	r26, r24
    127a:	ed 91       	ld	r30, X+
    127c:	fc 91       	ld	r31, X
    127e:	00 84       	ldd	r0, Z+8	; 0x08
    1280:	f1 85       	ldd	r31, Z+9	; 0x09
    1282:	e0 2d       	mov	r30, r0
    1284:	29 c0       	rjmp	.+82     	; 0x12d8 <_ZN12AccelStepper4stepEl+0x7e>
    1286:	dc 01       	movw	r26, r24
    1288:	ed 91       	ld	r30, X+
    128a:	fc 91       	ld	r31, X
    128c:	02 84       	ldd	r0, Z+10	; 0x0a
    128e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1290:	e0 2d       	mov	r30, r0
    1292:	22 c0       	rjmp	.+68     	; 0x12d8 <_ZN12AccelStepper4stepEl+0x7e>
    1294:	dc 01       	movw	r26, r24
    1296:	ed 91       	ld	r30, X+
    1298:	fc 91       	ld	r31, X
    129a:	04 84       	ldd	r0, Z+12	; 0x0c
    129c:	f5 85       	ldd	r31, Z+13	; 0x0d
    129e:	e0 2d       	mov	r30, r0
    12a0:	1b c0       	rjmp	.+54     	; 0x12d8 <_ZN12AccelStepper4stepEl+0x7e>
    12a2:	dc 01       	movw	r26, r24
    12a4:	ed 91       	ld	r30, X+
    12a6:	fc 91       	ld	r31, X
    12a8:	06 84       	ldd	r0, Z+14	; 0x0e
    12aa:	f7 85       	ldd	r31, Z+15	; 0x0f
    12ac:	e0 2d       	mov	r30, r0
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <_ZN12AccelStepper4stepEl+0x7e>
    12b0:	dc 01       	movw	r26, r24
    12b2:	ed 91       	ld	r30, X+
    12b4:	fc 91       	ld	r31, X
    12b6:	00 88       	ldd	r0, Z+16	; 0x10
    12b8:	f1 89       	ldd	r31, Z+17	; 0x11
    12ba:	e0 2d       	mov	r30, r0
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <_ZN12AccelStepper4stepEl+0x7e>
    12be:	dc 01       	movw	r26, r24
    12c0:	ed 91       	ld	r30, X+
    12c2:	fc 91       	ld	r31, X
    12c4:	02 88       	ldd	r0, Z+18	; 0x12
    12c6:	f3 89       	ldd	r31, Z+19	; 0x13
    12c8:	e0 2d       	mov	r30, r0
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <_ZN12AccelStepper4stepEl+0x7e>
    12cc:	dc 01       	movw	r26, r24
    12ce:	ed 91       	ld	r30, X+
    12d0:	fc 91       	ld	r31, X
    12d2:	04 88       	ldd	r0, Z+20	; 0x14
    12d4:	f5 89       	ldd	r31, Z+21	; 0x15
    12d6:	e0 2d       	mov	r30, r0
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	09 94       	ijmp
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	08 95       	ret

000012e4 <_ZN12AccelStepper5step6El>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	ba 01       	movw	r22, r20
    12ee:	26 e0       	ldi	r18, 0x06	; 6
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__divmodsi4>
    12fa:	62 30       	cpi	r22, 0x02	; 2
    12fc:	71 05       	cpc	r23, r1
    12fe:	81 05       	cpc	r24, r1
    1300:	91 05       	cpc	r25, r1
    1302:	59 f1       	breq	.+86     	; 0x135a <_ZN12AccelStepper5step6El+0x76>
    1304:	8c f4       	brge	.+34     	; 0x1328 <_ZN12AccelStepper5step6El+0x44>
    1306:	61 15       	cp	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	81 05       	cpc	r24, r1
    130c:	91 05       	cpc	r25, r1
    130e:	f1 f0       	breq	.+60     	; 0x134c <_ZN12AccelStepper5step6El+0x68>
    1310:	61 30       	cpi	r22, 0x01	; 1
    1312:	71 05       	cpc	r23, r1
    1314:	81 05       	cpc	r24, r1
    1316:	91 05       	cpc	r25, r1
    1318:	c1 f5       	brne	.+112    	; 0x138a <_ZN12AccelStepper5step6El+0xa6>
    131a:	e8 81       	ld	r30, Y
    131c:	f9 81       	ldd	r31, Y+1	; 0x01
    131e:	04 80       	ldd	r0, Z+4	; 0x04
    1320:	f5 81       	ldd	r31, Z+5	; 0x05
    1322:	e0 2d       	mov	r30, r0
    1324:	65 e0       	ldi	r22, 0x05	; 5
    1326:	2d c0       	rjmp	.+90     	; 0x1382 <_ZN12AccelStepper5step6El+0x9e>
    1328:	64 30       	cpi	r22, 0x04	; 4
    132a:	71 05       	cpc	r23, r1
    132c:	81 05       	cpc	r24, r1
    132e:	91 05       	cpc	r25, r1
    1330:	11 f1       	breq	.+68     	; 0x1376 <_ZN12AccelStepper5step6El+0x92>
    1332:	d4 f0       	brlt	.+52     	; 0x1368 <_ZN12AccelStepper5step6El+0x84>
    1334:	65 30       	cpi	r22, 0x05	; 5
    1336:	71 05       	cpc	r23, r1
    1338:	81 05       	cpc	r24, r1
    133a:	91 05       	cpc	r25, r1
    133c:	31 f5       	brne	.+76     	; 0x138a <_ZN12AccelStepper5step6El+0xa6>
    133e:	e8 81       	ld	r30, Y
    1340:	f9 81       	ldd	r31, Y+1	; 0x01
    1342:	04 80       	ldd	r0, Z+4	; 0x04
    1344:	f5 81       	ldd	r31, Z+5	; 0x05
    1346:	e0 2d       	mov	r30, r0
    1348:	66 e0       	ldi	r22, 0x06	; 6
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <_ZN12AccelStepper5step6El+0x9e>
    134c:	e8 81       	ld	r30, Y
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	04 80       	ldd	r0, Z+4	; 0x04
    1352:	f5 81       	ldd	r31, Z+5	; 0x05
    1354:	e0 2d       	mov	r30, r0
    1356:	64 e0       	ldi	r22, 0x04	; 4
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <_ZN12AccelStepper5step6El+0x9e>
    135a:	e8 81       	ld	r30, Y
    135c:	f9 81       	ldd	r31, Y+1	; 0x01
    135e:	04 80       	ldd	r0, Z+4	; 0x04
    1360:	f5 81       	ldd	r31, Z+5	; 0x05
    1362:	e0 2d       	mov	r30, r0
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <_ZN12AccelStepper5step6El+0x9e>
    1368:	e8 81       	ld	r30, Y
    136a:	f9 81       	ldd	r31, Y+1	; 0x01
    136c:	04 80       	ldd	r0, Z+4	; 0x04
    136e:	f5 81       	ldd	r31, Z+5	; 0x05
    1370:	e0 2d       	mov	r30, r0
    1372:	63 e0       	ldi	r22, 0x03	; 3
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <_ZN12AccelStepper5step6El+0x9e>
    1376:	e8 81       	ld	r30, Y
    1378:	f9 81       	ldd	r31, Y+1	; 0x01
    137a:	04 80       	ldd	r0, Z+4	; 0x04
    137c:	f5 81       	ldd	r31, Z+5	; 0x05
    137e:	e0 2d       	mov	r30, r0
    1380:	62 e0       	ldi	r22, 0x02	; 2
    1382:	ce 01       	movw	r24, r28
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	09 94       	ijmp
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <_ZN12AccelStepper5step8El>:
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	47 70       	andi	r20, 0x07	; 7
    1396:	55 27       	eor	r21, r21
    1398:	66 27       	eor	r22, r22
    139a:	77 27       	eor	r23, r23
    139c:	fa 01       	movw	r30, r20
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	ec 01       	movw	r28, r24
    13a2:	a8 81       	ld	r26, Y
    13a4:	b9 81       	ldd	r27, Y+1	; 0x01
    13a6:	e7 30       	cpi	r30, 0x07	; 7
    13a8:	f1 05       	cpc	r31, r1
    13aa:	20 f4       	brcc	.+8      	; 0x13b4 <_ZN12AccelStepper5step8El+0x24>
    13ac:	e3 5c       	subi	r30, 0xC3	; 195
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__tablejump2__>
    13b4:	14 96       	adiw	r26, 0x04	; 4
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	15 97       	sbiw	r26, 0x05	; 5
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	29 c0       	rjmp	.+82     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    13c0:	14 96       	adiw	r26, 0x04	; 4
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	15 97       	sbiw	r26, 0x05	; 5
    13c8:	65 e0       	ldi	r22, 0x05	; 5
    13ca:	23 c0       	rjmp	.+70     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    13cc:	14 96       	adiw	r26, 0x04	; 4
    13ce:	ed 91       	ld	r30, X+
    13d0:	fc 91       	ld	r31, X
    13d2:	15 97       	sbiw	r26, 0x05	; 5
    13d4:	64 e0       	ldi	r22, 0x04	; 4
    13d6:	1d c0       	rjmp	.+58     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    13d8:	14 96       	adiw	r26, 0x04	; 4
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	15 97       	sbiw	r26, 0x05	; 5
    13e0:	66 e0       	ldi	r22, 0x06	; 6
    13e2:	17 c0       	rjmp	.+46     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    13e4:	14 96       	adiw	r26, 0x04	; 4
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	15 97       	sbiw	r26, 0x05	; 5
    13ec:	62 e0       	ldi	r22, 0x02	; 2
    13ee:	11 c0       	rjmp	.+34     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    13f0:	14 96       	adiw	r26, 0x04	; 4
    13f2:	ed 91       	ld	r30, X+
    13f4:	fc 91       	ld	r31, X
    13f6:	15 97       	sbiw	r26, 0x05	; 5
    13f8:	6a e0       	ldi	r22, 0x0A	; 10
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    13fc:	14 96       	adiw	r26, 0x04	; 4
    13fe:	ed 91       	ld	r30, X+
    1400:	fc 91       	ld	r31, X
    1402:	15 97       	sbiw	r26, 0x05	; 5
    1404:	68 e0       	ldi	r22, 0x08	; 8
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <_ZN12AccelStepper5step8El+0x82>
    1408:	14 96       	adiw	r26, 0x04	; 4
    140a:	ed 91       	ld	r30, X+
    140c:	fc 91       	ld	r31, X
    140e:	15 97       	sbiw	r26, 0x05	; 5
    1410:	69 e0       	ldi	r22, 0x09	; 9
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	09 94       	ijmp

00001418 <_ZN12AccelStepper13setOutputPinsEh>:
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	ec 01       	movw	r28, r24
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	94 30       	cpi	r25, 0x04	; 4
    142e:	41 f0       	breq	.+16     	; 0x1440 <_ZN12AccelStepper13setOutputPinsEh+0x28>
    1430:	98 30       	cpi	r25, 0x08	; 8
    1432:	31 f0       	breq	.+12     	; 0x1440 <_ZN12AccelStepper13setOutputPinsEh+0x28>
    1434:	93 30       	cpi	r25, 0x03	; 3
    1436:	31 f0       	breq	.+12     	; 0x1444 <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    1438:	96 30       	cpi	r25, 0x06	; 6
    143a:	21 f0       	breq	.+8      	; 0x1444 <_ZN12AccelStepper13setOutputPinsEh+0x2c>
    143c:	12 e0       	ldi	r17, 0x02	; 2
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <_ZN12AccelStepper13setOutputPinsEh+0x2e>
    1440:	14 e0       	ldi	r17, 0x04	; 4
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <_ZN12AccelStepper13setOutputPinsEh+0x2e>
    1444:	13 e0       	ldi	r17, 0x03	; 3
    1446:	24 96       	adiw	r28, 0x04	; 4
    1448:	e1 2c       	mov	r14, r1
    144a:	f1 2c       	mov	r15, r1
    144c:	c6 2e       	mov	r12, r22
    144e:	d1 2c       	mov	r13, r1
    1450:	01 e0       	ldi	r16, 0x01	; 1
    1452:	c6 01       	movw	r24, r12
    1454:	0e 2c       	mov	r0, r14
    1456:	02 c0       	rjmp	.+4      	; 0x145c <_ZN12AccelStepper13setOutputPinsEh+0x44>
    1458:	95 95       	asr	r25
    145a:	87 95       	ror	r24
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <_ZN12AccelStepper13setOutputPinsEh+0x40>
    1460:	6c 81       	ldd	r22, Y+4	; 0x04
    1462:	80 fd       	sbrc	r24, 0
    1464:	60 27       	eor	r22, r16
    1466:	89 91       	ld	r24, Y+
    1468:	0e 94 18 08 	call	0x1030	; 0x1030 <digitalWrite>
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	e8 1a       	sub	r14, r24
    1470:	f8 0a       	sbc	r15, r24
    1472:	e1 16       	cp	r14, r17
    1474:	70 f3       	brcs	.-36     	; 0x1452 <_ZN12AccelStepper13setOutputPinsEh+0x3a>
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	08 95       	ret

00001488 <_ZN12AccelStepper5step1El>:
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    148e:	e8 81       	ld	r30, Y
    1490:	f9 81       	ldd	r31, Y+1	; 0x01
    1492:	04 80       	ldd	r0, Z+4	; 0x04
    1494:	f5 81       	ldd	r31, Z+5	; 0x05
    1496:	e0 2d       	mov	r30, r0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	81 11       	cpse	r24, r1
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <_ZN12AccelStepper5step1El+0x1a>
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <_ZN12AccelStepper5step1El+0x1c>
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	ce 01       	movw	r24, r28
    14a6:	09 95       	icall
    14a8:	e8 81       	ld	r30, Y
    14aa:	f9 81       	ldd	r31, Y+1	; 0x01
    14ac:	04 80       	ldd	r0, Z+4	; 0x04
    14ae:	f5 81       	ldd	r31, Z+5	; 0x05
    14b0:	e0 2d       	mov	r30, r0
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	81 11       	cpse	r24, r1
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <_ZN12AccelStepper5step1El+0x34>
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <_ZN12AccelStepper5step1El+0x36>
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	ce 01       	movw	r24, r28
    14c0:	09 95       	icall
    14c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    14c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    14c6:	0e 94 6d 07 	call	0xeda	; 0xeda <delayMicroseconds>
    14ca:	e8 81       	ld	r30, Y
    14cc:	f9 81       	ldd	r31, Y+1	; 0x01
    14ce:	04 80       	ldd	r0, Z+4	; 0x04
    14d0:	f5 81       	ldd	r31, Z+5	; 0x05
    14d2:	e0 2d       	mov	r30, r0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	81 11       	cpse	r24, r1
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <_ZN12AccelStepper5step1El+0x56>
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <_ZN12AccelStepper5step1El+0x58>
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	ce 01       	movw	r24, r28
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	09 94       	ijmp

000014e8 <_ZN12AccelStepper13enableOutputsEv>:
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	fc 01       	movw	r30, r24
    14ee:	23 81       	ldd	r18, Z+3	; 0x03
    14f0:	22 23       	and	r18, r18
    14f2:	59 f1       	breq	.+86     	; 0x154a <_ZN12AccelStepper13enableOutputsEv+0x62>
    14f4:	ec 01       	movw	r28, r24
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	84 81       	ldd	r24, Z+4	; 0x04
    14fa:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <pinMode>
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <pinMode>
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	11 f0       	breq	.+4      	; 0x1510 <_ZN12AccelStepper13enableOutputsEv+0x28>
    150c:	88 30       	cpi	r24, 0x08	; 8
    150e:	39 f4       	brne	.+14     	; 0x151e <_ZN12AccelStepper13enableOutputsEv+0x36>
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	8e 81       	ldd	r24, Y+6	; 0x06
    1514:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <pinMode>
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	8f 81       	ldd	r24, Y+7	; 0x07
    151c:	06 c0       	rjmp	.+12     	; 0x152a <_ZN12AccelStepper13enableOutputsEv+0x42>
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	11 f0       	breq	.+4      	; 0x1526 <_ZN12AccelStepper13enableOutputsEv+0x3e>
    1522:	86 30       	cpi	r24, 0x06	; 6
    1524:	21 f4       	brne	.+8      	; 0x152e <_ZN12AccelStepper13enableOutputsEv+0x46>
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	8e 81       	ldd	r24, Y+6	; 0x06
    152a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <pinMode>
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	8f 3f       	cpi	r24, 0xFF	; 255
    1532:	59 f0       	breq	.+22     	; 0x154a <_ZN12AccelStepper13enableOutputsEv+0x62>
    1534:	61 e0       	ldi	r22, 0x01	; 1
    1536:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <pinMode>
    153a:	6e a5       	ldd	r22, Y+46	; 0x2e
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	68 27       	eor	r22, r24
    1540:	8f a5       	ldd	r24, Y+47	; 0x2f
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	0c 94 18 08 	jmp	0x1030	; 0x1030 <digitalWrite>
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <_ZN12AccelStepper14disableOutputsEv>:
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	fc 01       	movw	r30, r24
    1556:	23 81       	ldd	r18, Z+3	; 0x03
    1558:	22 23       	and	r18, r18
    155a:	a9 f0       	breq	.+42     	; 0x1586 <_ZN12AccelStepper14disableOutputsEv+0x36>
    155c:	ec 01       	movw	r28, r24
    155e:	01 90       	ld	r0, Z+
    1560:	f0 81       	ld	r31, Z
    1562:	e0 2d       	mov	r30, r0
    1564:	04 80       	ldd	r0, Z+4	; 0x04
    1566:	f5 81       	ldd	r31, Z+5	; 0x05
    1568:	e0 2d       	mov	r30, r0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	09 95       	icall
    156e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1570:	8f 3f       	cpi	r24, 0xFF	; 255
    1572:	49 f0       	breq	.+18     	; 0x1586 <_ZN12AccelStepper14disableOutputsEv+0x36>
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <pinMode>
    157a:	6e a5       	ldd	r22, Y+46	; 0x2e
    157c:	8f a5       	ldd	r24, Y+47	; 0x2f
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	0c 94 18 08 	jmp	0x1030	; 0x1030 <digitalWrite>
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <_ZN12AccelStepper5step4El>:
    158c:	43 70       	andi	r20, 0x03	; 3
    158e:	55 27       	eor	r21, r21
    1590:	66 27       	eor	r22, r22
    1592:	77 27       	eor	r23, r23
    1594:	dc 01       	movw	r26, r24
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	04 80       	ldd	r0, Z+4	; 0x04
    159c:	f5 81       	ldd	r31, Z+5	; 0x05
    159e:	e0 2d       	mov	r30, r0
    15a0:	42 30       	cpi	r20, 0x02	; 2
    15a2:	51 05       	cpc	r21, r1
    15a4:	61 05       	cpc	r22, r1
    15a6:	71 05       	cpc	r23, r1
    15a8:	71 f0       	breq	.+28     	; 0x15c6 <_ZN12AccelStepper5step4El+0x3a>
    15aa:	43 30       	cpi	r20, 0x03	; 3
    15ac:	51 05       	cpc	r21, r1
    15ae:	61 05       	cpc	r22, r1
    15b0:	71 05       	cpc	r23, r1
    15b2:	59 f0       	breq	.+22     	; 0x15ca <_ZN12AccelStepper5step4El+0x3e>
    15b4:	41 30       	cpi	r20, 0x01	; 1
    15b6:	51 05       	cpc	r21, r1
    15b8:	61 05       	cpc	r22, r1
    15ba:	71 05       	cpc	r23, r1
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <_ZN12AccelStepper5step4El+0x36>
    15be:	65 e0       	ldi	r22, 0x05	; 5
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <_ZN12AccelStepper5step4El+0x40>
    15c2:	66 e0       	ldi	r22, 0x06	; 6
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <_ZN12AccelStepper5step4El+0x40>
    15c6:	6a e0       	ldi	r22, 0x0A	; 10
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <_ZN12AccelStepper5step4El+0x40>
    15ca:	69 e0       	ldi	r22, 0x09	; 9
    15cc:	09 94       	ijmp

000015ce <_ZN12AccelStepper5step3El>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	ec 01       	movw	r28, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	ba 01       	movw	r22, r20
    15d8:	23 e0       	ldi	r18, 0x03	; 3
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__divmodsi4>
    15e4:	61 30       	cpi	r22, 0x01	; 1
    15e6:	71 05       	cpc	r23, r1
    15e8:	81 05       	cpc	r24, r1
    15ea:	91 05       	cpc	r25, r1
    15ec:	81 f0       	breq	.+32     	; 0x160e <_ZN12AccelStepper5step3El+0x40>
    15ee:	62 30       	cpi	r22, 0x02	; 2
    15f0:	71 05       	cpc	r23, r1
    15f2:	81 05       	cpc	r24, r1
    15f4:	91 05       	cpc	r25, r1
    15f6:	91 f0       	breq	.+36     	; 0x161c <_ZN12AccelStepper5step3El+0x4e>
    15f8:	67 2b       	or	r22, r23
    15fa:	68 2b       	or	r22, r24
    15fc:	69 2b       	or	r22, r25
    15fe:	c1 f4       	brne	.+48     	; 0x1630 <_ZN12AccelStepper5step3El+0x62>
    1600:	e8 81       	ld	r30, Y
    1602:	f9 81       	ldd	r31, Y+1	; 0x01
    1604:	04 80       	ldd	r0, Z+4	; 0x04
    1606:	f5 81       	ldd	r31, Z+5	; 0x05
    1608:	e0 2d       	mov	r30, r0
    160a:	64 e0       	ldi	r22, 0x04	; 4
    160c:	0d c0       	rjmp	.+26     	; 0x1628 <_ZN12AccelStepper5step3El+0x5a>
    160e:	e8 81       	ld	r30, Y
    1610:	f9 81       	ldd	r31, Y+1	; 0x01
    1612:	04 80       	ldd	r0, Z+4	; 0x04
    1614:	f5 81       	ldd	r31, Z+5	; 0x05
    1616:	e0 2d       	mov	r30, r0
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <_ZN12AccelStepper5step3El+0x5a>
    161c:	e8 81       	ld	r30, Y
    161e:	f9 81       	ldd	r31, Y+1	; 0x01
    1620:	04 80       	ldd	r0, Z+4	; 0x04
    1622:	f5 81       	ldd	r31, Z+5	; 0x05
    1624:	e0 2d       	mov	r30, r0
    1626:	62 e0       	ldi	r22, 0x02	; 2
    1628:	ce 01       	movw	r24, r28
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	09 94       	ijmp
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <_ZN12AccelStepper5step2El>:
    1636:	43 70       	andi	r20, 0x03	; 3
    1638:	55 27       	eor	r21, r21
    163a:	66 27       	eor	r22, r22
    163c:	77 27       	eor	r23, r23
    163e:	dc 01       	movw	r26, r24
    1640:	ed 91       	ld	r30, X+
    1642:	fc 91       	ld	r31, X
    1644:	04 80       	ldd	r0, Z+4	; 0x04
    1646:	f5 81       	ldd	r31, Z+5	; 0x05
    1648:	e0 2d       	mov	r30, r0
    164a:	42 30       	cpi	r20, 0x02	; 2
    164c:	51 05       	cpc	r21, r1
    164e:	61 05       	cpc	r22, r1
    1650:	71 05       	cpc	r23, r1
    1652:	71 f0       	breq	.+28     	; 0x1670 <_ZN12AccelStepper5step2El+0x3a>
    1654:	43 30       	cpi	r20, 0x03	; 3
    1656:	51 05       	cpc	r21, r1
    1658:	61 05       	cpc	r22, r1
    165a:	71 05       	cpc	r23, r1
    165c:	59 f0       	breq	.+22     	; 0x1674 <_ZN12AccelStepper5step2El+0x3e>
    165e:	41 30       	cpi	r20, 0x01	; 1
    1660:	51 05       	cpc	r21, r1
    1662:	61 05       	cpc	r22, r1
    1664:	71 05       	cpc	r23, r1
    1666:	11 f0       	breq	.+4      	; 0x166c <_ZN12AccelStepper5step2El+0x36>
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <_ZN12AccelStepper5step2El+0x40>
    166c:	63 e0       	ldi	r22, 0x03	; 3
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <_ZN12AccelStepper5step2El+0x40>
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <_ZN12AccelStepper5step2El+0x40>
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	09 94       	ijmp

00001678 <_ZN12AccelStepper5step0El>:
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	ec 01       	movw	r28, r24
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	6c 89       	ldd	r22, Y+20	; 0x14
    1686:	7d 89       	ldd	r23, Y+21	; 0x15
    1688:	8e 89       	ldd	r24, Y+22	; 0x16
    168a:	9f 89       	ldd	r25, Y+23	; 0x17
    168c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__gesf2>
    1690:	18 16       	cp	r1, r24
    1692:	1c f4       	brge	.+6      	; 0x169a <_ZN12AccelStepper5step0El+0x22>
    1694:	e8 a9       	ldd	r30, Y+48	; 0x30
    1696:	f9 a9       	ldd	r31, Y+49	; 0x31
    1698:	02 c0       	rjmp	.+4      	; 0x169e <_ZN12AccelStepper5step0El+0x26>
    169a:	ea a9       	ldd	r30, Y+50	; 0x32
    169c:	fb a9       	ldd	r31, Y+51	; 0x33
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	09 94       	ijmp

000016a4 <_ZN12AccelStepper8runSpeedEv>:
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	fc 01       	movw	r30, r24
    16b2:	44 a1       	ldd	r20, Z+36	; 0x24
    16b4:	55 a1       	ldd	r21, Z+37	; 0x25
    16b6:	66 a1       	ldd	r22, Z+38	; 0x26
    16b8:	77 a1       	ldd	r23, Z+39	; 0x27
    16ba:	45 2b       	or	r20, r21
    16bc:	46 2b       	or	r20, r22
    16be:	47 2b       	or	r20, r23
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <_ZN12AccelStepper8runSpeedEv+0x22>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	3a c0       	rjmp	.+116    	; 0x173a <_ZN12AccelStepper8runSpeedEv+0x96>
    16c6:	ec 01       	movw	r28, r24
    16c8:	0e 94 0c 07 	call	0xe18	; 0xe18 <micros>
    16cc:	6b 01       	movw	r12, r22
    16ce:	7c 01       	movw	r14, r24
    16d0:	88 a5       	ldd	r24, Y+40	; 0x28
    16d2:	99 a5       	ldd	r25, Y+41	; 0x29
    16d4:	aa a5       	ldd	r26, Y+42	; 0x2a
    16d6:	bb a5       	ldd	r27, Y+43	; 0x2b
    16d8:	b7 01       	movw	r22, r14
    16da:	a6 01       	movw	r20, r12
    16dc:	48 1b       	sub	r20, r24
    16de:	59 0b       	sbc	r21, r25
    16e0:	6a 0b       	sbc	r22, r26
    16e2:	7b 0b       	sbc	r23, r27
    16e4:	8c a1       	ldd	r24, Y+36	; 0x24
    16e6:	9d a1       	ldd	r25, Y+37	; 0x25
    16e8:	ae a1       	ldd	r26, Y+38	; 0x26
    16ea:	bf a1       	ldd	r27, Y+39	; 0x27
    16ec:	48 17       	cp	r20, r24
    16ee:	59 07       	cpc	r21, r25
    16f0:	6a 07       	cpc	r22, r26
    16f2:	7b 07       	cpc	r23, r27
    16f4:	30 f3       	brcs	.-52     	; 0x16c2 <_ZN12AccelStepper8runSpeedEv+0x1e>
    16f6:	2a 81       	ldd	r18, Y+2	; 0x02
    16f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    16fc:	ae 85       	ldd	r26, Y+14	; 0x0e
    16fe:	bf 85       	ldd	r27, Y+15	; 0x0f
    1700:	22 23       	and	r18, r18
    1702:	21 f0       	breq	.+8      	; 0x170c <_ZN12AccelStepper8runSpeedEv+0x68>
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	a1 1d       	adc	r26, r1
    1708:	b1 1d       	adc	r27, r1
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <_ZN12AccelStepper8runSpeedEv+0x6e>
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	a1 09       	sbc	r26, r1
    1710:	b1 09       	sbc	r27, r1
    1712:	8c 87       	std	Y+12, r24	; 0x0c
    1714:	9d 87       	std	Y+13, r25	; 0x0d
    1716:	ae 87       	std	Y+14, r26	; 0x0e
    1718:	bf 87       	std	Y+15, r27	; 0x0f
    171a:	4c 85       	ldd	r20, Y+12	; 0x0c
    171c:	5d 85       	ldd	r21, Y+13	; 0x0d
    171e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1720:	7f 85       	ldd	r23, Y+15	; 0x0f
    1722:	e8 81       	ld	r30, Y
    1724:	f9 81       	ldd	r31, Y+1	; 0x01
    1726:	06 80       	ldd	r0, Z+6	; 0x06
    1728:	f7 81       	ldd	r31, Z+7	; 0x07
    172a:	e0 2d       	mov	r30, r0
    172c:	ce 01       	movw	r24, r28
    172e:	09 95       	icall
    1730:	c8 a6       	std	Y+40, r12	; 0x28
    1732:	d9 a6       	std	Y+41, r13	; 0x29
    1734:	ea a6       	std	Y+42, r14	; 0x2a
    1736:	fb a6       	std	Y+43, r15	; 0x2b
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	08 95       	ret

00001748 <_ZN12AccelStepper12distanceToGoEv>:
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	fc 01       	movw	r30, r24
    174e:	80 89       	ldd	r24, Z+16	; 0x10
    1750:	91 89       	ldd	r25, Z+17	; 0x11
    1752:	a2 89       	ldd	r26, Z+18	; 0x12
    1754:	b3 89       	ldd	r27, Z+19	; 0x13
    1756:	04 85       	ldd	r16, Z+12	; 0x0c
    1758:	15 85       	ldd	r17, Z+13	; 0x0d
    175a:	26 85       	ldd	r18, Z+14	; 0x0e
    175c:	37 85       	ldd	r19, Z+15	; 0x0f
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	60 1b       	sub	r22, r16
    1764:	71 0b       	sbc	r23, r17
    1766:	82 0b       	sbc	r24, r18
    1768:	93 0b       	sbc	r25, r19
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <_ZN12AccelStepper15currentPositionEv>:
    1770:	fc 01       	movw	r30, r24
    1772:	64 85       	ldd	r22, Z+12	; 0x0c
    1774:	75 85       	ldd	r23, Z+13	; 0x0d
    1776:	86 85       	ldd	r24, Z+14	; 0x0e
    1778:	97 85       	ldd	r25, Z+15	; 0x0f
    177a:	08 95       	ret

0000177c <_ZN12AccelStepper18setCurrentPositionEl>:
    177c:	fc 01       	movw	r30, r24
    177e:	44 87       	std	Z+12, r20	; 0x0c
    1780:	55 87       	std	Z+13, r21	; 0x0d
    1782:	66 87       	std	Z+14, r22	; 0x0e
    1784:	77 87       	std	Z+15, r23	; 0x0f
    1786:	40 8b       	std	Z+16, r20	; 0x10
    1788:	51 8b       	std	Z+17, r21	; 0x11
    178a:	62 8b       	std	Z+18, r22	; 0x12
    178c:	73 8b       	std	Z+19, r23	; 0x13
    178e:	14 aa       	std	Z+52, r1	; 0x34
    1790:	15 aa       	std	Z+53, r1	; 0x35
    1792:	16 aa       	std	Z+54, r1	; 0x36
    1794:	17 aa       	std	Z+55, r1	; 0x37
    1796:	14 a2       	std	Z+36, r1	; 0x24
    1798:	15 a2       	std	Z+37, r1	; 0x25
    179a:	16 a2       	std	Z+38, r1	; 0x26
    179c:	17 a2       	std	Z+39, r1	; 0x27
    179e:	14 8a       	std	Z+20, r1	; 0x14
    17a0:	15 8a       	std	Z+21, r1	; 0x15
    17a2:	16 8a       	std	Z+22, r1	; 0x16
    17a4:	17 8a       	std	Z+23, r1	; 0x17
    17a6:	08 95       	ret

000017a8 <_ZN12AccelStepper15computeNewSpeedEv>:
    17a8:	4f 92       	push	r4
    17aa:	5f 92       	push	r5
    17ac:	6f 92       	push	r6
    17ae:	7f 92       	push	r7
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	ec 01       	movw	r28, r24
    17ca:	c8 88       	ldd	r12, Y+16	; 0x10
    17cc:	d9 88       	ldd	r13, Y+17	; 0x11
    17ce:	ea 88       	ldd	r14, Y+18	; 0x12
    17d0:	fb 88       	ldd	r15, Y+19	; 0x13
    17d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    17d6:	ae 85       	ldd	r26, Y+14	; 0x0e
    17d8:	bf 85       	ldd	r27, Y+15	; 0x0f
    17da:	c8 1a       	sub	r12, r24
    17dc:	d9 0a       	sbc	r13, r25
    17de:	ea 0a       	sbc	r14, r26
    17e0:	fb 0a       	sbc	r15, r27
    17e2:	6c 89       	ldd	r22, Y+20	; 0x14
    17e4:	7d 89       	ldd	r23, Y+21	; 0x15
    17e6:	8e 89       	ldd	r24, Y+22	; 0x16
    17e8:	9f 89       	ldd	r25, Y+23	; 0x17
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsf3>
    17f2:	4b 01       	movw	r8, r22
    17f4:	5c 01       	movw	r10, r24
    17f6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    17f8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    17fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17fe:	9b 01       	movw	r18, r22
    1800:	ac 01       	movw	r20, r24
    1802:	0e 94 26 10 	call	0x204c	; 0x204c <__addsf3>
    1806:	9b 01       	movw	r18, r22
    1808:	ac 01       	movw	r20, r24
    180a:	c5 01       	movw	r24, r10
    180c:	b4 01       	movw	r22, r8
    180e:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1812:	0e 94 09 11 	call	0x2212	; 0x2212 <__fixsfsi>
    1816:	c1 14       	cp	r12, r1
    1818:	d1 04       	cpc	r13, r1
    181a:	e1 04       	cpc	r14, r1
    181c:	f1 04       	cpc	r15, r1
    181e:	99 f4       	brne	.+38     	; 0x1846 <_ZN12AccelStepper15computeNewSpeedEv+0x9e>
    1820:	62 30       	cpi	r22, 0x02	; 2
    1822:	71 05       	cpc	r23, r1
    1824:	81 05       	cpc	r24, r1
    1826:	91 05       	cpc	r25, r1
    1828:	0c f0       	brlt	.+2      	; 0x182c <_ZN12AccelStepper15computeNewSpeedEv+0x84>
    182a:	76 c0       	rjmp	.+236    	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    182c:	1c a2       	std	Y+36, r1	; 0x24
    182e:	1d a2       	std	Y+37, r1	; 0x25
    1830:	1e a2       	std	Y+38, r1	; 0x26
    1832:	1f a2       	std	Y+39, r1	; 0x27
    1834:	1c 8a       	std	Y+20, r1	; 0x14
    1836:	1d 8a       	std	Y+21, r1	; 0x15
    1838:	1e 8a       	std	Y+22, r1	; 0x16
    183a:	1f 8a       	std	Y+23, r1	; 0x17
    183c:	1c aa       	std	Y+52, r1	; 0x34
    183e:	1d aa       	std	Y+53, r1	; 0x35
    1840:	1e aa       	std	Y+54, r1	; 0x36
    1842:	1f aa       	std	Y+55, r1	; 0x37
    1844:	ed c0       	rjmp	.+474    	; 0x1a20 <_ZN12AccelStepper15computeNewSpeedEv+0x278>
    1846:	0c a9       	ldd	r16, Y+52	; 0x34
    1848:	1d a9       	ldd	r17, Y+53	; 0x35
    184a:	2e a9       	ldd	r18, Y+54	; 0x36
    184c:	3f a9       	ldd	r19, Y+55	; 0x37
    184e:	1c 14       	cp	r1, r12
    1850:	1d 04       	cpc	r1, r13
    1852:	1e 04       	cpc	r1, r14
    1854:	1f 04       	cpc	r1, r15
    1856:	fc f4       	brge	.+62     	; 0x1896 <_ZN12AccelStepper15computeNewSpeedEv+0xee>
    1858:	10 16       	cp	r1, r16
    185a:	11 06       	cpc	r1, r17
    185c:	12 06       	cpc	r1, r18
    185e:	13 06       	cpc	r1, r19
    1860:	4c f4       	brge	.+18     	; 0x1874 <_ZN12AccelStepper15computeNewSpeedEv+0xcc>
    1862:	6c 15       	cp	r22, r12
    1864:	7d 05       	cpc	r23, r13
    1866:	8e 05       	cpc	r24, r14
    1868:	9f 05       	cpc	r25, r15
    186a:	4c f5       	brge	.+82     	; 0x18be <_ZN12AccelStepper15computeNewSpeedEv+0x116>
    186c:	2a 81       	ldd	r18, Y+2	; 0x02
    186e:	21 11       	cpse	r18, r1
    1870:	53 c0       	rjmp	.+166    	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1872:	25 c0       	rjmp	.+74     	; 0x18be <_ZN12AccelStepper15computeNewSpeedEv+0x116>
    1874:	01 15       	cp	r16, r1
    1876:	11 05       	cpc	r17, r1
    1878:	21 05       	cpc	r18, r1
    187a:	31 05       	cpc	r19, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <_ZN12AccelStepper15computeNewSpeedEv+0xd8>
    187e:	4c c0       	rjmp	.+152    	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1880:	6c 15       	cp	r22, r12
    1882:	7d 05       	cpc	r23, r13
    1884:	8e 05       	cpc	r24, r14
    1886:	9f 05       	cpc	r25, r15
    1888:	0c f0       	brlt	.+2      	; 0x188c <_ZN12AccelStepper15computeNewSpeedEv+0xe4>
    188a:	46 c0       	rjmp	.+140    	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 23       	and	r24, r24
    1890:	09 f4       	brne	.+2      	; 0x1894 <_ZN12AccelStepper15computeNewSpeedEv+0xec>
    1892:	42 c0       	rjmp	.+132    	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1894:	36 c0       	rjmp	.+108    	; 0x1902 <_ZN12AccelStepper15computeNewSpeedEv+0x15a>
    1896:	10 16       	cp	r1, r16
    1898:	11 06       	cpc	r1, r17
    189a:	12 06       	cpc	r1, r18
    189c:	13 06       	cpc	r1, r19
    189e:	ec f4       	brge	.+58     	; 0x18da <_ZN12AccelStepper15computeNewSpeedEv+0x132>
    18a0:	00 27       	eor	r16, r16
    18a2:	11 27       	eor	r17, r17
    18a4:	98 01       	movw	r18, r16
    18a6:	0c 19       	sub	r16, r12
    18a8:	1d 09       	sbc	r17, r13
    18aa:	2e 09       	sbc	r18, r14
    18ac:	3f 09       	sbc	r19, r15
    18ae:	60 17       	cp	r22, r16
    18b0:	71 07       	cpc	r23, r17
    18b2:	82 07       	cpc	r24, r18
    18b4:	93 07       	cpc	r25, r19
    18b6:	1c f4       	brge	.+6      	; 0x18be <_ZN12AccelStepper15computeNewSpeedEv+0x116>
    18b8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ba:	22 23       	and	r18, r18
    18bc:	69 f1       	breq	.+90     	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    18be:	9b 01       	movw	r18, r22
    18c0:	ac 01       	movw	r20, r24
    18c2:	88 27       	eor	r24, r24
    18c4:	99 27       	eor	r25, r25
    18c6:	dc 01       	movw	r26, r24
    18c8:	82 1b       	sub	r24, r18
    18ca:	93 0b       	sbc	r25, r19
    18cc:	a4 0b       	sbc	r26, r20
    18ce:	b5 0b       	sbc	r27, r21
    18d0:	8c ab       	std	Y+52, r24	; 0x34
    18d2:	9d ab       	std	Y+53, r25	; 0x35
    18d4:	ae ab       	std	Y+54, r26	; 0x36
    18d6:	bf ab       	std	Y+55, r27	; 0x37
    18d8:	1f c0       	rjmp	.+62     	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    18da:	01 15       	cp	r16, r1
    18dc:	11 05       	cpc	r17, r1
    18de:	21 05       	cpc	r18, r1
    18e0:	31 05       	cpc	r19, r1
    18e2:	d1 f0       	breq	.+52     	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    18e4:	88 24       	eor	r8, r8
    18e6:	99 24       	eor	r9, r9
    18e8:	54 01       	movw	r10, r8
    18ea:	8c 18       	sub	r8, r12
    18ec:	9d 08       	sbc	r9, r13
    18ee:	ae 08       	sbc	r10, r14
    18f0:	bf 08       	sbc	r11, r15
    18f2:	68 15       	cp	r22, r8
    18f4:	79 05       	cpc	r23, r9
    18f6:	8a 05       	cpc	r24, r10
    18f8:	9b 05       	cpc	r25, r11
    18fa:	74 f4       	brge	.+28     	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	81 11       	cpse	r24, r1
    1900:	0b c0       	rjmp	.+22     	; 0x1918 <_ZN12AccelStepper15computeNewSpeedEv+0x170>
    1902:	30 95       	com	r19
    1904:	20 95       	com	r18
    1906:	10 95       	com	r17
    1908:	01 95       	neg	r16
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	2f 4f       	sbci	r18, 0xFF	; 255
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	0c ab       	std	Y+52, r16	; 0x34
    1912:	1d ab       	std	Y+53, r17	; 0x35
    1914:	2e ab       	std	Y+54, r18	; 0x36
    1916:	3f ab       	std	Y+55, r19	; 0x37
    1918:	8c a8       	ldd	r8, Y+52	; 0x34
    191a:	9d a8       	ldd	r9, Y+53	; 0x35
    191c:	ae a8       	ldd	r10, Y+54	; 0x36
    191e:	bf a8       	ldd	r11, Y+55	; 0x37
    1920:	81 14       	cp	r8, r1
    1922:	91 04       	cpc	r9, r1
    1924:	a1 04       	cpc	r10, r1
    1926:	b1 04       	cpc	r11, r1
    1928:	89 f4       	brne	.+34     	; 0x194c <_ZN12AccelStepper15computeNewSpeedEv+0x1a4>
    192a:	88 ad       	ldd	r24, Y+56	; 0x38
    192c:	99 ad       	ldd	r25, Y+57	; 0x39
    192e:	aa ad       	ldd	r26, Y+58	; 0x3a
    1930:	bb ad       	ldd	r27, Y+59	; 0x3b
    1932:	8c af       	std	Y+60, r24	; 0x3c
    1934:	9d af       	std	Y+61, r25	; 0x3d
    1936:	ae af       	std	Y+62, r26	; 0x3e
    1938:	bf af       	std	Y+63, r27	; 0x3f
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	1c 14       	cp	r1, r12
    193e:	1d 04       	cpc	r1, r13
    1940:	1e 04       	cpc	r1, r14
    1942:	1f 04       	cpc	r1, r15
    1944:	0c f0       	brlt	.+2      	; 0x1948 <_ZN12AccelStepper15computeNewSpeedEv+0x1a0>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	8a 83       	std	Y+2, r24	; 0x02
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <_ZN12AccelStepper15computeNewSpeedEv+0x222>
    194c:	cc ac       	ldd	r12, Y+60	; 0x3c
    194e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1950:	ee ac       	ldd	r14, Y+62	; 0x3e
    1952:	ff ac       	ldd	r15, Y+63	; 0x3f
    1954:	a7 01       	movw	r20, r14
    1956:	96 01       	movw	r18, r12
    1958:	c7 01       	movw	r24, r14
    195a:	b6 01       	movw	r22, r12
    195c:	0e 94 26 10 	call	0x204c	; 0x204c <__addsf3>
    1960:	2b 01       	movw	r4, r22
    1962:	3c 01       	movw	r6, r24
    1964:	c5 01       	movw	r24, r10
    1966:	b4 01       	movw	r22, r8
    1968:	0e 94 41 11 	call	0x2282	; 0x2282 <__floatsisf>
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	50 e4       	ldi	r21, 0x40	; 64
    1974:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsf3>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 26 10 	call	0x204c	; 0x204c <__addsf3>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	c3 01       	movw	r24, r6
    198a:	b2 01       	movw	r22, r4
    198c:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	c7 01       	movw	r24, r14
    1996:	b6 01       	movw	r22, r12
    1998:	0e 94 25 10 	call	0x204a	; 0x204a <__subsf3>
    199c:	3b 01       	movw	r6, r22
    199e:	6c 01       	movw	r12, r24
    19a0:	fe 01       	movw	r30, r28
    19a2:	e0 5c       	subi	r30, 0xC0	; 192
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	e0 80       	ld	r14, Z
    19a8:	f1 80       	ldd	r15, Z+1	; 0x01
    19aa:	02 81       	ldd	r16, Z+2	; 0x02
    19ac:	13 81       	ldd	r17, Z+3	; 0x03
    19ae:	97 01       	movw	r18, r14
    19b0:	a8 01       	movw	r20, r16
    19b2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__gesf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	14 f4       	brge	.+4      	; 0x19be <_ZN12AccelStepper15computeNewSpeedEv+0x216>
    19ba:	73 01       	movw	r14, r6
    19bc:	86 01       	movw	r16, r12
    19be:	c7 01       	movw	r24, r14
    19c0:	d8 01       	movw	r26, r16
    19c2:	8c af       	std	Y+60, r24	; 0x3c
    19c4:	9d af       	std	Y+61, r25	; 0x3d
    19c6:	ae af       	std	Y+62, r26	; 0x3e
    19c8:	bf af       	std	Y+63, r27	; 0x3f
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	83 1a       	sub	r8, r19
    19ce:	93 0a       	sbc	r9, r19
    19d0:	a3 0a       	sbc	r10, r19
    19d2:	b3 0a       	sbc	r11, r19
    19d4:	8c aa       	std	Y+52, r8	; 0x34
    19d6:	9d aa       	std	Y+53, r9	; 0x35
    19d8:	ae aa       	std	Y+54, r10	; 0x36
    19da:	bf aa       	std	Y+55, r11	; 0x37
    19dc:	cc ac       	ldd	r12, Y+60	; 0x3c
    19de:	dd ac       	ldd	r13, Y+61	; 0x3d
    19e0:	ee ac       	ldd	r14, Y+62	; 0x3e
    19e2:	ff ac       	ldd	r15, Y+63	; 0x3f
    19e4:	c7 01       	movw	r24, r14
    19e6:	b6 01       	movw	r22, r12
    19e8:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixunssfsi>
    19ec:	6c a3       	std	Y+36, r22	; 0x24
    19ee:	7d a3       	std	Y+37, r23	; 0x25
    19f0:	8e a3       	std	Y+38, r24	; 0x26
    19f2:	9f a3       	std	Y+39, r25	; 0x27
    19f4:	a7 01       	movw	r20, r14
    19f6:	96 01       	movw	r18, r12
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	74 e2       	ldi	r23, 0x24	; 36
    19fc:	84 e7       	ldi	r24, 0x74	; 116
    19fe:	99 e4       	ldi	r25, 0x49	; 73
    1a00:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1a04:	6c 8b       	std	Y+20, r22	; 0x14
    1a06:	7d 8b       	std	Y+21, r23	; 0x15
    1a08:	8e 8b       	std	Y+22, r24	; 0x16
    1a0a:	9f 8b       	std	Y+23, r25	; 0x17
    1a0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0e:	21 11       	cpse	r18, r1
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <_ZN12AccelStepper15computeNewSpeedEv+0x278>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	b0 58       	subi	r27, 0x80	; 128
    1a18:	8c 8b       	std	Y+20, r24	; 0x14
    1a1a:	9d 8b       	std	Y+21, r25	; 0x15
    1a1c:	ae 8b       	std	Y+22, r26	; 0x16
    1a1e:	bf 8b       	std	Y+23, r27	; 0x17
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	7f 90       	pop	r7
    1a3a:	6f 90       	pop	r6
    1a3c:	5f 90       	pop	r5
    1a3e:	4f 90       	pop	r4
    1a40:	08 95       	ret

00001a42 <_ZN12AccelStepper6moveToEl>:
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	fc 01       	movw	r30, r24
    1a48:	00 89       	ldd	r16, Z+16	; 0x10
    1a4a:	11 89       	ldd	r17, Z+17	; 0x11
    1a4c:	22 89       	ldd	r18, Z+18	; 0x12
    1a4e:	33 89       	ldd	r19, Z+19	; 0x13
    1a50:	04 17       	cp	r16, r20
    1a52:	15 07       	cpc	r17, r21
    1a54:	26 07       	cpc	r18, r22
    1a56:	37 07       	cpc	r19, r23
    1a58:	41 f0       	breq	.+16     	; 0x1a6a <_ZN12AccelStepper6moveToEl+0x28>
    1a5a:	40 8b       	std	Z+16, r20	; 0x10
    1a5c:	51 8b       	std	Z+17, r21	; 0x11
    1a5e:	62 8b       	std	Z+18, r22	; 0x12
    1a60:	73 8b       	std	Z+19, r23	; 0x13
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <_ZN12AccelStepper15computeNewSpeedEv>
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	08 95       	ret

00001a70 <_ZN12AccelStepper15setAccelerationEf.part.8>:
    1a70:	4f 92       	push	r4
    1a72:	5f 92       	push	r5
    1a74:	6f 92       	push	r6
    1a76:	7f 92       	push	r7
    1a78:	8f 92       	push	r8
    1a7a:	9f 92       	push	r9
    1a7c:	af 92       	push	r10
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	6a 01       	movw	r12, r20
    1a90:	7b 01       	movw	r14, r22
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	a9 01       	movw	r20, r18
    1a98:	c7 01       	movw	r24, r14
    1a9a:	b6 01       	movw	r22, r12
    1a9c:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1aa0:	87 ff       	sbrs	r24, 7
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <_ZN12AccelStepper15setAccelerationEf.part.8+0x3c>
    1aa4:	f7 fa       	bst	r15, 7
    1aa6:	f0 94       	com	r15
    1aa8:	f7 f8       	bld	r15, 7
    1aaa:	f0 94       	com	r15
    1aac:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1aae:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1ab0:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1ab2:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1ab4:	a7 01       	movw	r20, r14
    1ab6:	96 01       	movw	r18, r12
    1ab8:	c5 01       	movw	r24, r10
    1aba:	b4 01       	movw	r22, r8
    1abc:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <_ZN12AccelStepper15setAccelerationEf.part.8+0x56>
    1ac4:	49 c0       	rjmp	.+146    	; 0x1b58 <_ZN12AccelStepper15setAccelerationEf.part.8+0xe8>
    1ac6:	6c a9       	ldd	r22, Y+52	; 0x34
    1ac8:	7d a9       	ldd	r23, Y+53	; 0x35
    1aca:	8e a9       	ldd	r24, Y+54	; 0x36
    1acc:	9f a9       	ldd	r25, Y+55	; 0x37
    1ace:	0e 94 41 11 	call	0x2282	; 0x2282 <__floatsisf>
    1ad2:	2b 01       	movw	r4, r22
    1ad4:	3c 01       	movw	r6, r24
    1ad6:	a7 01       	movw	r20, r14
    1ad8:	96 01       	movw	r18, r12
    1ada:	c5 01       	movw	r24, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	c3 01       	movw	r24, r6
    1ae8:	b2 01       	movw	r22, r4
    1aea:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsf3>
    1aee:	0e 94 09 11 	call	0x2212	; 0x2212 <__fixsfsi>
    1af2:	6c ab       	std	Y+52, r22	; 0x34
    1af4:	7d ab       	std	Y+53, r23	; 0x35
    1af6:	8e ab       	std	Y+54, r24	; 0x36
    1af8:	9f ab       	std	Y+55, r25	; 0x37
    1afa:	a7 01       	movw	r20, r14
    1afc:	96 01       	movw	r18, r12
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e4       	ldi	r25, 0x40	; 64
    1b06:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1b0a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <sqrt>
    1b0e:	26 e5       	ldi	r18, 0x56	; 86
    1b10:	3e e0       	ldi	r19, 0x0E	; 14
    1b12:	4d e2       	ldi	r20, 0x2D	; 45
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsf3>
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	34 e2       	ldi	r19, 0x24	; 36
    1b1e:	44 e7       	ldi	r20, 0x74	; 116
    1b20:	59 e4       	ldi	r21, 0x49	; 73
    1b22:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsf3>
    1b26:	68 af       	std	Y+56, r22	; 0x38
    1b28:	79 af       	std	Y+57, r23	; 0x39
    1b2a:	8a af       	std	Y+58, r24	; 0x3a
    1b2c:	9b af       	std	Y+59, r25	; 0x3b
    1b2e:	cc 8e       	std	Y+28, r12	; 0x1c
    1b30:	dd 8e       	std	Y+29, r13	; 0x1d
    1b32:	ee 8e       	std	Y+30, r14	; 0x1e
    1b34:	ff 8e       	std	Y+31, r15	; 0x1f
    1b36:	ce 01       	movw	r24, r28
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	af 90       	pop	r10
    1b48:	9f 90       	pop	r9
    1b4a:	8f 90       	pop	r8
    1b4c:	7f 90       	pop	r7
    1b4e:	6f 90       	pop	r6
    1b50:	5f 90       	pop	r5
    1b52:	4f 90       	pop	r4
    1b54:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <_ZN12AccelStepper15computeNewSpeedEv>
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
    1b6c:	7f 90       	pop	r7
    1b6e:	6f 90       	pop	r6
    1b70:	5f 90       	pop	r5
    1b72:	4f 90       	pop	r4
    1b74:	08 95       	ret

00001b76 <_ZN12AccelStepperC1Ehhhhhb>:
    1b76:	cf 92       	push	r12
    1b78:	ef 92       	push	r14
    1b7a:	0f 93       	push	r16
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	ec 01       	movw	r28, r24
    1b82:	89 e4       	ldi	r24, 0x49	; 73
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	99 83       	std	Y+1, r25	; 0x01
    1b88:	88 83       	st	Y, r24
    1b8a:	6b 83       	std	Y+3, r22	; 0x03
    1b8c:	1c 86       	std	Y+12, r1	; 0x0c
    1b8e:	1d 86       	std	Y+13, r1	; 0x0d
    1b90:	1e 86       	std	Y+14, r1	; 0x0e
    1b92:	1f 86       	std	Y+15, r1	; 0x0f
    1b94:	18 8a       	std	Y+16, r1	; 0x10
    1b96:	19 8a       	std	Y+17, r1	; 0x11
    1b98:	1a 8a       	std	Y+18, r1	; 0x12
    1b9a:	1b 8a       	std	Y+19, r1	; 0x13
    1b9c:	1c 8a       	std	Y+20, r1	; 0x14
    1b9e:	1d 8a       	std	Y+21, r1	; 0x15
    1ba0:	1e 8a       	std	Y+22, r1	; 0x16
    1ba2:	1f 8a       	std	Y+23, r1	; 0x17
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	88 8f       	std	Y+24, r24	; 0x18
    1bae:	99 8f       	std	Y+25, r25	; 0x19
    1bb0:	aa 8f       	std	Y+26, r26	; 0x1a
    1bb2:	bb 8f       	std	Y+27, r27	; 0x1b
    1bb4:	1c 8e       	std	Y+28, r1	; 0x1c
    1bb6:	1d 8e       	std	Y+29, r1	; 0x1d
    1bb8:	1e 8e       	std	Y+30, r1	; 0x1e
    1bba:	1f 8e       	std	Y+31, r1	; 0x1f
    1bbc:	88 a3       	std	Y+32, r24	; 0x20
    1bbe:	99 a3       	std	Y+33, r25	; 0x21
    1bc0:	aa a3       	std	Y+34, r26	; 0x22
    1bc2:	bb a3       	std	Y+35, r27	; 0x23
    1bc4:	1c a2       	std	Y+36, r1	; 0x24
    1bc6:	1d a2       	std	Y+37, r1	; 0x25
    1bc8:	1e a2       	std	Y+38, r1	; 0x26
    1bca:	1f a2       	std	Y+39, r1	; 0x27
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	7d a7       	std	Y+45, r23	; 0x2d
    1bd2:	6c a7       	std	Y+44, r22	; 0x2c
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	3f a7       	std	Y+47, r19	; 0x2f
    1bd8:	18 a6       	std	Y+40, r1	; 0x28
    1bda:	19 a6       	std	Y+41, r1	; 0x29
    1bdc:	1a a6       	std	Y+42, r1	; 0x2a
    1bde:	1b a6       	std	Y+43, r1	; 0x2b
    1be0:	4c 83       	std	Y+4, r20	; 0x04
    1be2:	2d 83       	std	Y+5, r18	; 0x05
    1be4:	0e 83       	std	Y+6, r16	; 0x06
    1be6:	ef 82       	std	Y+7, r14	; 0x07
    1be8:	1e a6       	std	Y+46, r1	; 0x2e
    1bea:	1c aa       	std	Y+52, r1	; 0x34
    1bec:	1d aa       	std	Y+53, r1	; 0x35
    1bee:	1e aa       	std	Y+54, r1	; 0x36
    1bf0:	1f aa       	std	Y+55, r1	; 0x37
    1bf2:	18 ae       	std	Y+56, r1	; 0x38
    1bf4:	19 ae       	std	Y+57, r1	; 0x39
    1bf6:	1a ae       	std	Y+58, r1	; 0x3a
    1bf8:	1b ae       	std	Y+59, r1	; 0x3b
    1bfa:	1c ae       	std	Y+60, r1	; 0x3c
    1bfc:	1d ae       	std	Y+61, r1	; 0x3d
    1bfe:	1e ae       	std	Y+62, r1	; 0x3e
    1c00:	1f ae       	std	Y+63, r1	; 0x3f
    1c02:	fe 01       	movw	r30, r28
    1c04:	e0 5c       	subi	r30, 0xC0	; 192
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
    1c10:	1a 82       	std	Y+2, r1	; 0x02
    1c12:	18 86       	std	Y+8, r1	; 0x08
    1c14:	19 86       	std	Y+9, r1	; 0x09
    1c16:	1a 86       	std	Y+10, r1	; 0x0a
    1c18:	1b 86       	std	Y+11, r1	; 0x0b
    1c1a:	cc 20       	and	r12, r12
    1c1c:	19 f0       	breq	.+6      	; 0x1c24 <_ZN12AccelStepperC1Ehhhhhb+0xae>
    1c1e:	ce 01       	movw	r24, r28
    1c20:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12AccelStepper13enableOutputsEv>
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	60 e8       	ldi	r22, 0x80	; 128
    1c2a:	7f e3       	ldi	r23, 0x3F	; 63
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	0f 91       	pop	r16
    1c34:	ef 90       	pop	r14
    1c36:	cf 90       	pop	r12
    1c38:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <_ZN12AccelStepper15setAccelerationEf.part.8>

00001c3c <_ZN12AccelStepper11setMaxSpeedEf>:
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	6a 01       	movw	r12, r20
    1c50:	7b 01       	movw	r14, r22
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	a9 01       	movw	r20, r18
    1c58:	c7 01       	movw	r24, r14
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1c60:	87 ff       	sbrs	r24, 7
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <_ZN12AccelStepper11setMaxSpeedEf+0x30>
    1c64:	f7 fa       	bst	r15, 7
    1c66:	f0 94       	com	r15
    1c68:	f7 f8       	bld	r15, 7
    1c6a:	f0 94       	com	r15
    1c6c:	28 8d       	ldd	r18, Y+24	; 0x18
    1c6e:	39 8d       	ldd	r19, Y+25	; 0x19
    1c70:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1c72:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1c74:	c7 01       	movw	r24, r14
    1c76:	b6 01       	movw	r22, r12
    1c78:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <_ZN12AccelStepper11setMaxSpeedEf+0x46>
    1c80:	46 c0       	rjmp	.+140    	; 0x1d0e <_ZN12AccelStepper11setMaxSpeedEf+0xd2>
    1c82:	c8 8e       	std	Y+24, r12	; 0x18
    1c84:	d9 8e       	std	Y+25, r13	; 0x19
    1c86:	ea 8e       	std	Y+26, r14	; 0x1a
    1c88:	fb 8e       	std	Y+27, r15	; 0x1b
    1c8a:	8e 01       	movw	r16, r28
    1c8c:	00 5c       	subi	r16, 0xC0	; 192
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	a7 01       	movw	r20, r14
    1c92:	96 01       	movw	r18, r12
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	74 e2       	ldi	r23, 0x24	; 36
    1c98:	84 e7       	ldi	r24, 0x74	; 116
    1c9a:	99 e4       	ldi	r25, 0x49	; 73
    1c9c:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	60 83       	st	Z, r22
    1ca4:	71 83       	std	Z+1, r23	; 0x01
    1ca6:	82 83       	std	Z+2, r24	; 0x02
    1ca8:	93 83       	std	Z+3, r25	; 0x03
    1caa:	8c a9       	ldd	r24, Y+52	; 0x34
    1cac:	9d a9       	ldd	r25, Y+53	; 0x35
    1cae:	ae a9       	ldd	r26, Y+54	; 0x36
    1cb0:	bf a9       	ldd	r27, Y+55	; 0x37
    1cb2:	18 16       	cp	r1, r24
    1cb4:	19 06       	cpc	r1, r25
    1cb6:	1a 06       	cpc	r1, r26
    1cb8:	1b 06       	cpc	r1, r27
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <_ZN12AccelStepper11setMaxSpeedEf+0xd2>
    1cbc:	6c 89       	ldd	r22, Y+20	; 0x14
    1cbe:	7d 89       	ldd	r23, Y+21	; 0x15
    1cc0:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc2:	9f 89       	ldd	r25, Y+23	; 0x17
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__mulsf3>
    1ccc:	6b 01       	movw	r12, r22
    1cce:	7c 01       	movw	r14, r24
    1cd0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1cd2:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1cd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	0e 94 26 10 	call	0x204c	; 0x204c <__addsf3>
    1ce0:	9b 01       	movw	r18, r22
    1ce2:	ac 01       	movw	r20, r24
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1cec:	0e 94 09 11 	call	0x2212	; 0x2212 <__fixsfsi>
    1cf0:	6c ab       	std	Y+52, r22	; 0x34
    1cf2:	7d ab       	std	Y+53, r23	; 0x35
    1cf4:	8e ab       	std	Y+54, r24	; 0x36
    1cf6:	9f ab       	std	Y+55, r25	; 0x37
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	df 90       	pop	r13
    1d08:	cf 90       	pop	r12
    1d0a:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <_ZN12AccelStepper15computeNewSpeedEv>
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <_ZN12AccelStepper8maxSpeedEv>:
    1d20:	fc 01       	movw	r30, r24
    1d22:	60 8d       	ldd	r22, Z+24	; 0x18
    1d24:	71 8d       	ldd	r23, Z+25	; 0x19
    1d26:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d28:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d2a:	08 95       	ret

00001d2c <_ZN12AccelStepper8setSpeedEf>:

void AccelStepper::setSpeed(float speed)
{
    1d2c:	4f 92       	push	r4
    1d2e:	5f 92       	push	r5
    1d30:	6f 92       	push	r6
    1d32:	7f 92       	push	r7
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	ec 01       	movw	r28, r24
    1d4a:	5a 01       	movw	r10, r20
    1d4c:	8b 01       	movw	r16, r22
    if (speed == _speed)
    1d4e:	9a 01       	movw	r18, r20
    1d50:	ab 01       	movw	r20, r22
    1d52:	6c 89       	ldd	r22, Y+20	; 0x14
    1d54:	7d 89       	ldd	r23, Y+21	; 0x15
    1d56:	8e 89       	ldd	r24, Y+22	; 0x16
    1d58:	9f 89       	ldd	r25, Y+23	; 0x17
    1d5a:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <_ZN12AccelStepper8setSpeedEf+0x38>
    1d62:	4c c0       	rjmp	.+152    	; 0x1dfc <_ZN12AccelStepper8setSpeedEf+0xd0>
        return;
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
    1d64:	c8 8c       	ldd	r12, Y+24	; 0x18
    1d66:	d9 8c       	ldd	r13, Y+25	; 0x19
    1d68:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1d6a:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1d6c:	26 01       	movw	r4, r12
    1d6e:	37 01       	movw	r6, r14
    1d70:	77 fa       	bst	r7, 7
    1d72:	70 94       	com	r7
    1d74:	77 f8       	bld	r7, 7
    1d76:	70 94       	com	r7
    1d78:	a3 01       	movw	r20, r6
    1d7a:	92 01       	movw	r18, r4
    1d7c:	b5 01       	movw	r22, r10
    1d7e:	c8 01       	movw	r24, r16
    1d80:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1d84:	87 fd       	sbrc	r24, 7
    1d86:	0b c0       	rjmp	.+22     	; 0x1d9e <_ZN12AccelStepper8setSpeedEf+0x72>
    1d88:	a7 01       	movw	r20, r14
    1d8a:	96 01       	movw	r18, r12
    1d8c:	b5 01       	movw	r22, r10
    1d8e:	c8 01       	movw	r24, r16
    1d90:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__gesf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	2c f0       	brlt	.+10     	; 0x1da2 <_ZN12AccelStepper8setSpeedEf+0x76>
    1d98:	65 01       	movw	r12, r10
    1d9a:	78 01       	movw	r14, r16
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <_ZN12AccelStepper8setSpeedEf+0x76>
    1d9e:	73 01       	movw	r14, r6
    1da0:	62 01       	movw	r12, r4
    if (speed == 0.0)
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	a9 01       	movw	r20, r18
    1da8:	c7 01       	movw	r24, r14
    1daa:	b6 01       	movw	r22, r12
    1dac:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1db0:	81 11       	cpse	r24, r1
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <_ZN12AccelStepper8setSpeedEf+0x92>
	_stepInterval = 0;
    1db4:	1c a2       	std	Y+36, r1	; 0x24
    1db6:	1d a2       	std	Y+37, r1	; 0x25
    1db8:	1e a2       	std	Y+38, r1	; 0x26
    1dba:	1f a2       	std	Y+39, r1	; 0x27
    1dbc:	1b c0       	rjmp	.+54     	; 0x1df4 <_ZN12AccelStepper8setSpeedEf+0xc8>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
    1dbe:	a7 01       	movw	r20, r14
    1dc0:	96 01       	movw	r18, r12
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	74 e2       	ldi	r23, 0x24	; 36
    1dc6:	84 e7       	ldi	r24, 0x74	; 116
    1dc8:	99 e4       	ldi	r25, 0x49	; 73
    1dca:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1dce:	9f 77       	andi	r25, 0x7F	; 127
    1dd0:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixunssfsi>
    1dd4:	6c a3       	std	Y+36, r22	; 0x24
    1dd6:	7d a3       	std	Y+37, r23	; 0x25
    1dd8:	8e a3       	std	Y+38, r24	; 0x26
    1dda:	9f a3       	std	Y+39, r25	; 0x27
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
    1ddc:	11 e0       	ldi	r17, 0x01	; 1
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	a9 01       	movw	r20, r18
    1de4:	c7 01       	movw	r24, r14
    1de6:	b6 01       	movw	r22, r12
    1de8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__gesf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	0c f0       	brlt	.+2      	; 0x1df2 <_ZN12AccelStepper8setSpeedEf+0xc6>
    1df0:	10 e0       	ldi	r17, 0x00	; 0
    1df2:	1a 83       	std	Y+2, r17	; 0x02
    }
    _speed = speed;
    1df4:	cc 8a       	std	Y+20, r12	; 0x14
    1df6:	dd 8a       	std	Y+21, r13	; 0x15
    1df8:	ee 8a       	std	Y+22, r14	; 0x16
    1dfa:	ff 8a       	std	Y+23, r15	; 0x17
}
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	bf 90       	pop	r11
    1e0e:	af 90       	pop	r10
    1e10:	7f 90       	pop	r7
    1e12:	6f 90       	pop	r6
    1e14:	5f 90       	pop	r5
    1e16:	4f 90       	pop	r4
    1e18:	08 95       	ret

00001e1a <_ZN12MultiStepperC1Ev>:

#include "MultiStepper.h"
#include "AccelStepper.h"

MultiStepper::MultiStepper()
    : _num_steppers(0)
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	14 8a       	std	Z+20, r1	; 0x14
    1e1e:	08 95       	ret

00001e20 <_ZN12MultiStepper10addStepperER12AccelStepper>:
{
}

boolean MultiStepper::addStepper(AccelStepper& stepper)
{
    1e20:	fc 01       	movw	r30, r24
    if (_num_steppers >= MULTISTEPPER_MAX_STEPPERS)
    1e22:	84 89       	ldd	r24, Z+20	; 0x14
    1e24:	8a 30       	cpi	r24, 0x0A	; 10
    1e26:	58 f4       	brcc	.+22     	; 0x1e3e <_ZN12MultiStepper10addStepperER12AccelStepper+0x1e>
	return false; // No room for more
    _steppers[_num_steppers++] = &stepper;
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	98 0f       	add	r25, r24
    1e2c:	94 8b       	std	Z+20, r25	; 0x14
    1e2e:	e8 0f       	add	r30, r24
    1e30:	f1 1d       	adc	r31, r1
    1e32:	e8 0f       	add	r30, r24
    1e34:	f1 1d       	adc	r31, r1
    1e36:	71 83       	std	Z+1, r23	; 0x01
    1e38:	60 83       	st	Z, r22
    return true;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	08 95       	ret
}

boolean MultiStepper::addStepper(AccelStepper& stepper)
{
    if (_num_steppers >= MULTISTEPPER_MAX_STEPPERS)
	return false; // No room for more
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    _steppers[_num_steppers++] = &stepper;
    return true;
}
    1e40:	08 95       	ret

00001e42 <_ZN12MultiStepper6moveToEPl>:

void MultiStepper::moveTo(long absolute[])
{
    1e42:	2f 92       	push	r2
    1e44:	3f 92       	push	r3
    1e46:	4f 92       	push	r4
    1e48:	5f 92       	push	r5
    1e4a:	6f 92       	push	r6
    1e4c:	7f 92       	push	r7
    1e4e:	8f 92       	push	r8
    1e50:	9f 92       	push	r9
    1e52:	af 92       	push	r10
    1e54:	bf 92       	push	r11
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <_ZN12MultiStepper6moveToEPl+0x26>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <_ZN12MultiStepper6moveToEPl+0x28>
    1e6a:	1f 92       	push	r1
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9d 83       	std	Y+5, r25	; 0x05
    1e72:	8c 83       	std	Y+4, r24	; 0x04
    1e74:	8b 01       	movw	r16, r22
    // First find the stepper that will take the longest time to move
    float longestTime = 0.0;

    uint8_t i;
    for (i = 0; i < _num_steppers; i++)
    1e76:	31 2c       	mov	r3, r1
}

void MultiStepper::moveTo(long absolute[])
{
    // First find the stepper that will take the longest time to move
    float longestTime = 0.0;
    1e78:	21 2c       	mov	r2, r1
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	1a 82       	std	Y+2, r1	; 0x02
    1e7e:	1b 82       	std	Y+3, r1	; 0x03

    uint8_t i;
    for (i = 0; i < _num_steppers; i++)
    1e80:	ec 81       	ldd	r30, Y+4	; 0x04
    1e82:	fd 81       	ldd	r31, Y+5	; 0x05
    1e84:	84 89       	ldd	r24, Z+20	; 0x14
    1e86:	38 16       	cp	r3, r24
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <_ZN12MultiStepper6moveToEPl+0x4a>
    1e8a:	45 c0       	rjmp	.+138    	; 0x1f16 <_ZN12MultiStepper6moveToEPl+0xd4>
    {
	long thisDistance = absolute[i] - _steppers[i]->currentPosition();
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	24 e0       	ldi	r18, 0x04	; 4
    1e90:	32 9e       	mul	r3, r18
    1e92:	e0 0d       	add	r30, r0
    1e94:	f1 1d       	adc	r31, r1
    1e96:	11 24       	eor	r1, r1
    1e98:	c0 80       	ld	r12, Z
    1e9a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e9c:	e2 80       	ldd	r14, Z+2	; 0x02
    1e9e:	f3 80       	ldd	r15, Z+3	; 0x03
    1ea0:	ac 80       	ldd	r10, Y+4	; 0x04
    1ea2:	bd 80       	ldd	r11, Y+5	; 0x05
    1ea4:	a3 0c       	add	r10, r3
    1ea6:	b1 1c       	adc	r11, r1
    1ea8:	a3 0c       	add	r10, r3
    1eaa:	b1 1c       	adc	r11, r1
    1eac:	f5 01       	movw	r30, r10
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN12AccelStepper15currentPositionEv>
    1eb6:	2b 01       	movw	r4, r22
    1eb8:	3c 01       	movw	r6, r24
	float thisTime = abs(thisDistance) / _steppers[i]->maxSpeed();
    1eba:	f5 01       	movw	r30, r10
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN12AccelStepper8maxSpeedEv>
    1ec4:	4b 01       	movw	r8, r22
    1ec6:	5c 01       	movw	r10, r24
    1ec8:	c7 01       	movw	r24, r14
    1eca:	b6 01       	movw	r22, r12
    1ecc:	64 19       	sub	r22, r4
    1ece:	75 09       	sbc	r23, r5
    1ed0:	86 09       	sbc	r24, r6
    1ed2:	97 09       	sbc	r25, r7
    1ed4:	97 ff       	sbrs	r25, 7
    1ed6:	07 c0       	rjmp	.+14     	; 0x1ee6 <_ZN12MultiStepper6moveToEPl+0xa4>
    1ed8:	90 95       	com	r25
    1eda:	80 95       	com	r24
    1edc:	70 95       	com	r23
    1ede:	61 95       	neg	r22
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	0e 94 41 11 	call	0x2282	; 0x2282 <__floatsisf>
    1eea:	a5 01       	movw	r20, r10
    1eec:	94 01       	movw	r18, r8
    1eee:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1ef2:	6b 01       	movw	r12, r22
    1ef4:	7c 01       	movw	r14, r24

	if (thisTime > longestTime)
    1ef6:	9b 01       	movw	r18, r22
    1ef8:	ac 01       	movw	r20, r24
    1efa:	62 2d       	mov	r22, r2
    1efc:	79 81       	ldd	r23, Y+1	; 0x01
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	0e 94 92 10 	call	0x2124	; 0x2124 <__cmpsf2>
    1f06:	87 ff       	sbrs	r24, 7
    1f08:	04 c0       	rjmp	.+8      	; 0x1f12 <_ZN12MultiStepper6moveToEPl+0xd0>
	    longestTime = thisTime;
    1f0a:	2c 2c       	mov	r2, r12
    1f0c:	d9 82       	std	Y+1, r13	; 0x01
    1f0e:	ea 82       	std	Y+2, r14	; 0x02
    1f10:	fb 82       	std	Y+3, r15	; 0x03
{
    // First find the stepper that will take the longest time to move
    float longestTime = 0.0;

    uint8_t i;
    for (i = 0; i < _num_steppers; i++)
    1f12:	33 94       	inc	r3
    1f14:	b5 cf       	rjmp	.-150    	; 0x1e80 <_ZN12MultiStepper6moveToEPl+0x3e>

	if (thisTime > longestTime)
	    longestTime = thisTime;
    }

    if (longestTime > 0.0)
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	62 2d       	mov	r22, r2
    1f1e:	79 81       	ldd	r23, Y+1	; 0x01
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__gesf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	0c f0       	brlt	.+2      	; 0x1f2e <_ZN12MultiStepper6moveToEPl+0xec>
    1f2c:	41 c0       	rjmp	.+130    	; 0x1fb0 <_ZN12MultiStepper6moveToEPl+0x16e>
    1f2e:	71 2c       	mov	r7, r1
    {
	// Now work out a new max speed for each stepper so they will all 
	// arrived at the same time of longestTime
	for (i = 0; i < _num_steppers; i++)
    1f30:	ec 81       	ldd	r30, Y+4	; 0x04
    1f32:	fd 81       	ldd	r31, Y+5	; 0x05
    1f34:	84 89       	ldd	r24, Z+20	; 0x14
    1f36:	78 16       	cp	r7, r24
    1f38:	d8 f5       	brcc	.+118    	; 0x1fb0 <_ZN12MultiStepper6moveToEPl+0x16e>
	{
	    long thisDistance = absolute[i] - _steppers[i]->currentPosition();
    1f3a:	68 01       	movw	r12, r16
    1f3c:	f4 e0       	ldi	r31, 0x04	; 4
    1f3e:	7f 9e       	mul	r7, r31
    1f40:	c0 0c       	add	r12, r0
    1f42:	d1 1c       	adc	r13, r1
    1f44:	11 24       	eor	r1, r1
    1f46:	f6 01       	movw	r30, r12
    1f48:	80 80       	ld	r8, Z
    1f4a:	91 80       	ldd	r9, Z+1	; 0x01
    1f4c:	a2 80       	ldd	r10, Z+2	; 0x02
    1f4e:	b3 80       	ldd	r11, Z+3	; 0x03
    1f50:	ec 80       	ldd	r14, Y+4	; 0x04
    1f52:	fd 80       	ldd	r15, Y+5	; 0x05
    1f54:	e7 0c       	add	r14, r7
    1f56:	f1 1c       	adc	r15, r1
    1f58:	e7 0c       	add	r14, r7
    1f5a:	f1 1c       	adc	r15, r1
    1f5c:	f7 01       	movw	r30, r14
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
    1f62:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN12AccelStepper15currentPositionEv>
	    float thisSpeed = thisDistance / longestTime;
    1f66:	a5 01       	movw	r20, r10
    1f68:	94 01       	movw	r18, r8
    1f6a:	26 1b       	sub	r18, r22
    1f6c:	37 0b       	sbc	r19, r23
    1f6e:	48 0b       	sbc	r20, r24
    1f70:	59 0b       	sbc	r21, r25
    1f72:	ca 01       	movw	r24, r20
    1f74:	b9 01       	movw	r22, r18
    1f76:	0e 94 41 11 	call	0x2282	; 0x2282 <__floatsisf>
    1f7a:	22 2d       	mov	r18, r2
    1f7c:	39 81       	ldd	r19, Y+1	; 0x01
    1f7e:	4a 81       	ldd	r20, Y+2	; 0x02
    1f80:	5b 81       	ldd	r21, Y+3	; 0x03
    1f82:	0e 94 97 10 	call	0x212e	; 0x212e <__divsf3>
    1f86:	4b 01       	movw	r8, r22
    1f88:	5c 01       	movw	r10, r24
	    _steppers[i]->moveTo(absolute[i]); // New target position (resets speed)
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	40 81       	ld	r20, Z
    1f8e:	51 81       	ldd	r21, Z+1	; 0x01
    1f90:	62 81       	ldd	r22, Z+2	; 0x02
    1f92:	73 81       	ldd	r23, Z+3	; 0x03
    1f94:	f7 01       	movw	r30, r14
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN12AccelStepper6moveToEl>
	    _steppers[i]->setSpeed(thisSpeed); // New speed
    1f9e:	b5 01       	movw	r22, r10
    1fa0:	a4 01       	movw	r20, r8
    1fa2:	f7 01       	movw	r30, r14
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN12AccelStepper8setSpeedEf>

    if (longestTime > 0.0)
    {
	// Now work out a new max speed for each stepper so they will all 
	// arrived at the same time of longestTime
	for (i = 0; i < _num_steppers; i++)
    1fac:	73 94       	inc	r7
    1fae:	c0 cf       	rjmp	.-128    	; 0x1f30 <_ZN12MultiStepper6moveToEPl+0xee>
	    float thisSpeed = thisDistance / longestTime;
	    _steppers[i]->moveTo(absolute[i]); // New target position (resets speed)
	    _steppers[i]->setSpeed(thisSpeed); // New speed
	}
    }
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	9f 90       	pop	r9
    1fd0:	8f 90       	pop	r8
    1fd2:	7f 90       	pop	r7
    1fd4:	6f 90       	pop	r6
    1fd6:	5f 90       	pop	r5
    1fd8:	4f 90       	pop	r4
    1fda:	3f 90       	pop	r3
    1fdc:	2f 90       	pop	r2
    1fde:	08 95       	ret

00001fe0 <_ZN12MultiStepper3runEv>:

// Returns true if any motor is still running to the target position.
boolean MultiStepper::run()
{
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	7c 01       	movw	r14, r24
    uint8_t i;
    boolean ret = false;
    1fee:	00 e0       	ldi	r16, 0x00	; 0
    for (i = 0; i < _num_steppers; i++)
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	f7 01       	movw	r30, r14
    1ff4:	84 89       	ldd	r24, Z+20	; 0x14
    1ff6:	18 17       	cp	r17, r24
    1ff8:	a0 f4       	brcc	.+40     	; 0x2022 <_ZN12MultiStepper3runEv+0x42>
    1ffa:	e7 01       	movw	r28, r14
    1ffc:	c1 0f       	add	r28, r17
    1ffe:	d1 1d       	adc	r29, r1
    2000:	c1 0f       	add	r28, r17
    2002:	d1 1d       	adc	r29, r1
    {
	if ( _steppers[i]->distanceToGo() != 0)
    2004:	88 81       	ld	r24, Y
    2006:	99 81       	ldd	r25, Y+1	; 0x01
    2008:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN12AccelStepper12distanceToGoEv>
    200c:	67 2b       	or	r22, r23
    200e:	68 2b       	or	r22, r24
    2010:	69 2b       	or	r22, r25
    2012:	29 f0       	breq	.+10     	; 0x201e <_ZN12MultiStepper3runEv+0x3e>
	{
	    _steppers[i]->runSpeed();
    2014:	88 81       	ld	r24, Y
    2016:	99 81       	ldd	r25, Y+1	; 0x01
    2018:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_ZN12AccelStepper8runSpeedEv>
	    ret = true;
    201c:	01 e0       	ldi	r16, 0x01	; 1
// Returns true if any motor is still running to the target position.
boolean MultiStepper::run()
{
    uint8_t i;
    boolean ret = false;
    for (i = 0; i < _num_steppers; i++)
    201e:	1f 5f       	subi	r17, 0xFF	; 255
    2020:	e8 cf       	rjmp	.-48     	; 0x1ff2 <_ZN12MultiStepper3runEv+0x12>
	    _steppers[i]->runSpeed();
	    ret = true;
	}
    }
    return ret;
}
    2022:	80 2f       	mov	r24, r16
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	08 95       	ret

00002032 <_ZN12MultiStepper18runSpeedToPositionEv>:

// Blocks until all steppers reach their target position and are stopped
void    MultiStepper::runSpeedToPosition()
{ 
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	ec 01       	movw	r28, r24
    while (run())
    2038:	ce 01       	movw	r24, r28
    203a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN12MultiStepper3runEv>
    203e:	81 11       	cpse	r24, r1
    2040:	fb cf       	rjmp	.-10     	; 0x2038 <_ZN12MultiStepper18runSpeedToPositionEv+0x6>
	;
}
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	08 95       	ret

00002048 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2048:	08 95       	ret

0000204a <__subsf3>:
    204a:	50 58       	subi	r21, 0x80	; 128

0000204c <__addsf3>:
    204c:	bb 27       	eor	r27, r27
    204e:	aa 27       	eor	r26, r26
    2050:	0e 94 3d 10 	call	0x207a	; 0x207a <__addsf3x>
    2054:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_round>
    2058:	0e 94 a9 11 	call	0x2352	; 0x2352 <__fp_pscA>
    205c:	38 f0       	brcs	.+14     	; 0x206c <__addsf3+0x20>
    205e:	0e 94 b0 11 	call	0x2360	; 0x2360 <__fp_pscB>
    2062:	20 f0       	brcs	.+8      	; 0x206c <__addsf3+0x20>
    2064:	39 f4       	brne	.+14     	; 0x2074 <__addsf3+0x28>
    2066:	9f 3f       	cpi	r25, 0xFF	; 255
    2068:	19 f4       	brne	.+6      	; 0x2070 <__addsf3+0x24>
    206a:	26 f4       	brtc	.+8      	; 0x2074 <__addsf3+0x28>
    206c:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_nan>
    2070:	0e f4       	brtc	.+2      	; 0x2074 <__addsf3+0x28>
    2072:	e0 95       	com	r30
    2074:	e7 fb       	bst	r30, 7
    2076:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_inf>

0000207a <__addsf3x>:
    207a:	e9 2f       	mov	r30, r25
    207c:	0e 94 c8 11 	call	0x2390	; 0x2390 <__fp_split3>
    2080:	58 f3       	brcs	.-42     	; 0x2058 <__addsf3+0xc>
    2082:	ba 17       	cp	r27, r26
    2084:	62 07       	cpc	r22, r18
    2086:	73 07       	cpc	r23, r19
    2088:	84 07       	cpc	r24, r20
    208a:	95 07       	cpc	r25, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__addsf3x+0x1c>
    208e:	79 f4       	brne	.+30     	; 0x20ae <__addsf3x+0x34>
    2090:	a6 f5       	brtc	.+104    	; 0x20fa <__addsf3x+0x80>
    2092:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_zero>
    2096:	0e f4       	brtc	.+2      	; 0x209a <__addsf3x+0x20>
    2098:	e0 95       	com	r30
    209a:	0b 2e       	mov	r0, r27
    209c:	ba 2f       	mov	r27, r26
    209e:	a0 2d       	mov	r26, r0
    20a0:	0b 01       	movw	r0, r22
    20a2:	b9 01       	movw	r22, r18
    20a4:	90 01       	movw	r18, r0
    20a6:	0c 01       	movw	r0, r24
    20a8:	ca 01       	movw	r24, r20
    20aa:	a0 01       	movw	r20, r0
    20ac:	11 24       	eor	r1, r1
    20ae:	ff 27       	eor	r31, r31
    20b0:	59 1b       	sub	r21, r25
    20b2:	99 f0       	breq	.+38     	; 0x20da <__addsf3x+0x60>
    20b4:	59 3f       	cpi	r21, 0xF9	; 249
    20b6:	50 f4       	brcc	.+20     	; 0x20cc <__addsf3x+0x52>
    20b8:	50 3e       	cpi	r21, 0xE0	; 224
    20ba:	68 f1       	brcs	.+90     	; 0x2116 <__addsf3x+0x9c>
    20bc:	1a 16       	cp	r1, r26
    20be:	f0 40       	sbci	r31, 0x00	; 0
    20c0:	a2 2f       	mov	r26, r18
    20c2:	23 2f       	mov	r18, r19
    20c4:	34 2f       	mov	r19, r20
    20c6:	44 27       	eor	r20, r20
    20c8:	58 5f       	subi	r21, 0xF8	; 248
    20ca:	f3 cf       	rjmp	.-26     	; 0x20b2 <__addsf3x+0x38>
    20cc:	46 95       	lsr	r20
    20ce:	37 95       	ror	r19
    20d0:	27 95       	ror	r18
    20d2:	a7 95       	ror	r26
    20d4:	f0 40       	sbci	r31, 0x00	; 0
    20d6:	53 95       	inc	r21
    20d8:	c9 f7       	brne	.-14     	; 0x20cc <__addsf3x+0x52>
    20da:	7e f4       	brtc	.+30     	; 0x20fa <__addsf3x+0x80>
    20dc:	1f 16       	cp	r1, r31
    20de:	ba 0b       	sbc	r27, r26
    20e0:	62 0b       	sbc	r22, r18
    20e2:	73 0b       	sbc	r23, r19
    20e4:	84 0b       	sbc	r24, r20
    20e6:	ba f0       	brmi	.+46     	; 0x2116 <__addsf3x+0x9c>
    20e8:	91 50       	subi	r25, 0x01	; 1
    20ea:	a1 f0       	breq	.+40     	; 0x2114 <__addsf3x+0x9a>
    20ec:	ff 0f       	add	r31, r31
    20ee:	bb 1f       	adc	r27, r27
    20f0:	66 1f       	adc	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	c2 f7       	brpl	.-16     	; 0x20e8 <__addsf3x+0x6e>
    20f8:	0e c0       	rjmp	.+28     	; 0x2116 <__addsf3x+0x9c>
    20fa:	ba 0f       	add	r27, r26
    20fc:	62 1f       	adc	r22, r18
    20fe:	73 1f       	adc	r23, r19
    2100:	84 1f       	adc	r24, r20
    2102:	48 f4       	brcc	.+18     	; 0x2116 <__addsf3x+0x9c>
    2104:	87 95       	ror	r24
    2106:	77 95       	ror	r23
    2108:	67 95       	ror	r22
    210a:	b7 95       	ror	r27
    210c:	f7 95       	ror	r31
    210e:	9e 3f       	cpi	r25, 0xFE	; 254
    2110:	08 f0       	brcs	.+2      	; 0x2114 <__addsf3x+0x9a>
    2112:	b0 cf       	rjmp	.-160    	; 0x2074 <__addsf3+0x28>
    2114:	93 95       	inc	r25
    2116:	88 0f       	add	r24, r24
    2118:	08 f0       	brcs	.+2      	; 0x211c <__addsf3x+0xa2>
    211a:	99 27       	eor	r25, r25
    211c:	ee 0f       	add	r30, r30
    211e:	97 95       	ror	r25
    2120:	87 95       	ror	r24
    2122:	08 95       	ret

00002124 <__cmpsf2>:
    2124:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_cmp>
    2128:	08 f4       	brcc	.+2      	; 0x212c <__cmpsf2+0x8>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	08 95       	ret

0000212e <__divsf3>:
    212e:	0e 94 ab 10 	call	0x2156	; 0x2156 <__divsf3x>
    2132:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_round>
    2136:	0e 94 b0 11 	call	0x2360	; 0x2360 <__fp_pscB>
    213a:	58 f0       	brcs	.+22     	; 0x2152 <__divsf3+0x24>
    213c:	0e 94 a9 11 	call	0x2352	; 0x2352 <__fp_pscA>
    2140:	40 f0       	brcs	.+16     	; 0x2152 <__divsf3+0x24>
    2142:	29 f4       	brne	.+10     	; 0x214e <__divsf3+0x20>
    2144:	5f 3f       	cpi	r21, 0xFF	; 255
    2146:	29 f0       	breq	.+10     	; 0x2152 <__divsf3+0x24>
    2148:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_inf>
    214c:	51 11       	cpse	r21, r1
    214e:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__fp_szero>
    2152:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_nan>

00002156 <__divsf3x>:
    2156:	0e 94 c8 11 	call	0x2390	; 0x2390 <__fp_split3>
    215a:	68 f3       	brcs	.-38     	; 0x2136 <__divsf3+0x8>

0000215c <__divsf3_pse>:
    215c:	99 23       	and	r25, r25
    215e:	b1 f3       	breq	.-20     	; 0x214c <__divsf3+0x1e>
    2160:	55 23       	and	r21, r21
    2162:	91 f3       	breq	.-28     	; 0x2148 <__divsf3+0x1a>
    2164:	95 1b       	sub	r25, r21
    2166:	55 0b       	sbc	r21, r21
    2168:	bb 27       	eor	r27, r27
    216a:	aa 27       	eor	r26, r26
    216c:	62 17       	cp	r22, r18
    216e:	73 07       	cpc	r23, r19
    2170:	84 07       	cpc	r24, r20
    2172:	38 f0       	brcs	.+14     	; 0x2182 <__divsf3_pse+0x26>
    2174:	9f 5f       	subi	r25, 0xFF	; 255
    2176:	5f 4f       	sbci	r21, 0xFF	; 255
    2178:	22 0f       	add	r18, r18
    217a:	33 1f       	adc	r19, r19
    217c:	44 1f       	adc	r20, r20
    217e:	aa 1f       	adc	r26, r26
    2180:	a9 f3       	breq	.-22     	; 0x216c <__divsf3_pse+0x10>
    2182:	35 d0       	rcall	.+106    	; 0x21ee <__divsf3_pse+0x92>
    2184:	0e 2e       	mov	r0, r30
    2186:	3a f0       	brmi	.+14     	; 0x2196 <__divsf3_pse+0x3a>
    2188:	e0 e8       	ldi	r30, 0x80	; 128
    218a:	32 d0       	rcall	.+100    	; 0x21f0 <__divsf3_pse+0x94>
    218c:	91 50       	subi	r25, 0x01	; 1
    218e:	50 40       	sbci	r21, 0x00	; 0
    2190:	e6 95       	lsr	r30
    2192:	00 1c       	adc	r0, r0
    2194:	ca f7       	brpl	.-14     	; 0x2188 <__divsf3_pse+0x2c>
    2196:	2b d0       	rcall	.+86     	; 0x21ee <__divsf3_pse+0x92>
    2198:	fe 2f       	mov	r31, r30
    219a:	29 d0       	rcall	.+82     	; 0x21ee <__divsf3_pse+0x92>
    219c:	66 0f       	add	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	88 1f       	adc	r24, r24
    21a2:	bb 1f       	adc	r27, r27
    21a4:	26 17       	cp	r18, r22
    21a6:	37 07       	cpc	r19, r23
    21a8:	48 07       	cpc	r20, r24
    21aa:	ab 07       	cpc	r26, r27
    21ac:	b0 e8       	ldi	r27, 0x80	; 128
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <__divsf3_pse+0x56>
    21b0:	bb 0b       	sbc	r27, r27
    21b2:	80 2d       	mov	r24, r0
    21b4:	bf 01       	movw	r22, r30
    21b6:	ff 27       	eor	r31, r31
    21b8:	93 58       	subi	r25, 0x83	; 131
    21ba:	5f 4f       	sbci	r21, 0xFF	; 255
    21bc:	3a f0       	brmi	.+14     	; 0x21cc <__divsf3_pse+0x70>
    21be:	9e 3f       	cpi	r25, 0xFE	; 254
    21c0:	51 05       	cpc	r21, r1
    21c2:	78 f0       	brcs	.+30     	; 0x21e2 <__divsf3_pse+0x86>
    21c4:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_inf>
    21c8:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__fp_szero>
    21cc:	5f 3f       	cpi	r21, 0xFF	; 255
    21ce:	e4 f3       	brlt	.-8      	; 0x21c8 <__divsf3_pse+0x6c>
    21d0:	98 3e       	cpi	r25, 0xE8	; 232
    21d2:	d4 f3       	brlt	.-12     	; 0x21c8 <__divsf3_pse+0x6c>
    21d4:	86 95       	lsr	r24
    21d6:	77 95       	ror	r23
    21d8:	67 95       	ror	r22
    21da:	b7 95       	ror	r27
    21dc:	f7 95       	ror	r31
    21de:	9f 5f       	subi	r25, 0xFF	; 255
    21e0:	c9 f7       	brne	.-14     	; 0x21d4 <__divsf3_pse+0x78>
    21e2:	88 0f       	add	r24, r24
    21e4:	91 1d       	adc	r25, r1
    21e6:	96 95       	lsr	r25
    21e8:	87 95       	ror	r24
    21ea:	97 f9       	bld	r25, 7
    21ec:	08 95       	ret
    21ee:	e1 e0       	ldi	r30, 0x01	; 1
    21f0:	66 0f       	add	r22, r22
    21f2:	77 1f       	adc	r23, r23
    21f4:	88 1f       	adc	r24, r24
    21f6:	bb 1f       	adc	r27, r27
    21f8:	62 17       	cp	r22, r18
    21fa:	73 07       	cpc	r23, r19
    21fc:	84 07       	cpc	r24, r20
    21fe:	ba 07       	cpc	r27, r26
    2200:	20 f0       	brcs	.+8      	; 0x220a <__divsf3_pse+0xae>
    2202:	62 1b       	sub	r22, r18
    2204:	73 0b       	sbc	r23, r19
    2206:	84 0b       	sbc	r24, r20
    2208:	ba 0b       	sbc	r27, r26
    220a:	ee 1f       	adc	r30, r30
    220c:	88 f7       	brcc	.-30     	; 0x21f0 <__divsf3_pse+0x94>
    220e:	e0 95       	com	r30
    2210:	08 95       	ret

00002212 <__fixsfsi>:
    2212:	0e 94 10 11 	call	0x2220	; 0x2220 <__fixunssfsi>
    2216:	68 94       	set
    2218:	b1 11       	cpse	r27, r1
    221a:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__fp_szero>
    221e:	08 95       	ret

00002220 <__fixunssfsi>:
    2220:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fp_splitA>
    2224:	88 f0       	brcs	.+34     	; 0x2248 <__fixunssfsi+0x28>
    2226:	9f 57       	subi	r25, 0x7F	; 127
    2228:	98 f0       	brcs	.+38     	; 0x2250 <__fixunssfsi+0x30>
    222a:	b9 2f       	mov	r27, r25
    222c:	99 27       	eor	r25, r25
    222e:	b7 51       	subi	r27, 0x17	; 23
    2230:	b0 f0       	brcs	.+44     	; 0x225e <__fixunssfsi+0x3e>
    2232:	e1 f0       	breq	.+56     	; 0x226c <__fixunssfsi+0x4c>
    2234:	66 0f       	add	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	1a f0       	brmi	.+6      	; 0x2244 <__fixunssfsi+0x24>
    223e:	ba 95       	dec	r27
    2240:	c9 f7       	brne	.-14     	; 0x2234 <__fixunssfsi+0x14>
    2242:	14 c0       	rjmp	.+40     	; 0x226c <__fixunssfsi+0x4c>
    2244:	b1 30       	cpi	r27, 0x01	; 1
    2246:	91 f0       	breq	.+36     	; 0x226c <__fixunssfsi+0x4c>
    2248:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__fp_zero>
    224c:	b1 e0       	ldi	r27, 0x01	; 1
    224e:	08 95       	ret
    2250:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_zero>
    2254:	67 2f       	mov	r22, r23
    2256:	78 2f       	mov	r23, r24
    2258:	88 27       	eor	r24, r24
    225a:	b8 5f       	subi	r27, 0xF8	; 248
    225c:	39 f0       	breq	.+14     	; 0x226c <__fixunssfsi+0x4c>
    225e:	b9 3f       	cpi	r27, 0xF9	; 249
    2260:	cc f3       	brlt	.-14     	; 0x2254 <__fixunssfsi+0x34>
    2262:	86 95       	lsr	r24
    2264:	77 95       	ror	r23
    2266:	67 95       	ror	r22
    2268:	b3 95       	inc	r27
    226a:	d9 f7       	brne	.-10     	; 0x2262 <__fixunssfsi+0x42>
    226c:	3e f4       	brtc	.+14     	; 0x227c <__fixunssfsi+0x5c>
    226e:	90 95       	com	r25
    2270:	80 95       	com	r24
    2272:	70 95       	com	r23
    2274:	61 95       	neg	r22
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	8f 4f       	sbci	r24, 0xFF	; 255
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	08 95       	ret

0000227e <__floatunsisf>:
    227e:	e8 94       	clt
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <__floatsisf+0x12>

00002282 <__floatsisf>:
    2282:	97 fb       	bst	r25, 7
    2284:	3e f4       	brtc	.+14     	; 0x2294 <__floatsisf+0x12>
    2286:	90 95       	com	r25
    2288:	80 95       	com	r24
    228a:	70 95       	com	r23
    228c:	61 95       	neg	r22
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8f 4f       	sbci	r24, 0xFF	; 255
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	99 23       	and	r25, r25
    2296:	a9 f0       	breq	.+42     	; 0x22c2 <__floatsisf+0x40>
    2298:	f9 2f       	mov	r31, r25
    229a:	96 e9       	ldi	r25, 0x96	; 150
    229c:	bb 27       	eor	r27, r27
    229e:	93 95       	inc	r25
    22a0:	f6 95       	lsr	r31
    22a2:	87 95       	ror	r24
    22a4:	77 95       	ror	r23
    22a6:	67 95       	ror	r22
    22a8:	b7 95       	ror	r27
    22aa:	f1 11       	cpse	r31, r1
    22ac:	f8 cf       	rjmp	.-16     	; 0x229e <__floatsisf+0x1c>
    22ae:	fa f4       	brpl	.+62     	; 0x22ee <__floatsisf+0x6c>
    22b0:	bb 0f       	add	r27, r27
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <__floatsisf+0x36>
    22b4:	60 ff       	sbrs	r22, 0
    22b6:	1b c0       	rjmp	.+54     	; 0x22ee <__floatsisf+0x6c>
    22b8:	6f 5f       	subi	r22, 0xFF	; 255
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	8f 4f       	sbci	r24, 0xFF	; 255
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	16 c0       	rjmp	.+44     	; 0x22ee <__floatsisf+0x6c>
    22c2:	88 23       	and	r24, r24
    22c4:	11 f0       	breq	.+4      	; 0x22ca <__floatsisf+0x48>
    22c6:	96 e9       	ldi	r25, 0x96	; 150
    22c8:	11 c0       	rjmp	.+34     	; 0x22ec <__floatsisf+0x6a>
    22ca:	77 23       	and	r23, r23
    22cc:	21 f0       	breq	.+8      	; 0x22d6 <__floatsisf+0x54>
    22ce:	9e e8       	ldi	r25, 0x8E	; 142
    22d0:	87 2f       	mov	r24, r23
    22d2:	76 2f       	mov	r23, r22
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <__floatsisf+0x5e>
    22d6:	66 23       	and	r22, r22
    22d8:	71 f0       	breq	.+28     	; 0x22f6 <__floatsisf+0x74>
    22da:	96 e8       	ldi	r25, 0x86	; 134
    22dc:	86 2f       	mov	r24, r22
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	2a f0       	brmi	.+10     	; 0x22ee <__floatsisf+0x6c>
    22e4:	9a 95       	dec	r25
    22e6:	66 0f       	add	r22, r22
    22e8:	77 1f       	adc	r23, r23
    22ea:	88 1f       	adc	r24, r24
    22ec:	da f7       	brpl	.-10     	; 0x22e4 <__floatsisf+0x62>
    22ee:	88 0f       	add	r24, r24
    22f0:	96 95       	lsr	r25
    22f2:	87 95       	ror	r24
    22f4:	97 f9       	bld	r25, 7
    22f6:	08 95       	ret

000022f8 <__fp_cmp>:
    22f8:	99 0f       	add	r25, r25
    22fa:	00 08       	sbc	r0, r0
    22fc:	55 0f       	add	r21, r21
    22fe:	aa 0b       	sbc	r26, r26
    2300:	e0 e8       	ldi	r30, 0x80	; 128
    2302:	fe ef       	ldi	r31, 0xFE	; 254
    2304:	16 16       	cp	r1, r22
    2306:	17 06       	cpc	r1, r23
    2308:	e8 07       	cpc	r30, r24
    230a:	f9 07       	cpc	r31, r25
    230c:	c0 f0       	brcs	.+48     	; 0x233e <__fp_cmp+0x46>
    230e:	12 16       	cp	r1, r18
    2310:	13 06       	cpc	r1, r19
    2312:	e4 07       	cpc	r30, r20
    2314:	f5 07       	cpc	r31, r21
    2316:	98 f0       	brcs	.+38     	; 0x233e <__fp_cmp+0x46>
    2318:	62 1b       	sub	r22, r18
    231a:	73 0b       	sbc	r23, r19
    231c:	84 0b       	sbc	r24, r20
    231e:	95 0b       	sbc	r25, r21
    2320:	39 f4       	brne	.+14     	; 0x2330 <__fp_cmp+0x38>
    2322:	0a 26       	eor	r0, r26
    2324:	61 f0       	breq	.+24     	; 0x233e <__fp_cmp+0x46>
    2326:	23 2b       	or	r18, r19
    2328:	24 2b       	or	r18, r20
    232a:	25 2b       	or	r18, r21
    232c:	21 f4       	brne	.+8      	; 0x2336 <__fp_cmp+0x3e>
    232e:	08 95       	ret
    2330:	0a 26       	eor	r0, r26
    2332:	09 f4       	brne	.+2      	; 0x2336 <__fp_cmp+0x3e>
    2334:	a1 40       	sbci	r26, 0x01	; 1
    2336:	a6 95       	lsr	r26
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	81 1d       	adc	r24, r1
    233c:	81 1d       	adc	r24, r1
    233e:	08 95       	ret

00002340 <__fp_inf>:
    2340:	97 f9       	bld	r25, 7
    2342:	9f 67       	ori	r25, 0x7F	; 127
    2344:	80 e8       	ldi	r24, 0x80	; 128
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	08 95       	ret

0000234c <__fp_nan>:
    234c:	9f ef       	ldi	r25, 0xFF	; 255
    234e:	80 ec       	ldi	r24, 0xC0	; 192
    2350:	08 95       	ret

00002352 <__fp_pscA>:
    2352:	00 24       	eor	r0, r0
    2354:	0a 94       	dec	r0
    2356:	16 16       	cp	r1, r22
    2358:	17 06       	cpc	r1, r23
    235a:	18 06       	cpc	r1, r24
    235c:	09 06       	cpc	r0, r25
    235e:	08 95       	ret

00002360 <__fp_pscB>:
    2360:	00 24       	eor	r0, r0
    2362:	0a 94       	dec	r0
    2364:	12 16       	cp	r1, r18
    2366:	13 06       	cpc	r1, r19
    2368:	14 06       	cpc	r1, r20
    236a:	05 06       	cpc	r0, r21
    236c:	08 95       	ret

0000236e <__fp_round>:
    236e:	09 2e       	mov	r0, r25
    2370:	03 94       	inc	r0
    2372:	00 0c       	add	r0, r0
    2374:	11 f4       	brne	.+4      	; 0x237a <__fp_round+0xc>
    2376:	88 23       	and	r24, r24
    2378:	52 f0       	brmi	.+20     	; 0x238e <__fp_round+0x20>
    237a:	bb 0f       	add	r27, r27
    237c:	40 f4       	brcc	.+16     	; 0x238e <__fp_round+0x20>
    237e:	bf 2b       	or	r27, r31
    2380:	11 f4       	brne	.+4      	; 0x2386 <__fp_round+0x18>
    2382:	60 ff       	sbrs	r22, 0
    2384:	04 c0       	rjmp	.+8      	; 0x238e <__fp_round+0x20>
    2386:	6f 5f       	subi	r22, 0xFF	; 255
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	8f 4f       	sbci	r24, 0xFF	; 255
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	08 95       	ret

00002390 <__fp_split3>:
    2390:	57 fd       	sbrc	r21, 7
    2392:	90 58       	subi	r25, 0x80	; 128
    2394:	44 0f       	add	r20, r20
    2396:	55 1f       	adc	r21, r21
    2398:	59 f0       	breq	.+22     	; 0x23b0 <__fp_splitA+0x10>
    239a:	5f 3f       	cpi	r21, 0xFF	; 255
    239c:	71 f0       	breq	.+28     	; 0x23ba <__fp_splitA+0x1a>
    239e:	47 95       	ror	r20

000023a0 <__fp_splitA>:
    23a0:	88 0f       	add	r24, r24
    23a2:	97 fb       	bst	r25, 7
    23a4:	99 1f       	adc	r25, r25
    23a6:	61 f0       	breq	.+24     	; 0x23c0 <__fp_splitA+0x20>
    23a8:	9f 3f       	cpi	r25, 0xFF	; 255
    23aa:	79 f0       	breq	.+30     	; 0x23ca <__fp_splitA+0x2a>
    23ac:	87 95       	ror	r24
    23ae:	08 95       	ret
    23b0:	12 16       	cp	r1, r18
    23b2:	13 06       	cpc	r1, r19
    23b4:	14 06       	cpc	r1, r20
    23b6:	55 1f       	adc	r21, r21
    23b8:	f2 cf       	rjmp	.-28     	; 0x239e <__fp_split3+0xe>
    23ba:	46 95       	lsr	r20
    23bc:	f1 df       	rcall	.-30     	; 0x23a0 <__fp_splitA>
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <__fp_splitA+0x30>
    23c0:	16 16       	cp	r1, r22
    23c2:	17 06       	cpc	r1, r23
    23c4:	18 06       	cpc	r1, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	f1 cf       	rjmp	.-30     	; 0x23ac <__fp_splitA+0xc>
    23ca:	86 95       	lsr	r24
    23cc:	71 05       	cpc	r23, r1
    23ce:	61 05       	cpc	r22, r1
    23d0:	08 94       	sec
    23d2:	08 95       	ret

000023d4 <__fp_zero>:
    23d4:	e8 94       	clt

000023d6 <__fp_szero>:
    23d6:	bb 27       	eor	r27, r27
    23d8:	66 27       	eor	r22, r22
    23da:	77 27       	eor	r23, r23
    23dc:	cb 01       	movw	r24, r22
    23de:	97 f9       	bld	r25, 7
    23e0:	08 95       	ret

000023e2 <__gesf2>:
    23e2:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_cmp>
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <__gesf2+0x8>
    23e8:	8f ef       	ldi	r24, 0xFF	; 255
    23ea:	08 95       	ret

000023ec <__mulsf3>:
    23ec:	0e 94 09 12 	call	0x2412	; 0x2412 <__mulsf3x>
    23f0:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_round>
    23f4:	0e 94 a9 11 	call	0x2352	; 0x2352 <__fp_pscA>
    23f8:	38 f0       	brcs	.+14     	; 0x2408 <__mulsf3+0x1c>
    23fa:	0e 94 b0 11 	call	0x2360	; 0x2360 <__fp_pscB>
    23fe:	20 f0       	brcs	.+8      	; 0x2408 <__mulsf3+0x1c>
    2400:	95 23       	and	r25, r21
    2402:	11 f0       	breq	.+4      	; 0x2408 <__mulsf3+0x1c>
    2404:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_inf>
    2408:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_nan>
    240c:	11 24       	eor	r1, r1
    240e:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__fp_szero>

00002412 <__mulsf3x>:
    2412:	0e 94 c8 11 	call	0x2390	; 0x2390 <__fp_split3>
    2416:	70 f3       	brcs	.-36     	; 0x23f4 <__mulsf3+0x8>

00002418 <__mulsf3_pse>:
    2418:	95 9f       	mul	r25, r21
    241a:	c1 f3       	breq	.-16     	; 0x240c <__mulsf3+0x20>
    241c:	95 0f       	add	r25, r21
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	55 1f       	adc	r21, r21
    2422:	62 9f       	mul	r22, r18
    2424:	f0 01       	movw	r30, r0
    2426:	72 9f       	mul	r23, r18
    2428:	bb 27       	eor	r27, r27
    242a:	f0 0d       	add	r31, r0
    242c:	b1 1d       	adc	r27, r1
    242e:	63 9f       	mul	r22, r19
    2430:	aa 27       	eor	r26, r26
    2432:	f0 0d       	add	r31, r0
    2434:	b1 1d       	adc	r27, r1
    2436:	aa 1f       	adc	r26, r26
    2438:	64 9f       	mul	r22, r20
    243a:	66 27       	eor	r22, r22
    243c:	b0 0d       	add	r27, r0
    243e:	a1 1d       	adc	r26, r1
    2440:	66 1f       	adc	r22, r22
    2442:	82 9f       	mul	r24, r18
    2444:	22 27       	eor	r18, r18
    2446:	b0 0d       	add	r27, r0
    2448:	a1 1d       	adc	r26, r1
    244a:	62 1f       	adc	r22, r18
    244c:	73 9f       	mul	r23, r19
    244e:	b0 0d       	add	r27, r0
    2450:	a1 1d       	adc	r26, r1
    2452:	62 1f       	adc	r22, r18
    2454:	83 9f       	mul	r24, r19
    2456:	a0 0d       	add	r26, r0
    2458:	61 1d       	adc	r22, r1
    245a:	22 1f       	adc	r18, r18
    245c:	74 9f       	mul	r23, r20
    245e:	33 27       	eor	r19, r19
    2460:	a0 0d       	add	r26, r0
    2462:	61 1d       	adc	r22, r1
    2464:	23 1f       	adc	r18, r19
    2466:	84 9f       	mul	r24, r20
    2468:	60 0d       	add	r22, r0
    246a:	21 1d       	adc	r18, r1
    246c:	82 2f       	mov	r24, r18
    246e:	76 2f       	mov	r23, r22
    2470:	6a 2f       	mov	r22, r26
    2472:	11 24       	eor	r1, r1
    2474:	9f 57       	subi	r25, 0x7F	; 127
    2476:	50 40       	sbci	r21, 0x00	; 0
    2478:	9a f0       	brmi	.+38     	; 0x24a0 <__mulsf3_pse+0x88>
    247a:	f1 f0       	breq	.+60     	; 0x24b8 <__mulsf3_pse+0xa0>
    247c:	88 23       	and	r24, r24
    247e:	4a f0       	brmi	.+18     	; 0x2492 <__mulsf3_pse+0x7a>
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	bb 1f       	adc	r27, r27
    2486:	66 1f       	adc	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	91 50       	subi	r25, 0x01	; 1
    248e:	50 40       	sbci	r21, 0x00	; 0
    2490:	a9 f7       	brne	.-22     	; 0x247c <__mulsf3_pse+0x64>
    2492:	9e 3f       	cpi	r25, 0xFE	; 254
    2494:	51 05       	cpc	r21, r1
    2496:	80 f0       	brcs	.+32     	; 0x24b8 <__mulsf3_pse+0xa0>
    2498:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_inf>
    249c:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__fp_szero>
    24a0:	5f 3f       	cpi	r21, 0xFF	; 255
    24a2:	e4 f3       	brlt	.-8      	; 0x249c <__mulsf3_pse+0x84>
    24a4:	98 3e       	cpi	r25, 0xE8	; 232
    24a6:	d4 f3       	brlt	.-12     	; 0x249c <__mulsf3_pse+0x84>
    24a8:	86 95       	lsr	r24
    24aa:	77 95       	ror	r23
    24ac:	67 95       	ror	r22
    24ae:	b7 95       	ror	r27
    24b0:	f7 95       	ror	r31
    24b2:	e7 95       	ror	r30
    24b4:	9f 5f       	subi	r25, 0xFF	; 255
    24b6:	c1 f7       	brne	.-16     	; 0x24a8 <__mulsf3_pse+0x90>
    24b8:	fe 2b       	or	r31, r30
    24ba:	88 0f       	add	r24, r24
    24bc:	91 1d       	adc	r25, r1
    24be:	96 95       	lsr	r25
    24c0:	87 95       	ror	r24
    24c2:	97 f9       	bld	r25, 7
    24c4:	08 95       	ret
    24c6:	19 f4       	brne	.+6      	; 0x24ce <__mulsf3_pse+0xb6>
    24c8:	16 f4       	brtc	.+4      	; 0x24ce <__mulsf3_pse+0xb6>
    24ca:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_nan>
    24ce:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__fp_mpack>

000024d2 <sqrt>:
    24d2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__fp_splitA>
    24d6:	b8 f3       	brcs	.-18     	; 0x24c6 <__mulsf3_pse+0xae>
    24d8:	99 23       	and	r25, r25
    24da:	c9 f3       	breq	.-14     	; 0x24ce <__mulsf3_pse+0xb6>
    24dc:	b6 f3       	brts	.-20     	; 0x24ca <__mulsf3_pse+0xb2>
    24de:	9f 57       	subi	r25, 0x7F	; 127
    24e0:	55 0b       	sbc	r21, r21
    24e2:	87 ff       	sbrs	r24, 7
    24e4:	0e 94 b7 12 	call	0x256e	; 0x256e <__fp_norm2>
    24e8:	00 24       	eor	r0, r0
    24ea:	a0 e6       	ldi	r26, 0x60	; 96
    24ec:	40 ea       	ldi	r20, 0xA0	; 160
    24ee:	90 01       	movw	r18, r0
    24f0:	80 58       	subi	r24, 0x80	; 128
    24f2:	56 95       	lsr	r21
    24f4:	97 95       	ror	r25
    24f6:	28 f4       	brcc	.+10     	; 0x2502 <sqrt+0x30>
    24f8:	80 5c       	subi	r24, 0xC0	; 192
    24fa:	66 0f       	add	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	88 1f       	adc	r24, r24
    2500:	20 f0       	brcs	.+8      	; 0x250a <sqrt+0x38>
    2502:	26 17       	cp	r18, r22
    2504:	37 07       	cpc	r19, r23
    2506:	48 07       	cpc	r20, r24
    2508:	30 f4       	brcc	.+12     	; 0x2516 <sqrt+0x44>
    250a:	62 1b       	sub	r22, r18
    250c:	73 0b       	sbc	r23, r19
    250e:	84 0b       	sbc	r24, r20
    2510:	20 29       	or	r18, r0
    2512:	31 29       	or	r19, r1
    2514:	4a 2b       	or	r20, r26
    2516:	a6 95       	lsr	r26
    2518:	17 94       	ror	r1
    251a:	07 94       	ror	r0
    251c:	20 25       	eor	r18, r0
    251e:	31 25       	eor	r19, r1
    2520:	4a 27       	eor	r20, r26
    2522:	58 f7       	brcc	.-42     	; 0x24fa <sqrt+0x28>
    2524:	66 0f       	add	r22, r22
    2526:	77 1f       	adc	r23, r23
    2528:	88 1f       	adc	r24, r24
    252a:	20 f0       	brcs	.+8      	; 0x2534 <sqrt+0x62>
    252c:	26 17       	cp	r18, r22
    252e:	37 07       	cpc	r19, r23
    2530:	48 07       	cpc	r20, r24
    2532:	30 f4       	brcc	.+12     	; 0x2540 <sqrt+0x6e>
    2534:	62 0b       	sbc	r22, r18
    2536:	73 0b       	sbc	r23, r19
    2538:	84 0b       	sbc	r24, r20
    253a:	20 0d       	add	r18, r0
    253c:	31 1d       	adc	r19, r1
    253e:	41 1d       	adc	r20, r1
    2540:	a0 95       	com	r26
    2542:	81 f7       	brne	.-32     	; 0x2524 <sqrt+0x52>
    2544:	b9 01       	movw	r22, r18
    2546:	84 2f       	mov	r24, r20
    2548:	91 58       	subi	r25, 0x81	; 129
    254a:	88 0f       	add	r24, r24
    254c:	96 95       	lsr	r25
    254e:	87 95       	ror	r24
    2550:	08 95       	ret

00002552 <__fp_mpack>:
    2552:	9f 3f       	cpi	r25, 0xFF	; 255
    2554:	31 f0       	breq	.+12     	; 0x2562 <__fp_mpack_finite+0xc>

00002556 <__fp_mpack_finite>:
    2556:	91 50       	subi	r25, 0x01	; 1
    2558:	20 f4       	brcc	.+8      	; 0x2562 <__fp_mpack_finite+0xc>
    255a:	87 95       	ror	r24
    255c:	77 95       	ror	r23
    255e:	67 95       	ror	r22
    2560:	b7 95       	ror	r27
    2562:	88 0f       	add	r24, r24
    2564:	91 1d       	adc	r25, r1
    2566:	96 95       	lsr	r25
    2568:	87 95       	ror	r24
    256a:	97 f9       	bld	r25, 7
    256c:	08 95       	ret

0000256e <__fp_norm2>:
    256e:	91 50       	subi	r25, 0x01	; 1
    2570:	50 40       	sbci	r21, 0x00	; 0
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	88 1f       	adc	r24, r24
    2578:	d2 f7       	brpl	.-12     	; 0x256e <__fp_norm2>
    257a:	08 95       	ret

0000257c <__udivmodsi4>:
    257c:	a1 e2       	ldi	r26, 0x21	; 33
    257e:	1a 2e       	mov	r1, r26
    2580:	aa 1b       	sub	r26, r26
    2582:	bb 1b       	sub	r27, r27
    2584:	fd 01       	movw	r30, r26
    2586:	0d c0       	rjmp	.+26     	; 0x25a2 <__udivmodsi4_ep>

00002588 <__udivmodsi4_loop>:
    2588:	aa 1f       	adc	r26, r26
    258a:	bb 1f       	adc	r27, r27
    258c:	ee 1f       	adc	r30, r30
    258e:	ff 1f       	adc	r31, r31
    2590:	a2 17       	cp	r26, r18
    2592:	b3 07       	cpc	r27, r19
    2594:	e4 07       	cpc	r30, r20
    2596:	f5 07       	cpc	r31, r21
    2598:	20 f0       	brcs	.+8      	; 0x25a2 <__udivmodsi4_ep>
    259a:	a2 1b       	sub	r26, r18
    259c:	b3 0b       	sbc	r27, r19
    259e:	e4 0b       	sbc	r30, r20
    25a0:	f5 0b       	sbc	r31, r21

000025a2 <__udivmodsi4_ep>:
    25a2:	66 1f       	adc	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	88 1f       	adc	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	1a 94       	dec	r1
    25ac:	69 f7       	brne	.-38     	; 0x2588 <__udivmodsi4_loop>
    25ae:	60 95       	com	r22
    25b0:	70 95       	com	r23
    25b2:	80 95       	com	r24
    25b4:	90 95       	com	r25
    25b6:	9b 01       	movw	r18, r22
    25b8:	ac 01       	movw	r20, r24
    25ba:	bd 01       	movw	r22, r26
    25bc:	cf 01       	movw	r24, r30
    25be:	08 95       	ret

000025c0 <__divmodsi4>:
    25c0:	05 2e       	mov	r0, r21
    25c2:	97 fb       	bst	r25, 7
    25c4:	1e f4       	brtc	.+6      	; 0x25cc <__divmodsi4+0xc>
    25c6:	00 94       	com	r0
    25c8:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__negsi2>
    25cc:	57 fd       	sbrc	r21, 7
    25ce:	07 d0       	rcall	.+14     	; 0x25de <__divmodsi4_neg2>
    25d0:	0e 94 be 12 	call	0x257c	; 0x257c <__udivmodsi4>
    25d4:	07 fc       	sbrc	r0, 7
    25d6:	03 d0       	rcall	.+6      	; 0x25de <__divmodsi4_neg2>
    25d8:	4e f4       	brtc	.+18     	; 0x25ec <__divmodsi4_exit>
    25da:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__negsi2>

000025de <__divmodsi4_neg2>:
    25de:	50 95       	com	r21
    25e0:	40 95       	com	r20
    25e2:	30 95       	com	r19
    25e4:	21 95       	neg	r18
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	4f 4f       	sbci	r20, 0xFF	; 255
    25ea:	5f 4f       	sbci	r21, 0xFF	; 255

000025ec <__divmodsi4_exit>:
    25ec:	08 95       	ret

000025ee <__negsi2>:
    25ee:	90 95       	com	r25
    25f0:	80 95       	com	r24
    25f2:	70 95       	com	r23
    25f4:	61 95       	neg	r22
    25f6:	7f 4f       	sbci	r23, 0xFF	; 255
    25f8:	8f 4f       	sbci	r24, 0xFF	; 255
    25fa:	9f 4f       	sbci	r25, 0xFF	; 255
    25fc:	08 95       	ret

000025fe <__tablejump2__>:
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	05 90       	lpm	r0, Z+
    2604:	f4 91       	lpm	r31, Z
    2606:	e0 2d       	mov	r30, r0
    2608:	09 94       	ijmp

0000260a <malloc>:
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	91 05       	cpc	r25, r1
    2616:	10 f4       	brcc	.+4      	; 0x261c <malloc+0x12>
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <__flp>
    2620:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <__flp+0x1>
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	a0 e0       	ldi	r26, 0x00	; 0
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	30 97       	sbiw	r30, 0x00	; 0
    262e:	19 f1       	breq	.+70     	; 0x2676 <malloc+0x6c>
    2630:	40 81       	ld	r20, Z
    2632:	51 81       	ldd	r21, Z+1	; 0x01
    2634:	02 81       	ldd	r16, Z+2	; 0x02
    2636:	13 81       	ldd	r17, Z+3	; 0x03
    2638:	48 17       	cp	r20, r24
    263a:	59 07       	cpc	r21, r25
    263c:	c8 f0       	brcs	.+50     	; 0x2670 <malloc+0x66>
    263e:	84 17       	cp	r24, r20
    2640:	95 07       	cpc	r25, r21
    2642:	69 f4       	brne	.+26     	; 0x265e <malloc+0x54>
    2644:	10 97       	sbiw	r26, 0x00	; 0
    2646:	31 f0       	breq	.+12     	; 0x2654 <malloc+0x4a>
    2648:	12 96       	adiw	r26, 0x02	; 2
    264a:	0c 93       	st	X, r16
    264c:	12 97       	sbiw	r26, 0x02	; 2
    264e:	13 96       	adiw	r26, 0x03	; 3
    2650:	1c 93       	st	X, r17
    2652:	27 c0       	rjmp	.+78     	; 0x26a2 <malloc+0x98>
    2654:	00 93 74 07 	sts	0x0774, r16	; 0x800774 <__flp>
    2658:	10 93 75 07 	sts	0x0775, r17	; 0x800775 <__flp+0x1>
    265c:	22 c0       	rjmp	.+68     	; 0x26a2 <malloc+0x98>
    265e:	21 15       	cp	r18, r1
    2660:	31 05       	cpc	r19, r1
    2662:	19 f0       	breq	.+6      	; 0x266a <malloc+0x60>
    2664:	42 17       	cp	r20, r18
    2666:	53 07       	cpc	r21, r19
    2668:	18 f4       	brcc	.+6      	; 0x2670 <malloc+0x66>
    266a:	9a 01       	movw	r18, r20
    266c:	bd 01       	movw	r22, r26
    266e:	ef 01       	movw	r28, r30
    2670:	df 01       	movw	r26, r30
    2672:	f8 01       	movw	r30, r16
    2674:	db cf       	rjmp	.-74     	; 0x262c <malloc+0x22>
    2676:	21 15       	cp	r18, r1
    2678:	31 05       	cpc	r19, r1
    267a:	f9 f0       	breq	.+62     	; 0x26ba <malloc+0xb0>
    267c:	28 1b       	sub	r18, r24
    267e:	39 0b       	sbc	r19, r25
    2680:	24 30       	cpi	r18, 0x04	; 4
    2682:	31 05       	cpc	r19, r1
    2684:	80 f4       	brcc	.+32     	; 0x26a6 <malloc+0x9c>
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	61 15       	cp	r22, r1
    268c:	71 05       	cpc	r23, r1
    268e:	21 f0       	breq	.+8      	; 0x2698 <malloc+0x8e>
    2690:	fb 01       	movw	r30, r22
    2692:	93 83       	std	Z+3, r25	; 0x03
    2694:	82 83       	std	Z+2, r24	; 0x02
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <malloc+0x96>
    2698:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <__flp+0x1>
    269c:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <__flp>
    26a0:	fe 01       	movw	r30, r28
    26a2:	32 96       	adiw	r30, 0x02	; 2
    26a4:	44 c0       	rjmp	.+136    	; 0x272e <malloc+0x124>
    26a6:	fe 01       	movw	r30, r28
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	81 93       	st	Z+, r24
    26ae:	91 93       	st	Z+, r25
    26b0:	22 50       	subi	r18, 0x02	; 2
    26b2:	31 09       	sbc	r19, r1
    26b4:	39 83       	std	Y+1, r19	; 0x01
    26b6:	28 83       	st	Y, r18
    26b8:	3a c0       	rjmp	.+116    	; 0x272e <malloc+0x124>
    26ba:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <__brkval>
    26be:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <__brkval+0x1>
    26c2:	23 2b       	or	r18, r19
    26c4:	41 f4       	brne	.+16     	; 0x26d6 <malloc+0xcc>
    26c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    26ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    26ce:	30 93 73 07 	sts	0x0773, r19	; 0x800773 <__brkval+0x1>
    26d2:	20 93 72 07 	sts	0x0772, r18	; 0x800772 <__brkval>
    26d6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    26da:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    26de:	21 15       	cp	r18, r1
    26e0:	31 05       	cpc	r19, r1
    26e2:	41 f4       	brne	.+16     	; 0x26f4 <malloc+0xea>
    26e4:	2d b7       	in	r18, 0x3d	; 61
    26e6:	3e b7       	in	r19, 0x3e	; 62
    26e8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26ec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26f0:	24 1b       	sub	r18, r20
    26f2:	35 0b       	sbc	r19, r21
    26f4:	e0 91 72 07 	lds	r30, 0x0772	; 0x800772 <__brkval>
    26f8:	f0 91 73 07 	lds	r31, 0x0773	; 0x800773 <__brkval+0x1>
    26fc:	e2 17       	cp	r30, r18
    26fe:	f3 07       	cpc	r31, r19
    2700:	a0 f4       	brcc	.+40     	; 0x272a <malloc+0x120>
    2702:	2e 1b       	sub	r18, r30
    2704:	3f 0b       	sbc	r19, r31
    2706:	28 17       	cp	r18, r24
    2708:	39 07       	cpc	r19, r25
    270a:	78 f0       	brcs	.+30     	; 0x272a <malloc+0x120>
    270c:	ac 01       	movw	r20, r24
    270e:	4e 5f       	subi	r20, 0xFE	; 254
    2710:	5f 4f       	sbci	r21, 0xFF	; 255
    2712:	24 17       	cp	r18, r20
    2714:	35 07       	cpc	r19, r21
    2716:	48 f0       	brcs	.+18     	; 0x272a <malloc+0x120>
    2718:	4e 0f       	add	r20, r30
    271a:	5f 1f       	adc	r21, r31
    271c:	50 93 73 07 	sts	0x0773, r21	; 0x800773 <__brkval+0x1>
    2720:	40 93 72 07 	sts	0x0772, r20	; 0x800772 <__brkval>
    2724:	81 93       	st	Z+, r24
    2726:	91 93       	st	Z+, r25
    2728:	02 c0       	rjmp	.+4      	; 0x272e <malloc+0x124>
    272a:	e0 e0       	ldi	r30, 0x00	; 0
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	cf 01       	movw	r24, r30
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	08 95       	ret

0000273a <free>:
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	09 f4       	brne	.+2      	; 0x2744 <free+0xa>
    2742:	81 c0       	rjmp	.+258    	; 0x2846 <free+0x10c>
    2744:	fc 01       	movw	r30, r24
    2746:	32 97       	sbiw	r30, 0x02	; 2
    2748:	13 82       	std	Z+3, r1	; 0x03
    274a:	12 82       	std	Z+2, r1	; 0x02
    274c:	a0 91 74 07 	lds	r26, 0x0774	; 0x800774 <__flp>
    2750:	b0 91 75 07 	lds	r27, 0x0775	; 0x800775 <__flp+0x1>
    2754:	10 97       	sbiw	r26, 0x00	; 0
    2756:	81 f4       	brne	.+32     	; 0x2778 <free+0x3e>
    2758:	20 81       	ld	r18, Z
    275a:	31 81       	ldd	r19, Z+1	; 0x01
    275c:	82 0f       	add	r24, r18
    275e:	93 1f       	adc	r25, r19
    2760:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <__brkval>
    2764:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <__brkval+0x1>
    2768:	28 17       	cp	r18, r24
    276a:	39 07       	cpc	r19, r25
    276c:	51 f5       	brne	.+84     	; 0x27c2 <free+0x88>
    276e:	f0 93 73 07 	sts	0x0773, r31	; 0x800773 <__brkval+0x1>
    2772:	e0 93 72 07 	sts	0x0772, r30	; 0x800772 <__brkval>
    2776:	67 c0       	rjmp	.+206    	; 0x2846 <free+0x10c>
    2778:	ed 01       	movw	r28, r26
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	ce 17       	cp	r28, r30
    2780:	df 07       	cpc	r29, r31
    2782:	40 f4       	brcc	.+16     	; 0x2794 <free+0x5a>
    2784:	4a 81       	ldd	r20, Y+2	; 0x02
    2786:	5b 81       	ldd	r21, Y+3	; 0x03
    2788:	9e 01       	movw	r18, r28
    278a:	41 15       	cp	r20, r1
    278c:	51 05       	cpc	r21, r1
    278e:	f1 f0       	breq	.+60     	; 0x27cc <free+0x92>
    2790:	ea 01       	movw	r28, r20
    2792:	f5 cf       	rjmp	.-22     	; 0x277e <free+0x44>
    2794:	d3 83       	std	Z+3, r29	; 0x03
    2796:	c2 83       	std	Z+2, r28	; 0x02
    2798:	40 81       	ld	r20, Z
    279a:	51 81       	ldd	r21, Z+1	; 0x01
    279c:	84 0f       	add	r24, r20
    279e:	95 1f       	adc	r25, r21
    27a0:	c8 17       	cp	r28, r24
    27a2:	d9 07       	cpc	r29, r25
    27a4:	59 f4       	brne	.+22     	; 0x27bc <free+0x82>
    27a6:	88 81       	ld	r24, Y
    27a8:	99 81       	ldd	r25, Y+1	; 0x01
    27aa:	84 0f       	add	r24, r20
    27ac:	95 1f       	adc	r25, r21
    27ae:	02 96       	adiw	r24, 0x02	; 2
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	9b 81       	ldd	r25, Y+3	; 0x03
    27b8:	93 83       	std	Z+3, r25	; 0x03
    27ba:	82 83       	std	Z+2, r24	; 0x02
    27bc:	21 15       	cp	r18, r1
    27be:	31 05       	cpc	r19, r1
    27c0:	29 f4       	brne	.+10     	; 0x27cc <free+0x92>
    27c2:	f0 93 75 07 	sts	0x0775, r31	; 0x800775 <__flp+0x1>
    27c6:	e0 93 74 07 	sts	0x0774, r30	; 0x800774 <__flp>
    27ca:	3d c0       	rjmp	.+122    	; 0x2846 <free+0x10c>
    27cc:	e9 01       	movw	r28, r18
    27ce:	fb 83       	std	Y+3, r31	; 0x03
    27d0:	ea 83       	std	Y+2, r30	; 0x02
    27d2:	49 91       	ld	r20, Y+
    27d4:	59 91       	ld	r21, Y+
    27d6:	c4 0f       	add	r28, r20
    27d8:	d5 1f       	adc	r29, r21
    27da:	ec 17       	cp	r30, r28
    27dc:	fd 07       	cpc	r31, r29
    27de:	61 f4       	brne	.+24     	; 0x27f8 <free+0xbe>
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	84 0f       	add	r24, r20
    27e6:	95 1f       	adc	r25, r21
    27e8:	02 96       	adiw	r24, 0x02	; 2
    27ea:	e9 01       	movw	r28, r18
    27ec:	99 83       	std	Y+1, r25	; 0x01
    27ee:	88 83       	st	Y, r24
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	9b 83       	std	Y+3, r25	; 0x03
    27f6:	8a 83       	std	Y+2, r24	; 0x02
    27f8:	e0 e0       	ldi	r30, 0x00	; 0
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	12 96       	adiw	r26, 0x02	; 2
    27fe:	8d 91       	ld	r24, X+
    2800:	9c 91       	ld	r25, X
    2802:	13 97       	sbiw	r26, 0x03	; 3
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	19 f0       	breq	.+6      	; 0x280e <free+0xd4>
    2808:	fd 01       	movw	r30, r26
    280a:	dc 01       	movw	r26, r24
    280c:	f7 cf       	rjmp	.-18     	; 0x27fc <free+0xc2>
    280e:	8d 91       	ld	r24, X+
    2810:	9c 91       	ld	r25, X
    2812:	11 97       	sbiw	r26, 0x01	; 1
    2814:	9d 01       	movw	r18, r26
    2816:	2e 5f       	subi	r18, 0xFE	; 254
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	82 0f       	add	r24, r18
    281c:	93 1f       	adc	r25, r19
    281e:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <__brkval>
    2822:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <__brkval+0x1>
    2826:	28 17       	cp	r18, r24
    2828:	39 07       	cpc	r19, r25
    282a:	69 f4       	brne	.+26     	; 0x2846 <free+0x10c>
    282c:	30 97       	sbiw	r30, 0x00	; 0
    282e:	29 f4       	brne	.+10     	; 0x283a <free+0x100>
    2830:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <__flp+0x1>
    2834:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <__flp>
    2838:	02 c0       	rjmp	.+4      	; 0x283e <free+0x104>
    283a:	13 82       	std	Z+3, r1	; 0x03
    283c:	12 82       	std	Z+2, r1	; 0x02
    283e:	b0 93 73 07 	sts	0x0773, r27	; 0x800773 <__brkval+0x1>
    2842:	a0 93 72 07 	sts	0x0772, r26	; 0x800772 <__brkval>
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <realloc>:
    284c:	a0 e0       	ldi	r26, 0x00	; 0
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	ec e2       	ldi	r30, 0x2C	; 44
    2852:	f4 e1       	ldi	r31, 0x14	; 20
    2854:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__prologue_saves__+0x8>
    2858:	ec 01       	movw	r28, r24
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	21 f4       	brne	.+8      	; 0x2866 <realloc+0x1a>
    285e:	cb 01       	movw	r24, r22
    2860:	0e 94 05 13 	call	0x260a	; 0x260a <malloc>
    2864:	b4 c0       	rjmp	.+360    	; 0x29ce <realloc+0x182>
    2866:	fc 01       	movw	r30, r24
    2868:	e6 0f       	add	r30, r22
    286a:	f7 1f       	adc	r31, r23
    286c:	9c 01       	movw	r18, r24
    286e:	22 50       	subi	r18, 0x02	; 2
    2870:	31 09       	sbc	r19, r1
    2872:	e2 17       	cp	r30, r18
    2874:	f3 07       	cpc	r31, r19
    2876:	08 f4       	brcc	.+2      	; 0x287a <realloc+0x2e>
    2878:	a8 c0       	rjmp	.+336    	; 0x29ca <realloc+0x17e>
    287a:	d9 01       	movw	r26, r18
    287c:	0d 91       	ld	r16, X+
    287e:	1c 91       	ld	r17, X
    2880:	11 97       	sbiw	r26, 0x01	; 1
    2882:	06 17       	cp	r16, r22
    2884:	17 07       	cpc	r17, r23
    2886:	b0 f0       	brcs	.+44     	; 0x28b4 <realloc+0x68>
    2888:	05 30       	cpi	r16, 0x05	; 5
    288a:	11 05       	cpc	r17, r1
    288c:	08 f4       	brcc	.+2      	; 0x2890 <realloc+0x44>
    288e:	9b c0       	rjmp	.+310    	; 0x29c6 <realloc+0x17a>
    2890:	c8 01       	movw	r24, r16
    2892:	04 97       	sbiw	r24, 0x04	; 4
    2894:	86 17       	cp	r24, r22
    2896:	97 07       	cpc	r25, r23
    2898:	08 f4       	brcc	.+2      	; 0x289c <realloc+0x50>
    289a:	95 c0       	rjmp	.+298    	; 0x29c6 <realloc+0x17a>
    289c:	02 50       	subi	r16, 0x02	; 2
    289e:	11 09       	sbc	r17, r1
    28a0:	06 1b       	sub	r16, r22
    28a2:	17 0b       	sbc	r17, r23
    28a4:	01 93       	st	Z+, r16
    28a6:	11 93       	st	Z+, r17
    28a8:	6d 93       	st	X+, r22
    28aa:	7c 93       	st	X, r23
    28ac:	cf 01       	movw	r24, r30
    28ae:	0e 94 9d 13 	call	0x273a	; 0x273a <free>
    28b2:	89 c0       	rjmp	.+274    	; 0x29c6 <realloc+0x17a>
    28b4:	5b 01       	movw	r10, r22
    28b6:	a0 1a       	sub	r10, r16
    28b8:	b1 0a       	sbc	r11, r17
    28ba:	4c 01       	movw	r8, r24
    28bc:	80 0e       	add	r8, r16
    28be:	91 1e       	adc	r9, r17
    28c0:	a0 91 74 07 	lds	r26, 0x0774	; 0x800774 <__flp>
    28c4:	b0 91 75 07 	lds	r27, 0x0775	; 0x800775 <__flp+0x1>
    28c8:	61 2c       	mov	r6, r1
    28ca:	71 2c       	mov	r7, r1
    28cc:	e1 2c       	mov	r14, r1
    28ce:	f1 2c       	mov	r15, r1
    28d0:	10 97       	sbiw	r26, 0x00	; 0
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <realloc+0x8a>
    28d4:	46 c0       	rjmp	.+140    	; 0x2962 <realloc+0x116>
    28d6:	8d 91       	ld	r24, X+
    28d8:	9c 91       	ld	r25, X
    28da:	11 97       	sbiw	r26, 0x01	; 1
    28dc:	a8 15       	cp	r26, r8
    28de:	b9 05       	cpc	r27, r9
    28e0:	b1 f5       	brne	.+108    	; 0x294e <realloc+0x102>
    28e2:	6c 01       	movw	r12, r24
    28e4:	42 e0       	ldi	r20, 0x02	; 2
    28e6:	c4 0e       	add	r12, r20
    28e8:	d1 1c       	adc	r13, r1
    28ea:	ca 14       	cp	r12, r10
    28ec:	db 04       	cpc	r13, r11
    28ee:	78 f1       	brcs	.+94     	; 0x294e <realloc+0x102>
    28f0:	4c 01       	movw	r8, r24
    28f2:	8a 18       	sub	r8, r10
    28f4:	9b 08       	sbc	r9, r11
    28f6:	64 01       	movw	r12, r8
    28f8:	42 e0       	ldi	r20, 0x02	; 2
    28fa:	c4 0e       	add	r12, r20
    28fc:	d1 1c       	adc	r13, r1
    28fe:	12 96       	adiw	r26, 0x02	; 2
    2900:	bc 90       	ld	r11, X
    2902:	12 97       	sbiw	r26, 0x02	; 2
    2904:	13 96       	adiw	r26, 0x03	; 3
    2906:	ac 91       	ld	r26, X
    2908:	b5 e0       	ldi	r27, 0x05	; 5
    290a:	cb 16       	cp	r12, r27
    290c:	d1 04       	cpc	r13, r1
    290e:	40 f0       	brcs	.+16     	; 0x2920 <realloc+0xd4>
    2910:	b2 82       	std	Z+2, r11	; 0x02
    2912:	a3 83       	std	Z+3, r26	; 0x03
    2914:	91 82       	std	Z+1, r9	; 0x01
    2916:	80 82       	st	Z, r8
    2918:	d9 01       	movw	r26, r18
    291a:	6d 93       	st	X+, r22
    291c:	7c 93       	st	X, r23
    291e:	09 c0       	rjmp	.+18     	; 0x2932 <realloc+0xe6>
    2920:	0e 5f       	subi	r16, 0xFE	; 254
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	80 0f       	add	r24, r16
    2926:	91 1f       	adc	r25, r17
    2928:	f9 01       	movw	r30, r18
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	80 83       	st	Z, r24
    292e:	eb 2d       	mov	r30, r11
    2930:	fa 2f       	mov	r31, r26
    2932:	e1 14       	cp	r14, r1
    2934:	f1 04       	cpc	r15, r1
    2936:	31 f0       	breq	.+12     	; 0x2944 <realloc+0xf8>
    2938:	d7 01       	movw	r26, r14
    293a:	13 96       	adiw	r26, 0x03	; 3
    293c:	fc 93       	st	X, r31
    293e:	ee 93       	st	-X, r30
    2940:	12 97       	sbiw	r26, 0x02	; 2
    2942:	41 c0       	rjmp	.+130    	; 0x29c6 <realloc+0x17a>
    2944:	f0 93 75 07 	sts	0x0775, r31	; 0x800775 <__flp+0x1>
    2948:	e0 93 74 07 	sts	0x0774, r30	; 0x800774 <__flp>
    294c:	3c c0       	rjmp	.+120    	; 0x29c6 <realloc+0x17a>
    294e:	68 16       	cp	r6, r24
    2950:	79 06       	cpc	r7, r25
    2952:	08 f4       	brcc	.+2      	; 0x2956 <realloc+0x10a>
    2954:	3c 01       	movw	r6, r24
    2956:	7d 01       	movw	r14, r26
    2958:	12 96       	adiw	r26, 0x02	; 2
    295a:	0d 90       	ld	r0, X+
    295c:	bc 91       	ld	r27, X
    295e:	a0 2d       	mov	r26, r0
    2960:	b7 cf       	rjmp	.-146    	; 0x28d0 <realloc+0x84>
    2962:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <__brkval>
    2966:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <__brkval+0x1>
    296a:	88 16       	cp	r8, r24
    296c:	99 06       	cpc	r9, r25
    296e:	e1 f4       	brne	.+56     	; 0x29a8 <realloc+0x15c>
    2970:	66 16       	cp	r6, r22
    2972:	77 06       	cpc	r7, r23
    2974:	c8 f4       	brcc	.+50     	; 0x29a8 <realloc+0x15c>
    2976:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    297a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	41 f4       	brne	.+16     	; 0x2992 <realloc+0x146>
    2982:	8d b7       	in	r24, 0x3d	; 61
    2984:	9e b7       	in	r25, 0x3e	; 62
    2986:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    298a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    298e:	84 1b       	sub	r24, r20
    2990:	95 0b       	sbc	r25, r21
    2992:	e8 17       	cp	r30, r24
    2994:	f9 07       	cpc	r31, r25
    2996:	c8 f4       	brcc	.+50     	; 0x29ca <realloc+0x17e>
    2998:	f0 93 73 07 	sts	0x0773, r31	; 0x800773 <__brkval+0x1>
    299c:	e0 93 72 07 	sts	0x0772, r30	; 0x800772 <__brkval>
    29a0:	f9 01       	movw	r30, r18
    29a2:	71 83       	std	Z+1, r23	; 0x01
    29a4:	60 83       	st	Z, r22
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <realloc+0x17a>
    29a8:	cb 01       	movw	r24, r22
    29aa:	0e 94 05 13 	call	0x260a	; 0x260a <malloc>
    29ae:	7c 01       	movw	r14, r24
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	59 f0       	breq	.+22     	; 0x29ca <realloc+0x17e>
    29b4:	a8 01       	movw	r20, r16
    29b6:	be 01       	movw	r22, r28
    29b8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <memcpy>
    29bc:	ce 01       	movw	r24, r28
    29be:	0e 94 9d 13 	call	0x273a	; 0x273a <free>
    29c2:	c7 01       	movw	r24, r14
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <realloc+0x182>
    29c6:	ce 01       	movw	r24, r28
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <realloc+0x182>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	ee e0       	ldi	r30, 0x0E	; 14
    29d4:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__epilogue_restores__+0x8>

000029d8 <atol>:
    29d8:	1f 93       	push	r17
    29da:	fc 01       	movw	r30, r24
    29dc:	99 27       	eor	r25, r25
    29de:	88 27       	eor	r24, r24
    29e0:	bc 01       	movw	r22, r24
    29e2:	e8 94       	clt
    29e4:	11 91       	ld	r17, Z+
    29e6:	10 32       	cpi	r17, 0x20	; 32
    29e8:	e9 f3       	breq	.-6      	; 0x29e4 <atol+0xc>
    29ea:	19 30       	cpi	r17, 0x09	; 9
    29ec:	10 f0       	brcs	.+4      	; 0x29f2 <atol+0x1a>
    29ee:	1e 30       	cpi	r17, 0x0E	; 14
    29f0:	c8 f3       	brcs	.-14     	; 0x29e4 <atol+0xc>
    29f2:	1b 32       	cpi	r17, 0x2B	; 43
    29f4:	51 f0       	breq	.+20     	; 0x2a0a <atol+0x32>
    29f6:	1d 32       	cpi	r17, 0x2D	; 45
    29f8:	49 f4       	brne	.+18     	; 0x2a0c <atol+0x34>
    29fa:	68 94       	set
    29fc:	06 c0       	rjmp	.+12     	; 0x2a0a <atol+0x32>
    29fe:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__mulsi_const_10>
    2a02:	61 0f       	add	r22, r17
    2a04:	71 1d       	adc	r23, r1
    2a06:	81 1d       	adc	r24, r1
    2a08:	91 1d       	adc	r25, r1
    2a0a:	11 91       	ld	r17, Z+
    2a0c:	10 53       	subi	r17, 0x30	; 48
    2a0e:	1a 30       	cpi	r17, 0x0A	; 10
    2a10:	b0 f3       	brcs	.-20     	; 0x29fe <atol+0x26>
    2a12:	3e f4       	brtc	.+14     	; 0x2a22 <atol+0x4a>
    2a14:	90 95       	com	r25
    2a16:	80 95       	com	r24
    2a18:	70 95       	com	r23
    2a1a:	61 95       	neg	r22
    2a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	1f 91       	pop	r17
    2a24:	08 95       	ret

00002a26 <memcpy>:
    2a26:	fb 01       	movw	r30, r22
    2a28:	dc 01       	movw	r26, r24
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <memcpy+0xa>
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	0d 92       	st	X+, r0
    2a30:	41 50       	subi	r20, 0x01	; 1
    2a32:	50 40       	sbci	r21, 0x00	; 0
    2a34:	d8 f7       	brcc	.-10     	; 0x2a2c <memcpy+0x6>
    2a36:	08 95       	ret

00002a38 <strcpy>:
    2a38:	fb 01       	movw	r30, r22
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	01 90       	ld	r0, Z+
    2a3e:	0d 92       	st	X+, r0
    2a40:	00 20       	and	r0, r0
    2a42:	e1 f7       	brne	.-8      	; 0x2a3c <strcpy+0x4>
    2a44:	08 95       	ret

00002a46 <__mulsi_const_10>:
    2a46:	59 2f       	mov	r21, r25
    2a48:	48 2f       	mov	r20, r24
    2a4a:	37 2f       	mov	r19, r23
    2a4c:	26 2f       	mov	r18, r22
    2a4e:	66 0f       	add	r22, r22
    2a50:	77 1f       	adc	r23, r23
    2a52:	88 1f       	adc	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	66 0f       	add	r22, r22
    2a58:	77 1f       	adc	r23, r23
    2a5a:	88 1f       	adc	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	62 0f       	add	r22, r18
    2a60:	73 1f       	adc	r23, r19
    2a62:	84 1f       	adc	r24, r20
    2a64:	95 1f       	adc	r25, r21
    2a66:	66 0f       	add	r22, r22
    2a68:	77 1f       	adc	r23, r23
    2a6a:	88 1f       	adc	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	08 95       	ret

00002a70 <__prologue_saves__>:
    2a70:	2f 92       	push	r2
    2a72:	3f 92       	push	r3
    2a74:	4f 92       	push	r4
    2a76:	5f 92       	push	r5
    2a78:	6f 92       	push	r6
    2a7a:	7f 92       	push	r7
    2a7c:	8f 92       	push	r8
    2a7e:	9f 92       	push	r9
    2a80:	af 92       	push	r10
    2a82:	bf 92       	push	r11
    2a84:	cf 92       	push	r12
    2a86:	df 92       	push	r13
    2a88:	ef 92       	push	r14
    2a8a:	ff 92       	push	r15
    2a8c:	0f 93       	push	r16
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	ca 1b       	sub	r28, r26
    2a9a:	db 0b       	sbc	r29, r27
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	09 94       	ijmp

00002aa8 <__epilogue_restores__>:
    2aa8:	2a 88       	ldd	r2, Y+18	; 0x12
    2aaa:	39 88       	ldd	r3, Y+17	; 0x11
    2aac:	48 88       	ldd	r4, Y+16	; 0x10
    2aae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aba:	b9 84       	ldd	r11, Y+9	; 0x09
    2abc:	c8 84       	ldd	r12, Y+8	; 0x08
    2abe:	df 80       	ldd	r13, Y+7	; 0x07
    2ac0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ac8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aca:	b9 81       	ldd	r27, Y+1	; 0x01
    2acc:	ce 0f       	add	r28, r30
    2ace:	d1 1d       	adc	r29, r1
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	ed 01       	movw	r28, r26
    2adc:	08 95       	ret

00002ade <__do_global_dtors>:
    2ade:	10 e0       	ldi	r17, 0x00	; 0
    2ae0:	ce e6       	ldi	r28, 0x6E	; 110
    2ae2:	d0 e0       	ldi	r29, 0x00	; 0
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <__do_global_dtors+0x10>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__tablejump2__>
    2aec:	21 96       	adiw	r28, 0x01	; 1
    2aee:	cf 36       	cpi	r28, 0x6F	; 111
    2af0:	d1 07       	cpc	r29, r17
    2af2:	c9 f7       	brne	.-14     	; 0x2ae6 <__do_global_dtors+0x8>
    2af4:	f8 94       	cli

00002af6 <__stop_program>:
    2af6:	ff cf       	rjmp	.-2      	; 0x2af6 <__stop_program>
